undergradu
topic
in
comput
scienc
utic
deliv
high-qual
instruct
content
for
under-
graduat
studi
in
all
area
of
comput
and
inform
scienc
from
core
foundat
and
theoreti-
cal
materi
to
final-year
topic
and
applic
utic
book
take
a
fresh
concis
and
modern
approach
and
are
ideal
for
self-studi
or
for
a
one-
or
two-semest
cours
the
text
are
all
author
by
establish
expert
in
their
field
review
by
an
intern
advisori
board
and
contain
numer
exampl
and
problem
mani
includ
fulli
work
solut
depart
of
comput
scienc
and
engin
iit
delhi
india
ian
macki
e´
cole
polytechniqu
franc
and
univers
of
sussex
uk
samson
abramski
univers
of
oxford
uk
chri
hankin
imperi
colleg
london
uk
dexter
kozen
cornel
univers
usa
andrew
pitt
univers
of
cambridg
uk
hann
rii
nielson
technic
univers
of
denmark
denmark
steven
skiena
stoni
brook
univers
usa
david
zhang
the
hong
kong
polytechn
univers
hong
kong
undergradu
topic
in
comput
scienc
issn
1863-7310
isbn
978-1-84800-301-9
e-isbn
978-1-84800-302-
10.1007/978-1-84800-302-6
a
catalogu
record
for
thi
book
is
avail
from
the
british
librari
librari
of
congress
control
number
2008933221
apart
from
ani
fair
deal
for
the
purpos
of
research
or
privat
studi
or
critic
or
review
a
permit
under
the
copyright
design
and
patent
act
1988
thi
public
may
onli
be
reproduc
store
or
transmit
in
ani
form
or
by
ani
mean
with
the
prior
permiss
in
write
of
the
publish
or
in
the
case
of
reprograph
reproduct
in
accord
with
the
term
of
licens
issu
by
the
copyright
licens
agenc
enquiri
concern
reproduct
outsid
those
term
should
be
sent
to
the
publish
the
use
of
regist
name
trademark
etc.
in
thi
public
doe
not
impli
even
in
the
absenc
of
a
specif
statement
that
such
name
are
exempt
from
the
relev
law
and
regul
and
therefor
free
for
gener
use
the
publish
make
no
represent
express
or
impli
with
regard
to
the
accuraci
of
the
inform
contain
in
thi
book
and
can
not
accept
ani
legal
respons
or
liabil
for
ani
error
or
omiss
that
may
be
made
an
introductori
cours
on
softwar
engin
remain
one
of
the
hardest
subject
to
teach
larg
becaus
of
the
wide
rang
of
topic
the
area
encom-
pass
i
have
believ
for
some
time
that
we
often
tend
to
teach
too
mani
concept
and
topic
in
an
introductori
cours
result
in
shallow
knowledg
and
littl
insight
on
applic
of
these
concept
and
softwar
engin
is
final
about
applic
of
concept
to
effici
engin
good
softwar
solut
i
believ
that
an
introductori
cours
on
softwar
engin
should
focu
on
impart
to
student
the
knowledg
and
skill
that
are
need
to
success
execut
a
commerci
project
of
a
few
person-month
effort
while
employ
proper
practic
and
techniqu
it
is
worth
point
out
that
a
vast
major
of
the
project
execut
in
the
industri
today
fall
in
thi
scope—execut
by
a
small
team
over
a
few
month
i
also
believ
that
by
care
select
the
concept
and
topic
we
can
in
the
cours
of
a
semest
achiev
thi
thi
is
the
motiv
of
thi
book
the
goal
of
thi
book
is
to
introduc
to
the
student
a
limit
number
of
concept
and
practic
which
will
achiev
the
follow
two
object
teach
the
student
the
skill
need
to
execut
a
smallish
commerci
project
provid
the
student
necessari
conceptu
background
for
undertak
ad-
vanc
studi
in
softwar
engin
through
cours
or
on
their
own
i
have
includ
in
thi
book
onli
those
concept
that
i
believ
are
founda-
tional
and
through
which
the
two
object
mention
abov
can
be
met
ad-
vanc
topic
have
been
conscious
left
out
as
execut
a
softwar
project
requir
skill
in
two
dimensions—engin
and
project
management—thi
book
focu
on
key
task
in
these
two
dimens
and
discu
concept
and
techniqu
that
can
be
appli
to
effect
execut
these
task
the
book
is
organ
in
a
simpl
manner
with
one
chapter
for
each
of
the
key
task
in
a
project
for
engin
these
task
are
requir
analy-
si
and
specif
architectur
design
modul
level
design
code
and
unit
test
and
test
for
project
manag
the
key
task
are
project
plan-
ning
and
project
monitor
and
control
but
both
are
discuss
togeth
in
one
chapter
on
project
plan
a
even
monitor
ha
to
be
plan
in
addi-
tion
the
book
contain
one
chapter
that
clearli
defin
the
problem
domain
of
softwar
engin
and
anoth
chapter
that
discu
the
central
concept
of
softwar
process
which
integr
the
differ
task
execut
in
a
project
each
chapter
open
with
some
introduct
and
then
clearli
list
the
chapter
goal
or
what
the
reader
can
expect
to
learn
from
the
chapter
for
the
task
cover
in
the
chapter
the
import
concept
are
first
discuss
follow
by
a
discuss
of
the
output
of
the
task
the
desir
qualiti
properti
of
the
output
and
some
practic
method
and
notat
for
perform
the
task
the
explan
are
support
by
exampl
and
the
key
learn
are
summar
in
the
end
for
the
reader
the
chapter
end
with
some
self-assess
exercis
the
book
is
primarili
intent
for
an
introductori
cours
on
softwar
engi-
neer
in
ani
undergradu
or
graduat
program
it
is
target
for
student
who
know
program
but
have
not
had
a
formal
exposur
to
softwar
engi-
neer
the
book
can
also
be
use
by
profession
who
are
in
a
similar
state—know
some
program
but
want
to
be
introduc
to
the
systemat
approach
of
softwar
engin
though
the
book
is
self-contain
some
teach
support
and
supplement
resourc
are
avail
through
a
websit
the
url
is
the
resourc
avail
on
the
site
includ
the
powerpoint
present
for
each
chapter
in
ppt
format
so
instructor
can
chang
them
to
suit
their
style
variou
templat
for
differ
output
in
a
project
that
can
be
use
for
the
student
project
in
the
cours
a
case
studi
with
most
of
the
major
output
of
the
project
some
practic
exercis
for
unit
test
and
inspect
i
would
like
to
express
my
gratitud
to
my
editor
wayn
wheeler
who
con-
ceiv
thi
idea
of
a
concis
introductori
book
and
creat
thi
opportun
i
would
also
like
to
express
my
thank
to
my
wife
shikha
and
my
daughter
sumedha
and
sunanda
for
onc
again
bear
with
my
mood
and
odd
hour
ask
ani
student
who
ha
had
some
program
experi
the
follow
question
you
are
given
a
problem
for
which
you
have
to
build
a
softwar
system
that
most
student
feel
will
be
approxim
10,000
line
of
say
c
or
java
code
if
you
are
work
full
time
on
it
how
long
will
it
take
you
to
build
thi
system
the
answer
of
student
is
gener
and
given
the
program-
ming
expertis
of
the
student
there
is
a
good
chanc
that
they
will
be
abl
to
build
the
softwar
and
demo
it
to
the
professor
within
with
the
product
of
the
student
will
be
5000
line
of
code
loc
per
person-month
now
let
u
take
an
altern
scenario—w
act
a
client
and
pose
the
same
problem
to
a
compani
that
is
in
the
busi
of
develop
softwar
for
client
though
there
is
no
standard
product
figur
and
it
vari
a
lot
it
is
fair
to
say
a
product
figur
of
1000
loc
per
person-month
is
quit
respect
though
it
can
be
a
low
a
100
loc
per
person-month
for
embed
system
with
thi
product
a
team
of
profession
in
a
softwar
organ
will
take
10
person-month
to
build
thi
softwar
system
whi
thi
differ
in
product
in
the
two
scenario
whi
is
it
that
the
same
student
who
can
produc
softwar
at
a
product
of
a
few
thousand
loc
per
month
while
in
colleg
end
up
produc
onli
about
a
thousand
loc
per
month
when
work
in
a
compani
the
answer
of
cours
is
that
two
differ
thing
are
be
built
in
the
two
scenario
in
the
first
a
student
system
is
be
built
which
is
primarili
meant
for
demonstr
purpos
and
is
not
expect
to
be
use
later
becaus
it
is
p.
jalot
a
concis
introduct
to
softwar
engin
not
to
be
use
noth
of
signific
depend
on
the
softwar
and
the
presenc
of
bug
and
lack
of
qualiti
is
not
a
major
concern
neither
are
the
other
qualiti
issu
like
usabl
maintain
portabl
etc
on
the
other
hand
an
industrial-strength
softwar
system
is
built
to
solv
some
problem
of
a
client
and
is
use
by
the
client
’
s
organ
for
oper
some
part
of
busi
and
a
malfunct
of
such
a
system
can
have
huge
impact
in
term
of
financi
or
busi
loss
inconveni
to
user
or
loss
of
properti
and
life
consequ
the
softwar
system
need
to
be
of
high
qualiti
with
respect
to
properti
like
reliabl
usabl
portabl
etc
thi
need
for
high
qualiti
and
to
satisfi
the
the
end
user
ha
a
major
impact
on
the
way
softwar
is
develop
and
it
cost
the
rule
of
thumb
brook
give
suggest
that
the
industrial-strength
softwar
may
cost
about
10
time
the
student
softwar
16
the
softwar
industri
is
larg
interest
in
develop
industrial-strength
softwar
and
the
area
of
softwar
engin
focu
on
how
to
build
such
system
that
is
the
problem
domain
for
softwar
engin
is
industrial-
strength
softwar
in
the
rest
of
the
book
when
we
use
the
term
softwar
we
mean
industrial-strength
softwar
in
the
remaind
of
thi
chapter
we
will
learn
that
qualiti
cost
and
schedul
are
the
main
forc
that
drive
a
industrial-
strength
softwar
project
how
cost
and
product
are
defin
and
measur
for
such
a
project
and
how
qualiti
of
softwar
is
character
and
measur
that
larg
scale
and
chang
are
import
attribut
of
the
problem
domain
and
solut
approach
have
to
handl
them
though
the
need
for
high
qualiti
distinguish
industri
strength
softwar
from
other
cost
and
schedul
are
other
major
drive
forc
for
such
softwar
in
the
industrial-strength
softwar
domain
there
are
three
basic
forc
at
play—cost
schedul
and
qualiti
the
softwar
should
be
produc
at
reason
cost
in
a
reason
time
and
should
be
of
good
qualiti
these
three
paramet
often
drive
and
defin
a
softwar
project
industrial-strength
softwar
is
veri
expens
primarili
due
to
the
fact
that
softwar
develop
is
extrem
labor-intens
to
get
an
idea
of
the
cost
involv
let
u
consid
the
current
state
of
practic
in
the
industri
line
of
code
loc
or
thousand
of
line
of
code
kloc
deliv
is
by
far
the
most
commonli
use
measur
of
softwar
size
in
the
industri
as
the
main
cost
of
produc
softwar
is
the
manpow
employ
the
cost
of
develop
softwar
is
gener
measur
in
term
of
person-month
of
effort
spent
in
develop
and
product
is
frequent
measur
in
the
industri
in
term
of
loc
or
kloc
per
person-month
the
product
in
the
softwar
industri
for
write
fresh
code
gener
rang
from
few
hundr
to
about
1000+
loc
per
person-month
thi
produc-
tiviti
is
over
the
entir
develop
cycl
not
just
the
code
task
softwar
compani
often
charg
the
client
for
whom
they
are
develop
the
softwar
be-
tween
$
3000
-
$
15,000
per
person-month
with
a
product
of
1000
loc
per
person-month
it
mean
that
each
line
of
deliv
code
cost
between
$
$
15
and
even
small
project
can
easili
end
up
with
softwar
of
50,000
loc
with
thi
product
such
a
softwar
project
will
cost
between
$
150,000
and
schedul
is
anoth
import
factor
in
mani
project
busi
trend
are
dictat
that
the
time
to
market
of
a
product
should
be
reduc
that
is
the
cycl
time
from
concept
to
deliveri
should
be
small
for
softwar
thi
mean
that
it
need
to
be
develop
faster
and
within
the
specifi
time
unfortun
the
histori
of
softwar
is
full
of
case
where
project
have
been
substanti
late
clearli
therefor
reduc
the
cost
and
the
cycl
time
for
softwar
de-
velop
are
central
goal
of
softwar
engin
product
in
term
of
output
kloc
per
person-month
can
adequ
captur
both
cost
and
sched-
ule
concern
if
product
is
higher
it
should
be
clear
that
the
cost
in
term
of
person-month
will
be
lower
the
same
work
can
now
be
done
with
fewer
person-month
similarli
if
product
is
higher
the
potenti
of
develop
the
softwar
in
le
time
improves—a
team
of
higher
product
will
finish
a
job
in
le
time
than
a
same-s
team
with
lower
product
the
actual
time
the
project
will
take
of
cours
depend
also
on
the
number
of
peopl
al-
locat
to
the
project
henc
pursuit
of
higher
product
is
a
basic
drive
forc
behind
softwar
engin
and
a
major
reason
for
use
the
differ
tool
and
techniqu
besid
cost
and
schedul
the
other
major
factor
drive
softwar
engi-
neer
is
qualiti
today
qualiti
is
one
of
the
main
mantra
and
busi
strategi
are
design
around
it
unfortun
a
larg
number
of
instanc
have
occur
regard
the
unreli
of
software—th
softwar
often
doe
not
do
what
it
is
suppos
to
do
or
doe
someth
it
is
not
suppos
to
do
clearli
develop
high-qual
softwar
is
anoth
fundament
goal
of
soft-
ware
engin
howev
while
cost
is
gener
well
understood
the
concept
of
qualiti
in
the
context
of
softwar
need
further
elabor
the
intern
standard
on
softwar
product
qualiti
55
suggest
that
softwar
qualiti
compris
six
main
attribut
a
shown
in
figur
these
attribut
can
be
defin
a
follow
function
the
capabl
to
provid
function
which
meet
state
and
impli
need
when
the
softwar
is
use
reliabl
the
capabl
to
provid
failure-fre
servic
usabl
the
capabl
to
be
understood
learn
and
use
effici
the
capabl
to
provid
appropri
perform
rel
to
the
amount
of
resourc
use
maintain
the
capabl
to
be
modifi
for
purpos
of
make
cor-
rection
improv
or
adapt
portabl
the
capabl
to
be
adapt
for
differ
specifi
environ-
ment
without
appli
action
or
mean
other
than
those
provid
for
thi
purpos
in
the
product
with
multipl
dimens
to
qualiti
differ
project
may
emphas
dif-
ferent
attribut
and
a
global
singl
number
for
qualiti
is
not
possibl
how-
ever
despit
the
fact
that
there
are
mani
qualiti
attribut
reliabl
is
gen-
eral
accept
to
be
the
main
qualiti
criterion
as
unreli
of
softwar
is
due
to
the
presenc
of
defect
in
the
softwar
one
measur
of
qualiti
is
the
number
of
defect
in
the
deliv
softwar
per
unit
size
gener
taken
to
be
thousand
of
line
of
code
or
kloc
with
thi
a
the
major
qualiti
criterion
the
qualiti
object
is
to
reduc
the
number
of
defect
per
kloc
a
much
a
possibl
current
best
practic
in
softwar
engin
have
been
abl
to
reduc
the
defect
densiti
to
le
than
to
determin
the
qualiti
of
a
softwar
product
we
need
to
determin
the
number
of
defect
in
the
softwar
that
wa
deliv
thi
number
is
clearli
not
known
at
deliveri
time
and
may
never
be
known
one
approach
to
measur
qualiti
is
to
log
the
defect
found
in
or
after
deliveri
and
defin
qualiti
with
respect
to
these
defect
thi
mean
that
qualiti
of
deliv
softwar
can
onli
be
determin
the
defect
densiti
can
howev
also
be
estim
from
past
data
of
similar
projects—if
similar
approach
are
be
use
then
it
is
expect
that
the
current
project
will
have
similar
defect
densiti
a
the
past
project
it
should
be
point
out
that
to
use
thi
definit
of
qualiti
what
a
defect
is
must
be
clearli
defin
a
defect
could
be
some
problem
in
the
softwar
that
caus
the
softwar
to
crash
or
a
problem
that
caus
an
output
to
be
not
properli
align
or
one
that
misspel
some
word
etc
the
exact
definit
of
what
is
consid
a
defect
will
clearli
depend
on
the
project
or
the
standard
the
organ
develop
the
project
us
typic
it
is
the
latter
besid
reliabl
anoth
qualiti
attribut
of
great
interest
is
maintain-
abil
onc
the
softwar
is
deliv
and
deploy
it
enter
the
mainten
phase
whi
is
mainten
need
for
softwar
when
softwar
ha
no
physic
compon
that
can
degrad
with
age
softwar
need
to
be
maintain
be-
caus
of
the
residu
defect
remain
in
the
system
it
is
commonli
believ
that
the
state
of
the
art
today
is
limit
and
develop
softwar
with
zero
de-
fect
densiti
is
not
possibl
these
defect
onc
discov
need
to
be
remov
lead
to
what
is
call
correct
mainten
mainten
is
also
need
to
chang
the
deliv
softwar
to
satisfi
the
enhanc
need
of
the
user
and
the
environ
lead
to
adapt
mainten
over
the
life
of
a
softwar
system
mainten
cost
can
far
exceed
the
cost
of
origin
develop
the
maintenance-to-development-cost
ratio
ha
been
various
suggest
a
80:20
70:30
or
60:40
due
to
thi
high
cost
maintain
attribut
of
deliv
softwar
is
of
high
interest—it
is
clearli
desir
to
have
softwar
system
that
are
easier
to
maintain
though
cost
schedul
and
qualiti
are
the
main
drive
forc
for
a
project
in
our
problem
domain
of
industri
strength
softwar
there
are
some
other
char-
acterist
of
the
problem
domain
that
also
influenc
the
solut
approach
employ
we
focu
on
two
such
characteristics—scal
and
chang
most
industrial-strength
softwar
system
tend
to
be
larg
and
complex
requir
ten
of
thousand
of
line
of
code
size
of
some
of
the
well-known
softwar
product
are
given
in
tabl
as
can
be
expect
develop
of
a
larg
system
requir
a
differ
set
of
method
compar
to
develop
a
small
system
a
the
method
that
are
use
for
develop
small
system
often
do
not
scale
up
to
larg
system
an
exampl
will
illustr
thi
point
consid
the
problem
of
count
peopl
in
a
room
versu
take
a
censu
of
a
countri
both
are
essenti
count
problem
but
the
method
use
for
count
peopl
in
a
room
will
just
not
work
when
take
a
censu
a
differ
set
of
method
will
have
to
be
use
for
conduct
a
censu
and
the
censu
problem
will
requir
consider
more
manag
organ
and
valid
in
addit
to
count
similarli
method
that
one
can
use
to
develop
program
of
a
few
hundr
line
can
not
be
expect
to
work
when
softwar
of
a
few
hundr
thousand
line
need
to
be
develop
a
differ
set
of
method
must
be
use
for
develop
larg
softwar
ani
softwar
project
involv
the
use
of
engin
and
project
manage-
ment
in
small
project
inform
method
for
develop
and
manag
can
be
use
howev
for
larg
project
both
have
to
be
much
more
rigor
a
illustr
in
figur
in
other
word
to
success
execut
a
project
a
proper
method
for
engin
the
system
ha
to
be
employ
and
the
project
ha
to
be
tightli
manag
to
make
sure
that
cost
schedul
and
qualiti
are
under
control
larg
scale
is
a
key
characterist
of
the
problem
domain
and
the
solut
approach
should
employ
tool
and
techniqu
that
have
the
abil
to
build
larg
softwar
system
chang
is
anoth
characterist
of
the
problem
domain
which
the
ap-
proach
for
develop
must
handl
as
the
complet
set
of
requir
for
the
system
is
gener
not
known
often
can
not
be
known
at
the
start
of
the
project
or
state
a
develop
proce
and
time
pass
addit
requir
are
identifi
which
need
to
be
incorpor
in
the
softwar
be-
ing
develop
thi
need
for
chang
requir
that
method
for
develop
embrac
chang
and
accommod
it
effici
chang
request
can
be
quit
disrupt
to
a
project
and
if
not
handl
properli
can
consum
up
to
30
to
40
%
of
the
develop
cost
14
as
discuss
abov
softwar
ha
to
be
chang
even
after
it
ha
been
de-
ploy
though
tradit
chang
in
softwar
dure
mainten
have
been
distinguish
from
chang
that
occur
while
the
develop
is
take
place
these
line
are
blur
a
fundament
the
chang
in
both
of
these
scenario
are
similar—exist
sourc
code
need
to
be
chang
due
to
some
chang
in
the
requir
or
due
to
some
defect
that
need
to
be
remov
overal
a
the
world
chang
faster
softwar
ha
to
chang
faster
even
while
under
develop
chang
in
requir
are
therefor
a
characteris-
tic
of
the
problem
domain
in
today
’
s
world
approach
that
can
not
accept
and
accommod
chang
are
of
littl
use—they
can
solv
onli
those
few
problem
that
are
chang
resist
the
problem
domain
for
softwar
engin
is
industrial-strength
softwar
thi
softwar
is
meant
to
solv
some
problem
of
some
set
of
user
and
is
expect
to
be
of
high
qualiti
in
thi
problem
domain
cost
schedul
and
qualiti
are
basic
drive
forc
henc
method
and
tool
that
will
be
use
for
solv
problem
in
thi
domain
must
ensur
high
product
and
high
qualiti
product
is
measur
a
amount
of
output
per
unit
of
input
resourc
in
softwar
output
can
be
measur
in
term
of
line
of
code
deliv
and
a
human
time
is
the
main
resourc
input
can
be
measur
a
person-month
product
can
therefor
be
measur
a
line
of
code
deliv
per
person-
month
softwar
qualiti
ha
mani
attribut
which
includ
function
reliabil-
iti
usabl
effici
maintain
and
portabl
reliabl
is
often
consid
a
the
main
qualiti
attribut
and
a
unreli
in
softwar
is
due
to
defect
in
the
softwar
qualiti
can
be
character
by
number
of
defect
per
thousand
line
of
code
the
problem
in
thi
domain
often
tend
to
be
veri
larg
and
where
the
need
of
the
custom
chang
fast
henc
the
techniqu
use
for
develop
industrial-strength
softwar
should
be
such
that
they
are
capabl
of
build
larg
softwar
system
and
have
the
capabl
to
handl
chang
what
are
the
main
differ
between
a
student
softwar
and
industrial-strength
softwar
if
develop
a
program
for
solv
a
problem
requir
effort
e
it
is
estim
that
an
industrial-strength
softwar
for
solv
that
problem
will
requir
10e
effort
where
do
you
think
thi
extra
effort
cost
is
spent
what
measur
will
you
take
in
a
project
to
measur
the
product
and
how
will
you
determin
the
product
from
these
measur
what
are
the
differ
attribut
of
softwar
qualiti
if
for
an
account
soft-
ware
we
are
most
interest
in
ensur
that
the
softwar
doe
not
make
ani
comput
mistak
then
which
of
the
qualiti
attribut
should
we
be
most
concern
about
what
are
some
of
the
project
manag
task
that
you
will
do
differ
for
a
larg
project
a
compar
to
a
small
project
how
will
your
execut
of
these
task
chang
suppos
chang
are
to
be
made
to
a
softwar
system
that
is
in
oper
whi
will
chang
to
such
a
system
cost
a
lot
more
than
just
make
chang
to
the
sourc
code
file
now
that
we
have
a
better
understand
of
the
problem
domain
that
softwar
engin
deal
with
let
u
orient
our
discuss
to
softwar
engin
itself
softwar
engin
is
defin
a
the
systemat
approach
to
the
develop
oper
mainten
and
retir
of
softwar
52
we
have
seen
that
besid
deliv
softwar
high
qualiti
low
cost
and
low
cycl
time
are
also
goal
which
softwar
engin
must
achiev
in
other
word
the
systemat
approach
must
help
achiev
a
high
qualiti
and
productiv-
iti
q
&
p
in
softwar
the
three
main
factor
that
influenc
q
&
p
are
peopl
process
and
technolog
that
is
the
final
qualiti
deliv
and
product
achiev
depend
on
the
skill
of
the
peopl
involv
in
the
softwar
project
the
process
peopl
use
to
perform
the
differ
task
in
the
project
and
the
tool
they
use
as
it
is
peopl
who
ultim
develop
and
deliv
and
product
is
measur
with
respect
to
peopl
’
s
effort
a
the
basic
input
the
main
job
of
process
is
to
help
peopl
achiev
higher
q
&
p
by
specifi
what
task
to
do
and
how
to
do
them
tool
are
aid
that
help
peopl
perform
some
of
the
task
more
effici
and
with
fewer
error
it
should
therefor
be
clear
that
to
satisfi
the
object
of
deliv
softwar
with
high
q
&
p
process
form
the
core
consequ
in
softwar
engin
the
focu
is
primarili
on
process
which
are
refer
to
a
the
systemat
approach
in
the
definit
given
abov
it
is
thi
focu
on
process
that
distinguish
softwar
engin
from
most
other
comput
disciplin
mani
other
comput
disciplin
focu
on
some
type
of
product—oper
system
databas
etc.—whil
softwar
engin
focu
on
the
process
for
produc
the
product
p.
jalot
a
concis
introduct
to
softwar
engin
as
process
form
the
heart
of
softwar
engin
with
tool
and
tech-
nolog
provid
support
to
effici
execut
the
process
thi
book
focu
primarili
on
process
in
thi
chapter
we
will
discu
role
of
a
process
and
a
process
model
in
a
project
variou
compon
process
in
the
softwar
process
and
the
key
role
of
the
develop
process
and
the
project
manag
process
variou
model
for
the
develop
process—waterfal
prototyp
itera-
tive
rup
timebox
and
xp
the
overal
structur
of
the
project
manag
process
and
it
key
phase
a
process
is
a
sequenc
of
step
perform
for
a
given
purpos
52
as
men-
tion
earlier
while
develop
industri
strength
softwar
the
purpos
is
to
develop
softwar
to
satisfi
the
need
of
some
user
or
client
a
shown
in
figur
a
softwar
project
is
one
instanc
of
thi
problem
and
the
develop
process
is
what
is
use
to
achiev
thi
purpos
so
for
a
project
it
develop
process
play
a
key
role—it
is
by
follow
the
process
the
desir
end
goal
of
deliv
the
softwar
is
achiev
howev
a
discuss
earlier
it
is
not
suffici
to
just
reach
the
final
goal
of
have
the
desir
softwar
but
we
want
that
the
project
be
done
at
low
cost
and
in
low
cycl
time
and
deliv
high-qual
softwar
the
role
of
process
increas
due
to
these
addit
goal
and
though
mani
process
can
achiev
the
basic
goal
of
develop
softwar
in
figur
to
achiev
high
q
&
p
we
need
some
optimum
process
it
is
thi
goal
that
make
design
a
process
a
challeng
we
must
distinguish
process
specif
or
descript
from
the
process
itself
a
process
is
a
dynam
entiti
which
captur
the
action
perform
process
specif
on
the
other
hand
is
a
descript
of
process
which
pre-
sumabl
can
be
follow
in
some
project
to
achiev
the
goal
for
which
the
in
a
project
a
process
specif
may
be
use
a
the
process
the
project
plan
to
follow
the
actual
process
is
what
is
actual
done
in
the
project
note
that
the
actual
process
can
be
differ
from
the
plan
process
and
ensur
that
the
specifi
process
is
be
follow
is
a
nontrivi
problem
howev
in
thi
book
we
will
assum
that
the
plan
and
actual
process
are
the
same
and
will
not
distinguish
between
the
two
and
will
use
the
term
process
to
refer
to
both
a
process
model
specifi
a
gener
process
which
is
optimum
for
a
class
of
project
that
is
in
the
situat
for
which
the
model
is
applic
use
the
process
model
a
the
project
’
s
process
will
lead
to
the
goal
of
develop
softwar
with
high
q
&
p
a
process
model
is
essenti
a
compil
of
best
practic
into
a
recip
for
success
in
the
project
in
other
word
a
process
is
a
mean
to
reach
the
goal
of
high
qualiti
low
cost
and
low
cycl
time
and
a
process
model
provid
a
process
structur
that
is
well
suit
for
a
class
of
project
a
process
is
often
specifi
at
a
high
level
a
a
sequenc
of
stage
the
sequenc
of
step
for
a
stage
is
the
process
for
that
stage
and
is
often
refer
to
a
a
subprocess
of
the
process
as
defin
abov
a
process
is
the
sequenc
of
step
execut
to
achiev
a
goal
sinc
mani
differ
goal
may
have
to
be
satisfi
while
develop
soft-
ware
multipl
process
are
need
mani
of
these
do
not
concern
softwar
engin
though
they
do
impact
softwar
develop
these
could
be
con-
sider
nonsoftwar
process
busi
process
social
process
and
train
process
are
all
exampl
of
process
that
come
under
thi
these
process
also
affect
the
softwar
develop
activ
but
are
beyond
the
purview
of
softwar
engin
the
process
that
deal
with
the
technic
and
manag
issu
of
soft-
ware
develop
are
collect
call
the
softwar
process
as
a
softwar
project
will
have
to
engin
a
solut
and
properli
manag
the
project
there
are
clearli
two
major
compon
in
a
softwar
process—a
develop
pro-
ce
and
a
project
manag
process
the
develop
process
specifi
all
the
engin
activ
that
need
to
be
perform
wherea
the
manag
process
specifi
how
to
plan
and
control
these
activ
so
that
cost
sched-
ule
qualiti
and
other
object
are
met
effect
develop
and
project
manag
process
are
the
key
to
achiev
the
object
of
deliv
the
desir
softwar
satisfi
the
user
need
while
ensur
high
product
and
qualiti
dure
the
project
mani
product
are
produc
which
are
typic
com-
pose
of
mani
item
for
exampl
the
final
sourc
code
may
be
compos
of
mani
sourc
file
these
item
keep
evolv
a
the
project
proce
creat
mani
version
on
the
way
as
develop
process
gener
do
not
focu
on
evolut
and
chang
to
handl
them
anoth
process
call
softwar
configu-
ration
control
process
is
often
use
the
object
of
thi
compon
process
is
to
primarili
deal
with
manag
chang
so
that
the
integr
of
the
product
is
not
violat
despit
chang
these
three
constitu
process
focu
on
the
project
and
the
product
and
can
be
consid
a
compris
the
product
engin
process
a
their
main
object
is
to
produc
the
desir
product
if
the
softwar
process
can
be
view
a
a
static
entiti
then
these
three
compon
process
will
suffic
howev
a
softwar
process
itself
is
a
dynam
entiti
a
it
must
chang
to
adapt
to
our
increas
understand
about
softwar
develop
and
avail
of
newer
technolog
and
tool
due
to
thi
a
process
to
manag
the
softwar
process
is
need
the
basic
object
of
the
process
manag
process
is
to
improv
the
softwar
process
by
improv
we
mean
that
the
capabl
of
the
process
to
produc
qualiti
good
at
low
cost
is
improv
for
thi
the
current
softwar
process
is
studi
frequent
by
studi
the
project
that
have
been
done
use
the
process
the
whole
process
of
understand
the
current
process
analyz
it
properti
determin
how
to
improv
and
then
affect
the
improv
is
dealt
with
by
the
process
manag
process
the
relationship
between
these
major
compon
process
is
shown
in
fig-
ure
these
compon
process
are
distinct
not
onli
in
the
type
of
activ
perform
in
them
but
typic
also
in
the
peopl
who
perform
the
activ
specifi
by
the
process
in
a
typic
project
develop
activ
are
per-
form
by
programm
design
tester
etc
the
project
manag
pro-
ce
activ
are
perform
by
the
project
manag
configur
control
process
activ
are
perform
by
a
group
gener
call
the
configur
control
and
the
process
manag
process
activ
are
perform
by
the
softwar
engin
process
group
sepg
in
thi
book
we
will
focu
primarili
on
process
relat
to
product
engin
particularli
the
develop
and
project
manag
process
much
of
the
book
discu
the
differ
phase
of
a
develop
process
and
the
subprocess
or
methodolog
use
for
execut
these
phase
for
the
rest
of
the
book
we
will
use
the
term
softwar
process
to
mean
product
engin
process
unless
specifi
otherwis
for
the
softwar
develop
process
the
goal
is
to
produc
a
high-qual
softwar
product
it
therefor
focu
on
activ
directli
relat
to
product
of
the
softwar
for
exampl
design
code
and
test
as
the
develop
process
specifi
the
major
develop
and
qualiti
control
activ
that
need
to
be
perform
in
the
project
it
form
the
core
of
the
softwar
process
the
manag
process
is
often
decid
base
on
the
develop
process
a
project
’
s
develop
process
defin
the
task
the
project
should
per-
form
and
the
order
in
which
they
should
be
done
a
process
limit
the
degre
of
freedom
for
a
project
by
specifi
what
type
of
activ
must
be
under-
taken
and
in
what
order
such
that
the
shortest
or
the
most
effici
path
is
obtain
from
the
user
need
to
the
softwar
satisfi
these
need
the
process
drive
a
project
and
heavili
influenc
the
outcom
as
discuss
earlier
a
process
model
specifi
a
gener
process
usual
a
a
set
of
stage
in
which
a
project
should
be
divid
the
order
in
which
the
stage
should
be
execut
and
ani
other
constraint
and
condit
on
the
execut
of
stage
the
basic
premis
behind
a
process
model
is
that
in
the
situat
for
which
the
model
is
applic
use
the
process
model
a
the
project
’
s
process
will
lead
to
low
cost
high
qualiti
reduc
cycl
time
or
provid
other
benefit
in
other
word
the
process
model
provid
gener
guidelin
for
develop
a
suitabl
process
for
a
project
due
to
the
import
of
the
develop
process
variou
model
have
been
propos
in
thi
section
we
will
discu
some
of
the
major
model
the
simplest
process
model
is
the
waterfal
model
which
state
that
the
phase
are
organ
in
a
linear
order
the
model
wa
origin
propos
by
royc
74
though
variat
of
the
model
have
evolv
depend
on
the
natur
of
activ
and
the
flow
of
control
between
them
in
thi
model
a
project
be-
gin
with
feasibl
analysi
upon
success
demonstr
the
feasibl
of
a
project
the
requir
analysi
and
project
plan
begin
the
design
start
after
the
requir
analysi
is
complet
and
code
begin
after
the
design
is
complet
onc
the
program
is
complet
the
code
is
integr
and
test
is
done
upon
success
complet
of
test
the
system
is
in-
stall
after
thi
the
regular
oper
and
mainten
of
the
system
take
place
the
model
is
shown
in
figur
the
basic
idea
behind
the
phase
is
separ
of
concerns—each
phase
deal
with
a
distinct
and
separ
set
of
concern
by
do
thi
the
larg
and
complex
task
of
build
the
softwar
is
broken
into
smaller
task
which
by
themselv
are
still
quit
complex
of
specifi
requir
do
design
etc
separ
the
concern
and
focus
on
a
select
few
in
a
phase
give
a
better
handl
to
the
engin
and
manag
in
deal
with
the
complex
of
the
problem
the
requir
analysi
phase
is
mention
a
analysi
and
planning.
plan
is
a
critic
activ
in
softwar
develop
a
good
plan
is
base
on
the
requir
of
the
system
and
should
be
done
befor
later
phase
begin
howev
in
practic
detail
requir
are
not
necessari
for
plan
consequ
plan
usual
overlap
with
the
requir
analysi
and
a
plan
is
readi
befor
the
later
phase
begin
thi
plan
is
an
addit
input
to
all
the
later
phase
linear
order
of
activ
ha
some
import
consequ
first
to
clearli
identifi
the
end
of
a
phase
and
the
begin
of
the
next
some
cer-
tific
mechan
ha
to
be
employ
at
the
end
of
each
phase
thi
is
usual
done
by
some
verif
and
valid
mean
that
will
ensur
that
the
output
of
a
phase
is
consist
with
it
input
which
is
the
output
of
the
previou
phase
and
that
the
output
of
the
phase
is
consist
with
the
overal
requir
of
the
system
the
consequ
of
the
need
for
certif
is
that
each
phase
must
have
some
defin
output
that
can
be
evalu
and
certifi
that
is
when
the
ac-
tiviti
of
a
phase
are
complet
there
should
be
some
product
that
is
produc
by
that
phase
the
output
of
the
earlier
phase
are
often
call
work
product
and
are
usual
in
the
form
of
document
like
the
requir
document
or
design
document
for
the
code
phase
the
output
is
the
code
though
the
set
of
document
that
should
be
produc
in
a
project
is
depend
on
how
the
process
is
implement
the
follow
document
gener
form
a
reason
set
that
should
be
produc
in
each
project
one
of
the
main
advantag
of
the
waterfal
model
is
it
simplic
it
is
concep-
tualli
straightforward
and
divid
the
larg
task
of
build
a
softwar
system
into
a
seri
of
cleanli
divid
phase
each
phase
deal
with
a
separ
logi-
cal
concern
it
is
also
easi
to
administ
in
a
contractu
setup—a
each
phase
is
complet
and
it
work
product
produc
some
amount
of
money
is
given
by
the
custom
to
the
develop
organ
the
waterfal
model
although
wide
use
ha
some
strong
limit
it
assum
that
the
requir
of
a
system
can
be
frozen
i.e.
baselin
befor
the
design
begin
thi
is
possibl
for
system
design
to
autom
an
exist
manual
system
but
for
new
system
determin
the
require-
ment
is
difficult
a
the
user
doe
not
even
know
the
requir
henc
have
unchang
requir
is
unrealist
for
such
project
freez
the
requir
usual
requir
choos
the
hardwar
becaus
it
form
a
part
of
the
requir
specif
a
larg
project
might
take
a
few
year
to
complet
if
the
hardwar
is
select
earli
then
due
to
the
speed
at
which
hardwar
technolog
is
chang
it
is
like
that
the
final
softwar
will
use
a
hardwar
technolog
on
the
verg
of
becom
obsolet
thi
is
clearli
not
desir
for
such
expens
softwar
system
it
follow
the
big
bang
approach—th
entir
softwar
is
deliv
in
one
shot
at
the
end
thi
entail
heavi
risk
a
the
user
doe
not
know
until
the
veri
end
what
they
are
get
furthermor
if
the
project
run
out
of
money
in
the
middl
then
there
will
be
no
softwar
that
is
it
ha
the
all
or
noth
valu
proposit
it
encourag
requir
bloat
sinc
all
requir
must
be
spec-
ifi
at
the
start
and
onli
what
is
specifi
will
be
deliv
it
encourag
the
user
and
other
stakehold
to
add
even
those
featur
which
they
think
might
be
need
which
final
may
not
get
use
it
is
a
document-driven
process
that
requir
formal
document
at
the
end
of
each
phase
despit
these
limit
the
waterfal
model
ha
been
the
most
wide
use
process
model
it
is
well
suit
for
routin
type
of
project
where
the
require-
ment
are
well
understood
that
is
if
the
develop
organ
is
quit
fa-
miliar
with
the
problem
domain
and
the
requir
for
the
softwar
are
quit
clear
the
waterfal
model
work
well
and
may
be
the
most
effici
process
the
goal
of
a
prototyping-bas
develop
process
is
to
counter
the
first
limit
of
the
waterfal
model
the
basic
idea
here
is
that
instead
of
freez
the
requir
befor
ani
design
or
code
can
proceed
a
throwaway
proto-
type
is
built
to
help
understand
the
requir
thi
prototyp
is
develop
base
on
the
current
known
requir
develop
of
the
prototyp
ob-
viousli
undergo
design
code
and
test
but
each
of
these
phase
is
not
done
veri
formal
or
thoroughli
by
use
thi
prototyp
the
client
can
get
an
actual
feel
of
the
system
which
can
enabl
the
client
to
better
understand
the
requir
of
the
desir
system
thi
result
in
more
stabl
requir
that
chang
le
frequent
prototyp
is
an
attract
idea
for
complic
and
larg
system
for
which
there
is
no
manual
process
or
exist
system
to
help
determin
the
requir
in
such
situat
let
the
client
play
with
the
prototyp
provid
invalu
and
intang
input
that
help
determin
the
requir
for
the
system
it
is
also
an
effect
method
of
demonstr
the
feasibl
of
a
certain
approach
thi
might
be
need
for
novel
system
where
it
is
not
clear
that
constraint
can
be
met
or
that
algorithm
can
be
develop
to
implement
the
requir
in
both
situat
the
risk
associ
with
the
project
are
be
reduc
through
the
use
of
prototyp
the
process
model
of
the
prototyp
approach
is
shown
in
figur
a
develop
process
use
throwaway
prototyp
typic
proce
a
follow
40
the
develop
of
the
prototyp
typic
start
when
the
prelim-
inari
version
of
the
requir
specif
document
ha
been
develop
at
thi
stage
there
is
a
reason
understand
of
the
system
and
it
need
and
which
need
are
unclear
or
like
to
chang
after
the
prototyp
ha
been
develop
the
end
user
and
client
are
given
an
opportun
to
use
and
ex-
plore
the
prototyp
base
on
their
experi
they
provid
feedback
to
the
develop
regard
the
prototyp
what
is
correct
what
need
to
be
modifi
what
is
miss
what
is
not
need
etc
base
on
the
feedback
the
prototyp
is
modifi
to
incorpor
some
of
the
suggest
chang
that
can
be
done
easili
and
then
the
user
and
the
client
are
again
allow
to
use
the
system
thi
cycl
repeat
until
in
the
judgment
of
the
prototyp
develop
and
an-
alyst
the
benefit
from
further
chang
the
system
and
obtain
feedback
is
outweigh
by
the
cost
and
time
involv
in
make
the
chang
and
obtain
the
feedback
base
on
the
feedback
the
initi
requir
are
modifi
to
produc
the
final
requir
specif
which
is
then
use
to
develop
the
product
qualiti
system
for
prototyp
for
the
purpos
of
requir
analysi
to
be
feasibl
it
cost
must
be
kept
low
consequ
onli
those
featur
are
includ
in
the
prototyp
that
will
have
a
valuabl
return
from
the
user
experi
excep-
tion
handl
recoveri
and
conform
to
some
standard
and
format
are
typic
not
includ
in
prototyp
in
prototyp
a
the
prototyp
is
to
be
discard
there
is
no
point
in
implement
those
part
of
the
requir
that
are
alreadi
well
understood
henc
the
focu
of
the
develop
is
to
includ
those
featur
that
are
not
properli
understood
and
the
develop
approach
is
quick
and
dirti
with
the
focu
on
quick
develop
rather
than
qualiti
becaus
the
prototyp
is
to
be
thrown
away
onli
minim
documenta-
tion
need
to
be
produc
dure
prototyp
for
exampl
design
document
a
test
plan
and
a
test
case
specif
are
not
need
dure
the
develop
of
the
prototyp
anoth
import
cost-cut
measur
is
to
reduc
test
becaus
test
consum
a
major
part
of
develop
expenditur
dure
reg-
ular
softwar
develop
thi
ha
a
consider
impact
in
reduc
cost
by
use
these
type
of
cost-cut
method
it
is
possibl
to
keep
the
cost
of
the
prototyp
to
le
than
a
few
percent
of
the
total
develop
cost
and
the
return
from
thi
extra
cost
can
be
substanti
first
the
experi
of
develop
the
prototyp
will
reduc
the
cost
of
the
actual
softwar
develop-
ment
second
a
requir
will
be
more
stabl
now
due
to
the
feedback
from
the
prototyp
there
will
be
fewer
chang
in
the
requir
consequ
the
cost
incur
due
to
chang
in
the
requir
will
be
substanti
re-
duce
third
the
qualiti
of
final
softwar
is
like
to
be
far
superior
a
the
experi
engin
have
obtain
while
develop
the
prototyp
will
enabl
them
to
creat
a
better
design
write
better
code
and
do
better
test
and
fi-
nalli
develop
a
prototyp
mitig
mani
risk
that
exist
in
a
project
where
requir
are
not
well
known
overal
prototyp
is
well
suit
for
project
where
requir
are
hard
to
determin
and
the
confid
in
the
state
requir
is
low
in
such
project
where
requir
are
not
properli
understood
in
the
begin
use
the
prototyp
process
model
can
be
the
most
effect
method
for
develop
the
softwar
it
is
also
an
excel
techniqu
for
reduc
some
type
of
risk
associ
with
a
project
the
iter
develop
process
model
counter
the
third
and
fourth
limita-
tion
of
the
waterfal
model
and
tri
to
combin
the
benefit
of
both
proto-
type
and
the
waterfal
model
the
basic
idea
is
that
the
softwar
should
be
develop
in
increment
each
increment
ad
some
function
capabl
to
the
system
until
the
full
system
is
implement
the
iter
enhanc
model
4
is
an
exampl
of
thi
approach
in
the
first
step
of
thi
model
a
simpl
initi
implement
is
done
for
a
subset
of
the
overal
problem
thi
subset
is
one
that
contain
some
of
the
key
aspect
of
the
problem
that
are
easi
to
understand
and
implement
and
which
form
a
use
and
usabl
system
a
project
control
list
is
creat
that
contain
in
order
all
the
task
that
must
be
perform
to
obtain
the
final
implement
thi
project
control
list
give
an
idea
of
how
far
along
the
project
is
at
ani
given
step
from
the
final
system
each
step
consist
of
remov
the
next
task
from
the
list
design
the
implement
for
the
select
task
code
and
test
the
implement
perform
an
analysi
of
the
partial
system
obtain
after
thi
step
and
updat-
ing
the
list
a
a
result
of
the
analysi
these
three
phase
are
call
the
design
phase
implement
phase
and
analysi
phase
the
process
is
iter
until
the
project
control
list
is
empti
at
which
time
the
final
implement
of
the
system
will
be
avail
the
iter
enhanc
model
is
shown
in
figur
the
project
control
list
guid
the
iter
step
and
keep
track
of
all
task
that
must
be
done
base
on
the
analysi
one
of
the
task
in
the
list
can
includ
redesign
of
defect
compon
or
redesign
of
the
entir
system
howev
redesign
of
the
system
will
gener
occur
onli
in
the
initi
step
in
the
later
step
the
design
would
have
stabil
and
there
is
le
chanc
of
redesign
each
entri
in
the
list
is
a
task
that
should
be
perform
in
one
step
of
the
iter
enhanc
process
and
should
be
simpl
enough
to
be
complet
understood
select
task
in
thi
manner
will
minim
the
chanc
of
error
and
reduc
the
redesign
work
the
design
and
implement
phase
of
each
step
can
be
perform
in
a
top-down
manner
or
by
use
some
other
techniqu
though
there
are
clear
benefit
of
iter
develop
particularli
in
allow
chang
requir
not
have
the
all-or-noth
risk
etc.
there
are
some
cost
associ
with
iter
develop
also
for
exampl
a
the
requir
for
futur
iter
are
not
known
the
design
of
a
system
may
not
be
too
robust
also
chang
may
have
to
be
made
to
the
exist
system
to
accommod
requir
of
the
futur
iter
lead
to
extra
rework
and/or
discard
of
work
done
earlier
overal
it
may
not
offer
the
best
technic
solut
but
the
benefit
may
outweigh
the
cost
in
mani
project
anoth
common
approach
for
iter
develop
is
to
do
the
require-
ment
and
the
architectur
design
in
a
standard
waterfal
or
prototyp
ap-
proach
but
deliv
the
softwar
iter
that
is
the
build
of
the
system
which
is
the
most
time
and
effort-consum
task
is
done
iter
though
most
of
the
requir
are
specifi
upfront
we
can
view
thi
approach
a
have
one
iter
deliv
the
requir
and
the
architectur
plan
and
then
further
iter
deliv
the
softwar
in
increment
at
the
start
of
each
deliveri
iter
which
requir
will
be
implement
in
thi
releas
are
decid
and
then
the
design
is
enhanc
and
code
develop
to
implement
the
requir
the
iter
end
with
deliveri
of
a
work
softwar
system
provid
some
valu
to
the
end
user
select
of
requir
for
an
iter
is
done
primarili
base
on
the
valu
the
requir
provid
to
the
end
user
and
how
critic
they
are
for
support
other
requir
thi
approach
is
shown
in
figur
the
advantag
of
thi
approach
is
that
a
the
requir
are
mostli
known
upfront
an
overal
view
of
the
system
is
avail
and
a
proper
archi-
tectur
can
be
design
which
can
remain
rel
stabl
with
thi
hope
rework
in
develop
iter
will
diminish
at
the
same
time
the
valu
to
the
end
custom
is
deliv
iter
so
it
doe
not
have
the
all-or-noth
risk
also
sinc
the
deliveri
is
be
done
increment
and
plan
and
execut
of
each
iter
is
done
separ
feedback
from
an
iter
can
be
incorpor
in
the
next
iter
even
new
requir
that
may
get
un-
cover
can
also
be
incorpor
henc
thi
model
of
iter
develop
also
provid
some
of
the
benefit
of
the
model
discuss
abov
the
iter
approach
is
becom
extrem
popular
despit
some
diffi-
culti
in
use
it
in
thi
context
there
are
a
few
key
reason
for
it
increas
popular
first
and
foremost
in
today
’
s
world
client
do
not
want
to
invest
too
much
without
see
return
in
the
current
busi
scenario
it
is
prefer
to
see
return
continu
of
the
invest
made
the
iter
model
per-
mit
this—aft
each
iter
some
work
softwar
is
deliv
and
the
risk
to
the
client
is
therefor
limit
second
a
busi
are
chang
rapidli
today
they
never
realli
know
the
complet
requir
for
the
softwar
and
there
is
a
need
to
constantli
add
new
capabl
to
the
softwar
to
adapt
the
busi
to
chang
situat
iter
process
allow
thi
third
each
iter
provid
a
work
system
for
feedback
which
help
in
develop
stabl
requir
for
the
next
iter
below
we
will
describ
some
other
process
model
all
of
them
use
some
iter
approach
ration
unifi
process
rup
51
63
is
anoth
iter
process
model
that
wa
design
by
ration
now
part
of
ibm
though
it
is
a
gener
pro-
ce
model
it
wa
design
for
object-ori
develop
use
the
unifi
model
languag
uml
we
will
discu
these
topic
in
a
later
chapter
rup
propos
that
develop
of
softwar
be
divid
into
cycl
each
cycl
deliv
a
fulli
work
system
gener
each
cycl
is
execut
a
a
separ
project
whose
goal
is
to
deliv
some
addit
capabl
to
an
exist-
ing
system
built
by
the
previou
cycl
henc
for
a
project
the
process
for
a
cycl
form
the
overal
process
each
cycl
itself
is
broken
into
four
consecut
phase
each
phase
ha
a
distinct
purpos
and
complet
of
each
phase
is
a
well-
defin
mileston
in
the
project
with
some
clearli
defin
output
the
purpos
of
the
incept
phase
is
to
establish
the
goal
and
scope
of
the
project
and
complet
of
thi
phase
is
the
lifecycl
object
mileston
thi
mileston
should
specifi
the
vision
and
high-level
capabl
of
the
eventu
system
what
busi
benefit
it
is
expect
to
provid
some
key
illustr
use
case
of
the
system
key
risk
of
the
project
and
a
basic
plan
of
the
project
regard
the
cost
and
schedul
base
on
the
output
of
thi
phase
a
go/no-go
decis
may
be
taken
and
if
the
project
is
to
proceed
then
thi
mileston
repres
that
there
is
a
share
vision
among
the
stakehold
and
they
agre
to
the
project
it
vision
benefit
cost
usag
etc
in
the
elabor
phase
the
architectur
of
the
system
is
design
base
on
the
detail
requir
analysi
the
complet
of
thi
phase
is
the
life-
cycl
architectur
mileston
at
the
end
of
thi
phase
it
is
expect
that
most
of
the
requir
have
been
identifi
and
specifi
and
the
architectur
of
the
system
ha
been
design
and
specifi
in
a
manner
that
it
address
the
technic
risk
identifi
in
the
earlier
phase
in
addit
a
high-level
project
plan
for
the
project
ha
been
prepar
show
the
remain
phase
and
iter-
ation
in
those
and
the
current
percept
of
risk
by
the
end
of
thi
phase
the
critic
engin
decis
regard
the
choic
of
technolog
architec-
ture
etc
have
been
taken
and
a
detail
understand
of
the
project
exist
output
of
thi
mileston
allow
technic
evalu
of
the
propos
solut
a
well
a
a
better
inform
decis
about
cost-benefit
analysi
of
the
project
in
the
construct
phase
the
softwar
is
built
and
test
thi
phase
result
in
the
softwar
product
to
be
deliv
along
with
associ
user
and
other
manual
and
success
complet
thi
phase
result
in
the
initi
oper
capabl
mileston
be
achiev
the
purpos
of
the
transit
phase
is
to
move
the
softwar
from
the
devel-
opment
environ
to
the
client
’
s
environ
where
it
is
to
be
host
thi
is
a
complex
task
which
can
requir
addit
test
convers
of
old
data
for
thi
softwar
to
work
train
of
personnel
etc
the
success
execut
of
thi
phase
result
in
achiev
the
mileston
product
releas
the
differ
phase
and
mileston
in
rup
are
shown
in
figur
though
these
phase
are
consecut
each
phase
itself
may
have
multipl
iter
with
each
iter
deliv
to
an
intern
or
extern
custom
some
well-defin
output
which
is
often
a
part
of
the
final
deliver
of
that
phase
’
s
mileston
gener
it
is
expect
that
the
construct
phase
will
be
broken
into
multipl
iter
each
iter
produc
a
work
system
which
can
be
use
for
feedback
evalu
beta-test
etc
though
itera-
tion
in
construct
are
done
often
and
it
is
clear
what
an
iter
in
thi
phase
deliv
iter
may
be
done
meaning
in
other
phase
a
well
for
exampl
in
the
elabor
phase
the
first
iter
may
just
specifi
the
overal
architectur
and
high-level
requir
while
the
second
iter
may
be
done
to
thrash
out
the
detail
as
anoth
exampl
there
may
be
multipl
iter
to
transit
the
develop
softwar
with
each
iter
make
live
some
part
or
some
featur
of
the
develop
softwar
rup
ha
care
chosen
the
phase
name
so
a
not
to
confus
them
with
the
engin
task
that
are
to
be
done
in
the
project
a
in
rup
the
en-
gineer
task
and
phase
are
separ
differ
engin
activ
may
be
perform
in
a
phase
to
achiev
it
mileston
rup
group
the
activ
into
differ
subprocess
which
it
call
core
process
workflow
these
sub-
process
correspond
to
the
task
of
perform
requir
analysi
do
design
implement
the
design
test
project
manag
etc
some
of
the
subprocess
are
shown
in
tabl
one
key
differ
of
rup
from
other
model
is
that
it
ha
separ
the
phase
from
the
task
and
allow
multipl
of
these
subprocess
to
function
within
a
phase
in
waterfal
or
waterfall-bas
iter
model
a
phase
within
a
process
wa
link
to
a
particular
task
perform
by
some
process
like
re-
quirement
design
etc
in
rup
these
task
are
separ
from
the
stage
and
it
allow
for
exampl
dure
construct
execut
of
the
requir
process
that
is
it
allow
some
part
of
the
requir
activ
be
done
even
in
construct
someth
the
waterfal
did
not
allow
so
a
project
if
it
so
wish
may
do
detail
requir
onli
for
some
featur
dure
the
elabora-
tion
phase
and
may
do
detail
of
other
requir
while
the
construct
is
go
on
mayb
the
first
iter
of
it
thi
not
onli
allow
a
project
a
greater
degre
of
flexibl
in
plan
when
the
differ
task
should
be
done
it
also
captur
the
realiti
of
the
situation—it
is
often
not
possibl
to
specifi
all
requir
at
the
start
and
it
is
best
to
start
the
project
with
some
requir
and
work
out
the
detail
later
though
a
subprocess
may
be
activ
in
mani
phase
a
can
be
expect
the
volum
of
work
or
the
effort
be
spent
on
the
subprocess
will
vari
with
phase
for
exampl
it
is
expect
that
a
lot
more
effort
will
be
spent
in
the
requir
subprocess
dure
elabor
and
le
will
be
spent
in
construc-
tion
and
still
le
if
ani
will
be
spent
in
transit
similarli
the
model
ha
the
develop
process
activ
in
elabor
which
allow
a
project
to
build
a
prototyp
dure
the
elabor
phase
to
help
it
requir
activ
if
need
howev
most
of
the
implement
doe
happen
in
the
construct
phase
the
effort
spent
in
a
subprocess
in
differ
phase
will
of
cours
de-
pend
on
the
project
howev
a
gener
pattern
is
indic
in
tabl
by
specifi
if
the
level
of
effort
for
the
phase
is
high
medium
low
etc
overal
rup
provid
a
flexibl
process
model
which
follow
an
iter
approach
not
onli
at
a
top
level
through
cycl
but
also
encourag
iter
approach
dure
each
of
the
phase
in
a
cycl
and
in
phase
it
allow
the
differ
task
to
be
done
a
per
the
need
of
the
project
to
speed
up
develop
parallel
between
the
differ
iter
can
be
employ
that
is
a
new
iter
commenc
befor
the
system
produc
by
the
current
iter
is
releas
and
henc
develop
of
a
new
releas
happen
in
parallel
with
the
develop
of
the
current
releas
by
start
an
iter
befor
the
previou
iter
ha
complet
it
is
possibl
to
reduc
the
averag
deliveri
time
for
iter
howev
to
support
parallel
execut
each
iter
ha
to
be
structur
properli
and
team
have
to
be
organ
suitabl
the
timebox
model
propos
an
approach
for
these
60
59
in
the
timebox
model
the
basic
unit
of
develop
is
a
time
box
which
is
of
fix
durat
sinc
the
durat
is
fix
a
key
factor
in
select
the
requir
or
featur
to
be
built
in
a
time
box
is
what
can
be
fit
into
the
time
box
thi
is
in
contrast
to
regular
iter
approach
where
the
function
is
select
and
then
the
time
to
deliv
is
determin
timebox
chang
the
perspect
of
develop
and
make
the
schedul
a
nonnegoti
and
a
high-prior
commit
each
time
box
is
divid
into
a
sequenc
of
stage
like
in
the
waterfal
model
each
stage
perform
some
clearli
defin
task
for
the
iter
and
produc
a
clearli
defin
output
the
model
also
requir
that
the
durat
of
each
stage
that
is
the
time
it
take
to
complet
the
task
of
that
stage
is
approxim
the
same
furthermor
the
model
requir
that
there
be
a
dedic
team
for
each
stage
that
is
the
team
for
a
stage
perform
onli
task
of
that
stage—task
for
other
stage
are
perform
by
their
respect
team
thi
is
quit
differ
from
other
iter
model
where
the
implicit
assumpt
is
that
the
same
team
perform
all
the
differ
task
of
the
project
or
the
iter
have
time-box
iter
with
stage
of
equal
durat
and
have
ded-
icat
team
render
itself
to
pipelin
of
differ
iter
pipelin
is
a
concept
from
hardwar
in
which
differ
instruct
are
execut
in
paral-
lel
with
the
execut
of
a
new
instruct
start
onc
the
first
stage
of
the
previou
instruct
is
finish
to
illustr
the
use
of
thi
model
consid
a
time
box
consist
of
three
stage
requir
specif
build
and
deploy
the
require-
ment
stage
is
execut
by
it
team
of
analyst
and
end
with
a
priorit
list
of
requir
to
be
built
in
thi
iter
along
with
a
high-level
design
the
build
team
develop
the
code
for
implement
the
requir
and
perform
the
test
the
test
code
is
then
hand
over
to
the
deploy
team
which
perform
predeploy
test
and
then
instal
the
system
for
product
use
these
three
stage
are
such
that
they
can
be
done
in
approxim
equal
time
in
an
iter
with
a
time
box
of
three
stage
the
project
proce
a
follow
when
the
requir
team
ha
finish
requir
for
timebox-1
the
requir
are
given
to
the
build
team
for
build
the
softwar
the
requir
team
then
go
on
and
start
prepar
the
requir
for
timebox-2
when
the
build
for
timebox-
the
code
is
hand
over
to
the
deploy
team
and
the
build
team
move
on
to
build
code
for
requir
for
timebox-
2
and
the
requir
team
move
on
to
do
requir
for
timebox-3
thi
pipelin
execut
of
the
timebox
process
is
shown
in
figur
59
with
a
three-stag
time
box
at
most
three
iter
can
be
concurr
in
progress
if
the
time
box
is
of
size
t
day
then
the
first
softwar
deliveri
will
occur
after
t
day
the
subsequ
deliveri
howev
will
take
place
after
everi
t/
for
exampl
if
the
time
box
durat
t
is
and
each
stage
durat
is
the
first
deliveri
is
made
the
second
deliveri
is
made
after
1
the
third
after
1
and
so
on
contrast
thi
with
a
linear
execut
of
iter
in
which
the
first
deliveri
will
be
made
after
the
second
after
1
the
third
after
2
and
so
on
there
are
three
team
work
on
the
project—th
requir
team
the
build
team
and
the
deploy
team
the
teamwis
activ
for
the
3-stage
pipelin
discuss
abov
is
shown
in
figur
59
it
should
be
clear
that
the
durat
of
each
iter
ha
not
been
reduc
the
total
work
done
in
a
time
box
and
the
effort
spent
in
it
also
remain
the
same—th
same
amount
of
softwar
is
deliv
at
the
end
of
each
iter
a
the
time
box
undergo
the
same
stage
if
the
effort
and
time
spent
in
each
iter
also
remain
the
same
then
what
is
the
cost
of
reduc
the
deliveri
time
the
real
cost
of
thi
reduc
time
is
in
the
resourc
use
in
thi
model
with
timebox
there
are
dedic
team
for
differ
stage
and
the
total
team
size
for
the
project
is
the
sum
of
team
of
differ
stage
thi
is
the
main
differ
from
the
situat
where
there
is
a
singl
team
which
perform
all
the
stage
and
the
entir
team
work
on
the
same
iter
henc
the
timebox
provid
an
approach
for
util
addit
man-
power
to
reduc
the
deliveri
time
it
is
well
known
that
with
standard
method
of
execut
project
we
can
not
compress
the
cycl
time
of
a
project
substan-
tialli
by
ad
more
manpow
howev
through
the
timebox
model
we
can
use
more
manpow
in
a
manner
such
that
by
parallel
execut
of
differ
stage
we
are
abl
to
deliv
softwar
quicker
in
other
word
it
provid
a
way
of
shorten
deliveri
time
through
the
use
of
addit
manpow
timebox
is
well
suit
for
project
that
requir
a
larg
number
of
fea-
ture
to
be
develop
in
a
short
time
around
a
stabl
architectur
use
stabl
technolog
these
featur
should
be
such
that
there
is
some
flexibl
in
group
them
for
build
a
meaning
system
in
an
iter
that
provid
valu
to
the
user
the
main
cost
of
thi
model
is
the
increas
complex
of
project
manag
and
manag
the
product
be
develop
a
multipl
develop
are
concurr
activ
also
the
impact
of
unusu
situat
in
an
iter
can
be
quit
disrupt
further
detail
about
the
model
a
well
a
a
detail
exampl
of
appli
the
model
on
a
real
commerci
project
are
given
in
60
59
agil
develop
approach
evolv
in
the
1990
a
a
reaction
to
documen-
tation
and
bureaucracy-bas
process
particularli
the
waterfal
approach
agil
approach
are
base
on
some
common
principl
some
of
which
are
x
work
softwar
is
the
key
measur
of
progress
in
a
project
for
progress
in
a
project
therefor
softwar
should
be
develop
and
deliv-
ere
rapidli
in
small
increment
even
late
chang
in
the
requir
should
be
entertain
small-incr
model
of
develop
help
in
accommod
them
face-to-fac
commun
is
prefer
over
document
continu
feedback
and
involv
of
custom
is
necessari
for
develop
good-qual
softwar
simpl
design
which
evolv
and
improv
with
time
is
a
better
approach
than
do
an
elabor
design
up
front
for
handl
all
possibl
scenario
the
deliveri
date
are
decid
by
empow
team
of
talent
individu
and
are
not
dictat
mani
detail
agil
methodolog
have
been
propos
some
of
which
are
wide
use
now
extrem
program
xp
is
one
of
the
most
popular
and
well-known
approach
in
the
famili
of
agil
method
like
all
agil
approach
it
belief
that
chang
are
inevit
and
rather
than
treat
chang
a
un-
desir
develop
should
embrac
chang
and
to
accommod
chang
the
develop
process
ha
to
be
lightweight
and
quick
to
respond
for
thi
it
develop
softwar
iter
and
avoid
relianc
on
detail
and
multipl
document
which
are
hard
to
maintain
instead
it
reli
on
face-to-fac
com-
munic
simplic
and
feedback
to
ensur
that
the
desir
chang
are
quickli
and
correctli
reflect
in
the
program
here
we
briefli
discu
the
develop
process
of
xp
a
a
repres
of
an
agil
process
an
extrem
program
project
start
with
user
stori
which
are
short
a
few
sentenc
descript
of
what
scenario
the
custom
and
user
would
like
the
system
to
support
they
are
differ
from
tradit
requir
specif
primarili
in
details—us
stori
do
not
contain
detail
require-
ment
which
are
to
be
uncov
onli
when
the
stori
is
to
be
implement
therefor
allow
the
detail
to
be
decid
a
late
a
possibl
each
stori
is
written
on
a
separ
card
so
they
can
be
flexibl
group
the
empow
develop
team
estim
how
long
it
will
take
to
imple-
ment
a
user
stori
the
estim
are
rough
gener
state
in
week
use
these
estim
and
the
stori
releas
plan
is
done
which
defin
which
stori
are
to
be
built
in
which
system
releas
and
the
date
of
these
releas
frequent
and
small
releas
are
encourag
and
for
a
releas
iter
are
employ
accept
test
are
also
built
from
the
stori
which
are
use
to
test
the
softwar
befor
the
releas
bug
found
dure
the
accept
test
for
an
iter
can
form
work
item
for
the
next
iter
thi
overal
process
is
shown
in
figur
develop
is
done
in
iter
each
iter
last
no
more
than
a
few
week
an
iter
start
with
iter
plan
in
which
the
stori
to
be
implement
in
thi
iter
are
selected—high-valu
and
high-risk
stori
are
consid
a
higher
prioriti
and
implement
in
earli
iter
fail
accept
test
in
previou
iter
also
have
to
be
handl
detail
of
the
stori
are
obtain
in
the
iter
for
do
the
develop
the
develop
approach
use
in
an
iter
ha
some
uniqu
practic
first
it
envisag
that
develop
is
done
by
pair
of
programm
call
pair
program
and
which
we
will
discu
further
in
chapter
7
instead
of
individu
programm
second
it
suggest
that
for
build
a
code
unit
autom
unit
test
be
written
first
befor
the
actual
code
is
written
and
then
the
code
should
be
written
to
pa
the
test
thi
approach
is
refer
to
a
test-driven
develop
in
contrast
to
regular
code-first
develop
in
which
programm
first
write
code
and
then
think
of
how
to
test
it
we
will
discu
test-driven
develop
further
in
chapter
7
as
function
of
the
unit
increas
the
unit
test
are
enhanc
first
and
then
the
code
is
enhanc
to
pa
the
new
set
of
unit
test
third
a
it
encourag
simpl
solut
a
well
a
chang
it
is
expect
that
the
design
of
the
solut
devis
earlier
may
at
some
point
becom
unsuit
for
further
develop
to
handl
thi
situat
it
suggest
that
refactor
be
done
to
improv
the
design
and
then
use
the
refactor
code
for
further
develop
dure
refactor
no
new
function
is
ad
onli
the
design
of
the
exist
program
is
improv
refactor
will
be
discuss
further
in
chapter
7
fourth
it
encourag
frequent
integr
of
differ
unit
to
avoid
too
mani
chang
in
the
base
code
happen
togeth
onli
one
pair
at
a
time
can
releas
their
chang
and
integr
into
the
common
code
base
the
process
within
an
iter
is
shown
thi
is
a
veri
simplifi
descript
of
xp
there
are
mani
other
rule
in
xp
relat
to
issu
like
right
of
programm
and
custom
communi-
cation
between
the
team
member
and
use
of
metaphor
trust
and
visibl
to
all
stakehold
collect
ownership
of
code
in
which
ani
pair
can
chang
ani
code
team
manag
build
quick
spike
solut
to
resolv
diffi-
cult
technic
and
architectur
issu
or
to
explor
some
approach
how
bug
are
to
be
handl
how
what
can
be
done
within
an
iter
is
to
be
esti-
mate
from
the
progress
made
in
the
previou
iter
how
meet
are
to
be
conduct
how
a
day
in
the
develop
should
start
etc
the
websit
is
a
good
sourc
on
these
a
well
a
other
as-
pect
of
xp
xp
and
other
agil
method
are
suitabl
for
situat
where
the
volum
and
pace
of
requir
chang
is
high
and
where
requir
risk
are
con-
sider
becaus
of
it
relianc
on
strong
commun
between
all
the
team
member
it
is
effect
when
team
are
colloc
and
of
modest
size
of
up
to
about
20
member
and
a
it
envisag
strong
involv
of
the
custom
in
the
develop
a
well
a
in
plan
the
deliveri
date
it
work
well
when
the
custom
is
will
to
be
heavili
involv
dure
the
entir
develop
work
a
a
team
member
we
have
seen
mani
differ
develop
process
model
what
is
the
need
for
the
differ
model
as
mention
earlier
while
develop
industri
strength
softwar
the
purpos
is
not
onli
to
develop
softwar
to
satisfi
the
need
of
some
user
or
client
but
we
want
that
the
project
be
done
in
low
cost
and
cycl
time
and
deliv
high-qual
softwar
in
addit
there
could
be
other
constraint
in
a
project
that
the
project
may
need
to
satisfi
henc
given
the
constraint
of
the
project
we
would
like
to
employ
the
process
model
that
is
like
to
maxim
the
chanc
of
deliv
the
softwar
and
achiev
the
highest
q
&
p
henc
select
a
suitabl
develop
process
model
for
a
project
is
a
key
decis
that
a
project
manag
ha
to
take
let
u
illustr
thi
by
a
few
exampl
suppos
a
small
team
of
develop
ha
been
entrust
with
the
task
of
build
a
small
auction
site
for
a
local
univers
the
univers
administr
is
will
to
spend
some
time
at
the
start
to
help
develop
the
requir
but
it
is
expect
that
their
avail
will
be
limit
later
the
team
ha
been
given
and
an
extens
of
the
deadlin
seem
veri
improb
it
also
seem
that
the
auction
site
will
have
some
featur
that
are
essenti
but
will
also
have
some
featur
that
are
desir
but
without
which
the
system
can
function
reason
well
with
these
constraint
it
is
clear
that
a
waterfal
model
is
not
suitabl
for
thi
project
a
the
all
or
noth
risk
that
it
entail
is
unaccept
due
to
the
inflex
deadlin
the
iter
enhanc
model
where
each
iter
doe
a
complet
waterfal
is
also
not
right
a
it
requir
requir
analysi
for
each
iter
and
the
user
and
client
are
not
avail
later
howev
the
iter
deliveri
approach
in
which
the
complet
requir
are
done
in
the
first
iter
but
deliveri
is
done
in
iter
seem
well
suit
with
deliveri
be
done
in
two
or
three
iter
a
time
is
short
from
the
requir
the
project
team
can
decid
what
function
is
essenti
to
have
in
a
work
system
and
includ
it
in
the
first
iter
the
other
desir
featur
can
be
plan
for
the
second
iter
with
thi
approach
the
chanc
of
complet
the
first
iter
befor
the
final
deadlin
increas
that
is
with
thi
model
the
chanc
of
deliv
a
work
system
increas
rup
a
it
allow
iter
in
each
phase
is
also
a
suitabl
model
consid
anoth
exampl
where
the
custom
are
in
a
highli
competit
environ
where
requir
depend
on
what
the
competit
is
do
and
deliv
function
regularli
is
highli
desir
furthermor
to
reduc
cost
the
custom
want
to
outsourc
a
much
project
work
a
possibl
to
anoth
team
in
anoth
countri
for
thi
project
clearli
waterfal
is
not
suitabl
a
requir
are
not
even
known
at
the
start
iter
enhanc
also
may
not
work
a
it
may
not
be
abl
to
deliv
rapidli
xp
will
be
hard
to
appli
a
it
requir
that
the
entir
team
includ
the
custom
be
colloc
for
thi
project
the
timebox
model
seem
to
fit
the
best
the
whole
project
can
employ
three
teams—on
of
analyst
who
will
work
with
the
custom
to
determin
the
requir
one
to
do
the
develop
which
could
be
in
some
low-cost
destin
and
the
third
to
do
the
deploy
which
will
be
where
the
site
is
host
by
suitabl
staf
the
team
the
durat
of
each
of
the
three
phases—analysi
and
design
build
and
deployment—can
be
made
approxim
equal
then
consid
anoth
project
where
a
univers
want
to
autom
the
reg-
istrat
process
it
alreadi
ha
a
databas
of
cours
and
pre-requisit
and
a
databas
of
student
record
in
thi
project
a
the
requir
are
well
understood
sinc
registr
have
been
happen
manual
the
waterfal
model
seem
to
be
the
optimum
while
the
select
of
the
develop
process
decid
the
phase
and
task
to
be
done
it
doe
not
specifi
thing
like
how
long
each
phase
should
last
or
how
mani
resourc
should
be
assign
to
a
phase
or
how
a
phase
should
be
monitor
and
qualiti
and
product
in
the
project
will
also
depend
critic
on
these
decis
to
meet
the
cost
qualiti
and
schedul
object
resourc
have
to
be
properli
alloc
to
each
activ
for
the
project
and
progress
of
differ
activ
ha
to
be
monitor
and
correct
action
taken
when
need
all
these
activ
are
part
of
the
project
manag
process
henc
a
project
manag
process
is
necessari
to
ensur
that
the
engineer-
ing
process
end
up
meet
the
real-world
object
of
cost
schedul
and
qualiti
the
project
manag
process
specifi
all
activ
that
need
to
be
done
by
the
project
manag
to
ensur
that
cost
and
qualiti
object
are
met
it
basic
task
is
to
ensur
that
onc
a
develop
process
is
chosen
it
is
implement
optim
that
is
the
basic
task
is
to
plan
the
detail
implement
of
the
process
for
the
particular
project
and
then
ensur
that
the
plan
is
properli
execut
for
a
larg
project
a
proper
manag
process
is
essenti
for
success
the
activ
in
the
manag
process
for
a
project
can
be
group
broadli
into
three
phase
plan
monitor
and
control
and
termin
analysi
project
manag
begin
with
plan
which
is
perhap
the
most
critic
project
manag
activ
the
goal
of
thi
phase
is
to
develop
a
plan
for
softwar
develop
follow
which
the
object
of
the
project
can
be
met
success
and
effici
a
softwar
plan
is
usual
produc
befor
the
develop
activ
begin
and
is
updat
a
develop
proce
and
data
about
progress
of
the
project
becom
avail
dure
plan
the
major
activ
are
cost
estim
schedul
and
mileston
determin
project
staf
qualiti
control
plan
and
control
and
monitor
plan
project
plan
is
undoubtedli
the
singl
most
import
manag
activ
and
it
form
the
basi
for
monitor
and
control
we
will
devot
one
full
chapter
project
monitor
and
control
phase
of
the
manag
process
is
the
longest
in
term
of
durat
it
encompass
most
of
the
develop
process
it
includ
all
activ
the
project
manag
ha
to
perform
while
the
develop
is
go
on
to
ensur
that
project
object
are
met
and
the
develop
proce
accord
to
the
develop
plan
and
updat
the
plan
if
need
as
cost
schedul
and
qualiti
are
the
major
drive
forc
most
of
the
activ
of
thi
phase
revolv
around
monitor
factor
that
affect
these
monitor
potenti
risk
for
the
project
which
might
prevent
the
project
from
meet
it
object
is
anoth
import
activ
dure
thi
phase
and
if
the
inform
obtain
by
monitor
suggest
that
object
may
not
be
met
necessari
action
are
taken
in
thi
phase
by
exert
suitabl
control
on
the
develop
activ
monitor
a
develop
process
requir
proper
inform
about
the
project
such
inform
is
typic
obtain
by
the
manag
process
from
the
develop
process
consequ
the
implement
of
a
develop
process
model
should
ensur
that
each
step
in
the
develop
process
produc
inform
that
the
manag
process
need
for
that
step
that
is
the
develop
process
provid
the
inform
the
manag
process
need
howev
interpret
of
the
inform
is
part
of
monitor
and
control
wherea
monitor
and
control
last
the
entir
durat
of
the
project
the
last
phase
of
the
manag
process—termin
analysis—i
perform
when
the
develop
process
is
over
the
basic
reason
for
perform
termi-
nation
analysi
is
to
provid
inform
about
the
develop
process
and
learn
from
the
project
in
order
to
improv
the
process
thi
phase
is
also
of-
ten
call
postmortem
analysi
in
iter
develop
thi
analysi
can
be
done
after
each
iter
to
provid
feedback
to
improv
the
execut
of
fur-
ther
iter
we
will
not
discu
it
further
in
the
book
for
an
exampl
of
a
postmortem
report
the
reader
is
refer
to
57
the
tempor
relationship
between
the
manag
process
and
the
devel-
opment
process
is
shown
in
figur
thi
is
an
ideal
relationship
show-
ing
that
plan
is
done
befor
develop
begin
and
termin
analysi
is
done
after
develop
is
over
as
the
figur
show
dure
the
develop
from
the
variou
phase
of
the
develop
process
quantit
inform
flow
to
the
monitor
and
control
phase
of
the
manag
process
which
us
the
inform
to
exert
control
on
the
develop
process
we
will
in
a
later
chapter
discu
in
detail
the
project
plan
phase
as
a
plan
also
includ
plan
for
monitor
we
will
not
discu
the
monitor
separ
but
discu
it
a
part
of
the
plan
activ
figur
2.12
tempor
relationship
between
develop
and
manag
pro-
ce
the
qualiti
and
product
achiev
in
a
softwar
project
depend
on
the
process
use
for
execut
the
project
due
to
thi
process
form
the
heart
of
softwar
engin
a
process
is
the
set
of
activ
that
are
perform
in
some
order
so
that
the
desir
result
will
be
achiev
a
process
model
is
a
gener
process
specif
which
ha
been
found
to
be
best
suit
for
some
situat
a
softwar
process
consist
of
mani
differ
compon
process
most
im-
portant
be
the
develop
process
and
the
project
manag
process
develop
process
focu
on
how
the
softwar
is
to
be
engin
there
are
mani
differ
process
model
each
be
well
suit
for
some
type
of
problem
the
waterfal
model
is
conceptu
the
simplest
model
of
softwar
de-
velop
where
the
requir
design
code
and
test
phase
are
perform
in
linear
progress
it
ha
been
veri
wide
use
and
is
suit-
abl
for
well-understood
problem
in
the
prototyp
model
a
prototyp
is
built
befor
build
the
final
system
which
is
use
to
further
develop
the
requir
lead
to
more
stabl
requir
thi
is
use
for
project
where
requir
are
not
clear
in
the
iter
develop
model
softwar
is
develop
in
iter
each
iter
result
in
a
work
softwar
system
thi
model
doe
not
requir
all
requir
to
be
known
at
the
start
allow
feedback
from
earlier
iter
for
next
one
and
reduc
risk
a
it
deliv
valu
a
the
project
proce
in
rup
a
project
is
execut
in
a
sequenc
of
four
phases—incept
elab-
orat
construct
and
transit
each
end
in
a
defin
mileston
a
phase
may
itself
be
done
iter
the
subprocess
of
requir
de-
sign
code
test
etc
are
consid
a
activ
throughout
the
project
though
their
intens
vari
from
phase
to
phase
rup
is
a
flexibl
frame-
work
which
can
allow
a
project
to
follow
a
tradit
waterfal
if
it
want
to
or
allow
prototyp
if
it
so
wish
in
the
timebox
model
the
differ
iter
are
of
equal
time
durat
and
are
divid
into
equal
length
stage
there
is
a
commit
team
for
each
stage
of
an
iter
the
differ
iter
are
then
execut
in
a
pipelin
manner
with
each
dedic
team
work
on
it
stage
but
for
differ
iter
as
multipl
iter
are
concurr
activ
thi
model
reduc
the
averag
complet
time
of
each
iter
and
henc
is
use
in
situat
where
short
cycl
time
is
highli
desir
agil
approach
to
develop
are
base
on
some
key
principl
like
develop
softwar
in
small
iter
work
system
a
the
measur
of
progress
and
allow
chang
at
ani
time
in
extrem
program
xp
approach
a
project
start
with
short
user
stori
detail
of
which
are
obtain
in
the
iter
in
which
they
are
implement
in
an
iter
develop
is
done
by
programmer-pair
follow
the
practic
of
test-
driven
develop
frequent
integr
and
have
simpl
design
which
are
refactor
when
need
the
project
manag
process
focu
on
plan
and
control
the
de-
velop
process
and
consist
of
three
major
phases—plan
monitor
and
control
and
termin
analysi
much
of
project
manag
revolv
around
the
project
plan
which
is
produc
dure
the
plan
phase
what
is
the
relationship
between
a
process
model
process
specif
and
process
for
a
project
what
are
the
key
output
dure
an
iter
in
a
project
follow
an
iter
develop
model
which
of
the
develop
process
model
discuss
in
thi
chapter
would
you
employ
for
the
follow
project
a
data
entri
system
for
offic
staff
who
have
never
use
comput
befor
the
user
interfac
and
user-friendli
are
extrem
import
a
spreadsheet
system
that
ha
some
basic
featur
and
mani
other
desir
featur
that
use
these
basic
featur
a
web-bas
system
for
a
new
busi
where
requir
are
chang
fast
and
where
an
in-hous
develop
team
is
avail
for
all
aspect
of
the
project
a
web-sit
for
an
on-lin
store
which
ha
a
long
list
of
desir
featur
it
want
to
add
and
it
want
a
new
releas
with
new
featur
to
be
done
veri
frequent
a
project
us
the
timebox
process
model
with
three
stage
in
each
time
box
a
discuss
in
the
chapter
but
with
unequ
length
suppos
the
requir
specif
stage
take
the
build
stage
take
and
deploy
take
design
the
process
for
thi
project
that
maxim
resourc
util
assum
that
each
resourc
can
do
ani
task
hint
exploit
the
fact
that
the
sum
of
durat
of
the
first
and
the
third
stage
is
equal
to
the
durat
of
the
second
stage
what
effect
is
the
project
monitor
activ
like
to
have
on
the
develop
process
ieee
defin
a
requir
a
1
a
condit
of
capabl
need
by
a
user
to
solv
a
problem
or
achiev
an
object
2
a
condit
or
a
capabl
that
must
be
met
or
possess
by
a
system
...
to
satisfi
a
contract
standard
specif
or
other
formal
impos
document
53
note
that
in
softwar
requir
we
are
deal
with
the
requir
of
the
propos
system
that
is
the
capabl
that
the
system
which
is
yet
to
be
develop
should
have
as
we
have
seen
all
develop
model
requir
requir
to
be
speci-
fie
approach
like
agil
requir
onli
high-level
requir
to
be
specifi
in
written
form—detail
requir
are
elicit
through
interact
with
the
custom
in
the
iter
the
requir
is
to
be
implement
and
di-
rectli
reflect
in
softwar
other
approach
prefer
that
the
requir
are
specifi
precis
in
such
situat
the
goal
of
the
requir
activ
is
to
produc
the
softwar
requir
specif
sr
that
describ
what
the
propos
softwar
should
do
without
describ
how
the
softwar
will
do
the
role
of
the
sr
in
a
project
and
the
valu
a
good
sr
bring
to
it
the
differ
activ
in
the
process
for
produc
the
desir
sr
the
desir
characterist
of
an
sr
the
structur
of
an
sr
document
and
it
key
compon
p.
jalot
a
concis
introduct
to
softwar
engin
the
use
case
approach
for
analyz
and
specifi
function
requir
and
how
use
case
can
be
develop
some
other
approach
for
analyz
requir
like
the
data
flow
diagram
the
origin
of
most
softwar
system
is
in
the
need
of
some
client
the
softwar
system
itself
is
creat
by
some
develop
final
the
complet
system
will
be
use
by
the
end
user
thu
there
are
three
major
parti
interest
in
a
new
system
the
client
the
develop
and
the
user
somehow
the
requir
for
the
system
that
will
satisfi
the
need
of
the
client
and
the
concern
of
the
user
have
to
be
commun
to
the
develop
the
problem
is
that
the
client
usual
doe
not
understand
softwar
or
the
softwar
develop
process
and
the
develop
often
doe
not
understand
the
client
’
s
problem
and
applic
area
thi
caus
a
commun
gap
between
the
parti
involv
in
the
de-
velop
project
a
basic
purpos
of
the
sr
is
to
bridg
thi
commun
gap
so
they
have
a
share
vision
of
the
softwar
be
built
henc
one
of
the
main
advantag
of
a
good
sr
is
an
sr
establish
the
basi
for
agreement
between
the
client
and
the
sup-
plier
on
what
the
softwar
product
will
do
thi
basi
for
agreement
is
frequent
formal
into
a
legal
contract
between
the
client
or
the
custom
and
the
develop
the
supplier
so
through
sr
the
client
clearli
describ
what
it
expect
from
the
supplier
and
the
develop
clearli
understand
what
capabl
to
build
in
the
softwar
a
relat
but
import
advantag
is
an
sr
provid
a
refer
for
valid
of
the
final
product
that
is
the
sr
help
the
client
determin
if
the
softwar
meet
the
require-
ment
without
a
proper
sr
there
is
no
way
a
client
can
determin
if
the
softwar
be
deliv
is
what
wa
order
and
there
is
no
way
the
develop
can
convinc
the
client
that
all
the
requir
have
been
fulfil
provid
the
basi
of
agreement
and
valid
should
be
strong
enough
reason
for
both
the
client
and
the
develop
to
do
a
thorough
and
rigor
job
of
requir
understand
and
specif
but
there
are
other
veri
practic
and
press
reason
for
have
a
good
sr
studi
have
shown
that
mani
error
are
made
dure
the
requir
phase
and
an
error
in
the
sr
will
manifest
itself
a
an
error
in
the
final
system
implement
the
sr
clearli
if
we
want
a
high-qual
end
product
that
ha
few
error
we
must
begin
with
a
high-qual
sr
in
other
word
we
can
conclud
that
a
high-qual
sr
is
a
prerequisit
to
high-qual
softwar
final
the
qualiti
of
sr
ha
an
impact
on
cost
and
schedul
of
the
project
we
know
that
error
can
exist
in
the
sr
it
is
also
known
that
the
cost
of
fix
an
error
increas
almost
exponenti
a
time
progress
10
12
henc
by
improv
the
qualiti
of
requir
we
can
have
a
huge
save
in
the
futur
by
have
fewer
expens
defect
remov
in
other
word
the
requir
process
is
the
sequenc
of
activ
that
need
to
be
perform
in
the
requir
phase
and
that
culmin
in
produc
a
high-qual
doc-
ument
contain
the
sr
the
requir
process
typic
consist
of
three
basic
task
problem
or
requir
analysi
requir
specif
and
requir
valid
problem
analysi
often
start
with
a
high-level
problem
statement.
dur-
ing
analysi
the
problem
domain
and
the
environ
are
model
in
an
effort
to
understand
the
system
behavior
constraint
on
the
system
it
input
and
output
etc
the
basic
purpos
of
thi
activ
is
to
obtain
a
thorough
under-
stand
of
what
the
softwar
need
to
provid
frequent
dure
analysi
the
analyst
will
have
a
seri
of
meet
with
the
client
and
end
user
in
the
earli
meet
the
client
and
end
user
will
explain
to
the
analyst
about
their
work
their
environ
and
their
need
a
they
perceiv
them
ani
document
de-
scribe
the
work
or
the
organ
may
be
given
along
with
output
of
the
exist
method
of
perform
the
task
in
these
earli
meet
the
analyst
is
basic
the
listen
absorb
the
inform
provid
onc
the
analyst
understand
the
system
to
some
extent
he
us
the
next
few
meet
to
seek
clarif
of
the
part
he
doe
not
understand
he
may
document
the
infor-
mation
or
build
some
model
and
he
may
do
some
brainstorm
or
think
about
what
the
system
should
do
in
the
final
few
meet
the
analyst
essen-
tialli
explain
to
the
client
what
he
understand
the
system
should
do
and
us
the
meet
a
a
mean
of
verifi
if
what
he
propos
the
system
should
do
is
inde
consist
with
the
object
of
the
client
the
understand
obtain
by
problem
analysi
form
the
basi
of
require-
ment
specif
in
which
the
focu
is
on
clearli
specifi
the
requir
in
a
document
issu
such
a
represent
specif
languag
and
tool
are
address
dure
thi
activ
as
analysi
produc
larg
amount
of
in-
format
and
knowledg
with
possibl
redund
properli
organ
and
describ
the
requir
is
an
import
goal
of
thi
activ
requir
valid
focu
on
ensur
that
what
have
been
specifi
in
the
sr
are
inde
all
the
requir
of
the
softwar
and
make
sure
that
the
sr
is
of
good
qualiti
the
requir
process
termin
with
the
product
of
the
valid
sr
we
will
discu
thi
more
later
in
the
chapter
it
should
be
point
out
that
the
requir
process
is
not
a
linear
se-
quenc
of
these
three
activ
and
there
is
consider
overlap
and
feedback
between
these
activ
the
overal
requir
process
is
shown
in
figur
as
shown
in
the
figur
from
the
specif
activ
we
may
go
back
to
the
analysi
activ
thi
happen
a
frequent
some
part
of
the
problem
are
analyz
and
then
specifi
befor
other
part
are
analyz
and
speci-
fie
furthermor
the
process
of
specif
frequent
show
shortcom
in
the
knowledg
of
the
problem
therebi
necessit
further
analysi
onc
the
specif
is
done
it
go
through
the
valid
activ
thi
activ
may
reveal
problem
in
the
specif
itself
which
requir
go
back
to
the
specif
step
or
may
reveal
shortcom
in
the
understand
of
the
problem
which
requir
go
back
to
the
analysi
activ
the
final
output
is
the
sr
document
as
analysi
preced
specif
the
first
question
that
aris
is
if
formal
model
is
done
dure
analysi
whi
are
the
output
of
model
not
treat
a
an
sr
the
main
reason
is
that
model
gener
focu
on
the
problem
structur
not
it
extern
behavior
consequ
thing
like
user
interfac
are
rare
model
wherea
they
fre-
quentli
form
a
major
compon
of
the
sr
similarli
for
eas
of
model
frequent
minor
issu
like
erron
situat
e.g.
error
in
output
are
rare
model
properli
wherea
in
an
sr
behavior
under
such
situat
also
ha
to
be
specifi
similarli
perform
constraint
design
constraint
standard
complianc
recoveri
etc.
are
not
includ
in
the
model
but
must
be
specifi
clearli
in
the
sr
becaus
the
design
must
know
about
these
to
properli
design
the
system
it
should
therefor
be
clear
that
the
output
of
a
model
can
not
form
a
desir
sr
the
transit
from
analysi
to
specif
should
also
not
be
expect
to
be
straightforward
even
if
some
formal
model
is
use
dure
analysi
a
good
sr
need
to
specifi
mani
thing
some
of
which
are
not
satisfactorili
handl
dure
analysi
essenti
what
pass
from
requir
analysi
activ
to
the
specif
activ
is
the
knowledg
acquir
about
the
sys-
tem
the
model
is
essenti
a
tool
to
help
obtain
a
thorough
and
com-
plete
knowledg
about
the
propos
system
the
sr
is
written
base
on
the
knowledg
acquir
dure
analysi
as
convert
knowledg
into
a
structur
document
is
not
straightforward
specif
itself
is
a
major
task
which
is
rel
independ
to
properli
satisfi
the
basic
goal
an
sr
should
have
certain
properti
and
should
contain
differ
type
of
requir
some
of
the
desir
charac-
terist
of
an
sr
are
53
an
sr
is
correct
if
everi
requir
includ
in
the
sr
repres
someth
requir
in
the
final
system
it
is
complet
if
everyth
the
softwar
is
suppos
to
do
and
the
respons
of
the
softwar
to
all
class
of
input
data
are
specifi
in
the
sr
it
is
unambigu
if
and
onli
if
everi
requir
state
ha
one
and
onli
one
interpret
requir
are
often
written
in
natur
languag
which
is
inher
ambigu
if
the
requir
are
specifi
in
a
natur
languag
the
sr
writer
ha
to
be
especi
care
to
ensur
that
there
are
no
ambigu
an
sr
is
verifi
if
and
onli
if
everi
state
requir
is
verifi
a
requir
is
verifi
if
there
exist
some
cost-effect
process
that
can
check
whether
the
final
softwar
meet
that
requir
it
is
consist
if
there
is
no
requir
that
conflict
with
anoth
terminolog
can
caus
inconsist
for
exampl
differ
requir
may
use
differ
term
to
refer
to
the
same
object
there
may
be
logic
or
tempor
conflict
between
requir
that
caus
inconsist
thi
occur
if
the
sr
contain
two
or
more
requir
whose
logic
or
tempor
characterist
can
not
be
satisfi
togeth
by
ani
softwar
system
for
exampl
suppos
a
requir
state
that
an
event
e
is
to
occur
befor
anoth
event
f
but
then
anoth
set
of
requir
state
directli
or
indirectli
by
transit
that
event
f
should
occur
befor
event
e.
inconsist
in
an
sr
can
reflect
some
major
problem
gener
all
the
requir
for
softwar
are
not
of
equal
import
some
are
critic
other
are
import
but
not
critic
and
there
are
some
which
are
desir
but
not
veri
import
similarli
some
requir
are
core
requir
which
are
not
like
to
chang
a
time
pass
while
other
are
more
depend
on
time
some
provid
more
valu
to
the
user
than
oth-
er
an
sr
is
rank
for
import
and/or
stabil
if
for
each
requir
the
import
and
the
stabil
of
the
requir
are
indic
stabil
of
a
requir
reflect
the
chanc
of
it
chang
in
the
futur
it
can
be
reflect
in
term
of
the
expect
chang
volum
thi
understand
of
valu
each
requir
provid
is
essenti
for
iter
development—select
of
requir
for
an
iter
is
base
on
thi
evalu
of
all
these
characterist
complet
is
perhap
the
most
import
and
also
the
most
difficult
properti
to
establish
one
of
the
most
common
defect
in
requir
specif
is
incomplet
miss
requir
necessit
addit
and
modif
to
the
requir
later
in
the
develop
cycl
which
are
often
expens
to
incorpor
incomplet
is
also
a
major
sourc
of
disagr
between
the
client
and
the
supplier
some
howev
believ
that
complet
in
all
detail
may
not
be
desir
the
pursuit
of
complet
can
lead
to
specifi
detail
and
assumpt
that
may
be
commonli
understood
for
exampl
specifi
in
detail
what
a
common
oper
like
add
a
record
mean
and
specifi
these
detail
can
result
in
a
larg
requir
document
which
ha
it
own
problem
includ
make
valid
harder
on
the
other
hand
if
too
few
detail
are
given
the
chanc
of
develop
’
s
understand
be
differ
from
other
’
increas
which
can
lead
to
defect
in
the
softwar
for
complet
a
reason
goal
is
to
have
suffici
detail
for
the
project
at
hand
for
exampl
if
the
waterfal
model
is
to
be
follow
in
the
project
it
is
better
to
have
detail
specif
so
the
need
for
chang
is
minim
on
the
other
hand
for
iter
develop
a
feedback
is
possibl
and
opportun
for
chang
is
also
there
the
specif
can
be
le
detail
and
if
an
agil
approach
is
be
follow
then
complet
should
be
sought
onli
for
top-level
requir
a
detail
may
not
be
requir
in
written
form
and
are
elicit
when
the
requir
is
be
implement
togeth
the
perform
and
interfac
requir
and
design
constraint
can
be
call
nonfunct
requir
complet
of
specif
is
difficult
to
achiev
and
even
more
difficult
to
verifi
have
guidelin
about
what
differ
thing
an
sr
should
specifi
will
help
in
complet
specifi
the
requir
the
basic
issu
an
sr
must
address
are
function
requir
specifi
the
expect
behavior
of
the
system—which
output
should
be
produc
from
the
given
input
they
describ
the
relation-
ship
between
the
input
and
output
of
the
system
for
each
function
require-
ment
a
detail
descript
of
all
the
data
input
and
their
sourc
the
unit
of
measur
and
the
rang
of
valid
input
must
be
specifi
all
the
oper
to
be
perform
on
the
input
data
to
obtain
the
output
should
be
specifi
thi
includ
specifi
the
valid
check
on
the
input
and
output
data
paramet
affect
by
the
oper
and
equat
or
other
logic
oper
that
must
be
use
to
transform
the
input
into
correspond
output
for
exampl
if
there
is
a
formula
for
comput
the
output
it
should
be
specifi
an
import
part
of
the
specif
is
the
system
behavior
in
abnorm
situat
like
invalid
input
which
can
occur
in
mani
way
or
error
dure
comput
the
function
requir
must
clearli
state
what
the
system
should
do
if
such
situat
occur
specif
it
should
specifi
the
behavior
of
the
system
for
invalid
input
and
invalid
output
furthermor
behavior
for
situat
where
the
input
is
valid
but
the
normal
oper
can
not
be
perform
should
also
be
specifi
an
exampl
of
thi
situat
is
a
reserv
system
where
a
reserv
can
not
be
made
even
for
a
valid
request
if
there
is
no
avail
in
short
the
system
behavior
for
all
foreseen
input
and
all
foreseen
system
state
should
be
specifi
the
perform
requir
part
of
an
sr
specifi
the
perform
constraint
on
the
softwar
system
all
the
requir
relat
to
the
per-
formanc
characterist
of
the
system
must
be
clearli
specifi
there
are
two
type
of
perform
requir
static
and
dynam
static
requir
are
those
that
do
not
impos
constraint
on
the
execut
characterist
of
the
system
these
includ
requir
like
the
number
of
termin
to
be
support
the
number
of
simultan
user
to
be
support
and
the
number
of
file
that
the
system
ha
to
process
and
their
size
these
are
also
call
capac
requir
of
the
system
dynam
requir
specifi
constraint
on
the
execut
behavior
of
the
system
these
typic
includ
respons
time
and
throughput
constraint
on
the
system
respons
time
is
the
expect
time
for
the
complet
of
an
op-
erat
under
specifi
circumst
throughput
is
the
expect
number
of
oper
that
can
be
perform
in
a
unit
time
for
exampl
the
sr
may
specifi
the
number
of
transact
that
must
be
process
per
unit
time
or
what
the
respons
time
for
a
particular
command
should
be
accept
rang
of
the
differ
perform
paramet
should
be
specifi
a
well
a
accept-
abl
perform
for
both
normal
and
peak
workload
condit
all
of
these
requir
should
be
state
in
measur
term
require-
ment
such
a
respons
time
should
be
good
or
the
system
must
be
abl
to
process
all
the
transact
quickli
are
not
desir
becaus
they
are
impre-
cise
and
not
verifi
instead
statement
like
the
respons
time
of
command
x
should
be
le
than
one
second
90
%
of
the
time
or
a
transact
should
be
process
in
le
than
one
second
98
%
of
the
time
should
be
use
to
declar
perform
specif
there
are
a
number
of
factor
in
the
client
’
s
environ
that
may
restrict
the
choic
of
a
design
lead
to
design
constraint
such
factor
includ
standard
that
must
be
follow
resourc
limit
oper
environ
relia-
biliti
and
secur
requir
and
polici
that
may
have
an
impact
on
the
design
of
the
system
an
sr
should
identifi
and
specifi
all
such
constraint
some
exampl
of
these
are
standard
complianc
thi
specifi
the
requir
for
the
standard
the
system
must
follow
the
standard
may
includ
the
report
format
and
account
procedur
there
may
be
audit
requir
which
may
requir
log
of
oper
hardwar
limit
the
softwar
may
have
to
oper
on
some
ex-
ist
or
predetermin
hardwar
thu
impos
restrict
on
the
design
hardwar
limit
can
includ
the
type
of
machin
to
be
use
oper
system
avail
on
the
system
languag
support
and
limit
on
primari
and
secondari
storag
reliabl
and
fault
toler
fault
toler
requir
can
place
a
major
constraint
on
how
the
system
is
to
be
design
a
they
make
the
system
more
complex
and
expens
recoveri
requir
are
often
an
integr
part
here
detail
what
the
system
should
do
if
some
failur
occur
to
ensur
certain
properti
secur
secur
requir
are
becom
increasingli
import
these
requir
place
restrict
on
the
use
of
certain
command
control
access
to
data
provid
differ
kind
of
access
requir
for
differ
peopl
re-
quir
the
use
of
password
and
cryptographi
techniqu
and
maintain
a
log
of
activ
in
the
system
they
may
also
requir
proper
assess
of
secur
threat
proper
program
techniqu
and
use
of
tool
to
detect
flaw
like
buffer
overflow
in
the
extern
interfac
specif
part
all
the
interact
of
the
soft-
ware
with
peopl
hardwar
and
other
softwar
should
be
clearli
specifi
for
the
user
interfac
the
characterist
of
each
user
interfac
of
the
softwar
prod-
uct
should
be
specifi
user
interfac
is
becom
increasingli
import
and
must
be
given
proper
attent
a
preliminari
user
manual
should
be
creat
with
all
user
command
screen
format
an
explan
of
how
the
system
will
appear
to
the
user
and
feedback
and
error
messag
like
other
specif
these
requir
should
be
precis
and
verifi
so
a
statement
like
the
system
should
be
user
friendli
should
be
avoid
and
statement
like
com-
mand
should
be
no
longer
than
six
charact
or
command
name
should
reflect
the
function
they
perform
use
for
hardwar
interfac
requir
the
sr
should
specifi
the
logic
characterist
of
each
interfac
between
the
softwar
product
and
the
hard-
ware
compon
if
the
softwar
is
to
execut
on
exist
hardwar
or
on
pre-
determin
hardwar
all
the
characterist
of
the
hardwar
includ
memori
restrict
should
be
specifi
in
addit
the
current
use
and
load
charac-
terist
of
the
hardwar
should
be
given
the
interfac
requir
should
specifi
the
interfac
with
other
softwar
the
system
will
use
or
that
will
use
the
system
thi
includ
the
interfac
with
the
oper
system
and
other
applic
the
messag
content
and
format
of
each
interfac
should
be
specifi
requir
have
to
be
specifi
use
some
specif
languag
though
formal
notat
exist
for
specifi
specif
properti
of
the
system
natur
languag
are
now
most
often
use
for
specifi
requir
when
formal
languag
are
employ
they
are
often
use
to
specifi
particular
properti
or
for
specif
part
of
the
system
a
part
of
the
overal
sr
all
the
requir
for
a
system
state
use
a
formal
notat
or
natur
languag
have
to
be
includ
in
a
document
that
is
clear
and
concis
for
thi
it
is
necessari
to
properli
organ
the
requir
document
here
we
discu
the
organ
base
on
the
ieee
guid
to
softwar
requir
specif
53
the
ieee
standard
recogn
the
fact
that
differ
project
may
requir
their
requir
to
be
organ
differ
that
is
there
is
no
one
method
that
is
suitabl
for
all
project
it
provid
differ
way
of
structur
the
sr
the
first
two
section
of
the
sr
are
the
same
in
all
of
them
the
gener
structur
of
an
sr
is
given
in
figur
the
introduct
section
contain
the
purpos
scope
overview
etc.
of
the
requir
document
the
key
aspect
here
is
to
clarifi
the
motiv
and
busi
object
that
are
drive
thi
project
and
the
scope
of
the
project
the
next
section
give
an
overal
perspect
of
the
system—how
it
fit
into
the
larger
system
and
an
overview
of
all
the
requir
of
thi
system
detail
requir
are
not
mention
product
perspect
is
essenti
the
relationship
of
the
product
to
other
product
defin
if
the
product
is
independ
or
is
a
part
of
a
larger
product
and
what
the
princip
interfac
of
the
product
are
a
gener
abstract
descript
of
the
function
to
be
perform
by
the
product
is
given
schemat
diagram
show
a
gener
view
of
differ
function
and
their
relationship
with
each
other
can
often
be
use
similarli
typic
characterist
of
the
eventu
end
user
and
gener
constraint
are
also
specifi
if
agil
method
are
be
use
thi
may
be
suffici
for
the
initi
require-
ment
phase
a
these
approach
prefer
to
do
the
detail
requir
when
the
requir
is
to
be
implement
the
detail
requir
section
describ
the
detail
of
the
requir
that
a
develop
need
to
know
for
design
and
develop
the
system
thi
is
typic
the
largest
and
most
import
part
of
the
document
for
thi
section
differ
organ
have
been
suggest
in
the
standard
these
re-
quirement
can
be
organ
by
the
mode
of
oper
user
class
object
featur
stimulu
or
function
hierarchi
53
one
method
to
organ
the
spe-
cific
requir
is
to
first
specifi
the
extern
interfac
follow
by
func-
tional
requir
perform
requir
design
constraint
and
system
attribut
thi
structur
is
shown
in
figur
53
the
extern
interfac
requir
section
specifi
all
the
interfac
of
the
softwar
to
peopl
other
softwar
hardwar
and
other
system
user
interfac
are
clearli
a
veri
import
compon
they
specifi
each
human
interfac
the
system
plan
to
have
includ
screen
format
content
of
menu
and
command
structur
in
hardwar
interfac
the
logic
characterist
of
each
interfac
between
the
softwar
and
hardwar
on
which
the
softwar
can
run
are
specifi
essenti
ani
assumpt
the
softwar
is
make
about
the
hardwar
are
list
here
in
softwar
interfac
all
other
softwar
that
is
need
for
thi
softwar
to
run
is
specifi
along
with
the
interfac
commun
interfac
need
to
be
specifi
if
the
softwar
commun
with
other
entiti
in
other
machin
in
the
function
requir
section
the
function
capabl
of
the
system
are
describ
in
thi
organ
the
function
capabl
for
all
the
mode
of
oper
of
the
softwar
are
given
for
each
function
requir
the
requir
input
desir
output
and
process
requir
will
have
to
be
specifi
for
the
input
the
sourc
of
the
input
the
unit
of
measur
valid
rang
accuraci
etc.
have
to
be
specifi
for
specifi
the
process
all
oper
that
need
to
be
perform
on
the
input
data
and
ani
intermedi
data
produc
should
be
specifi
thi
includ
valid
check
on
input
sequenc
of
oper
respons
to
abnorm
situat
and
method
that
must
be
use
in
process
to
transform
the
input
into
correspond
output
the
perform
section
should
specifi
both
static
and
dynam
perfor-
manc
requir
all
factor
that
constrain
the
system
design
are
describ
in
the
perform
constraint
section
the
attribut
section
specifi
some
of
the
overal
attribut
that
the
system
should
have
ani
requir
not
cover
under
these
is
list
under
other
requir
design
constraint
specifi
all
the
constraint
impos
on
design
e.g.
secur
fault
toler
and
standard
when
use
case
are
employ
then
the
function
requir
section
of
the
sr
is
replac
by
use
case
descript
and
the
product
perspect
part
of
the
sr
may
provid
an
overview
or
summari
of
the
use
case
function
requir
often
form
the
core
of
a
requir
document
the
tradit
approach
for
specifi
function
is
to
specifi
each
function
that
the
system
should
provid
use
case
specifi
the
function
of
a
system
by
specifi
the
behavior
of
the
system
captur
a
interact
of
the
user
with
the
system
use
case
can
be
use
to
describ
the
busi
process
of
the
larger
busi
or
organ
that
deploy
the
softwar
or
it
could
just
describ
the
behavior
of
the
softwar
system
we
will
focu
on
describ
the
behavior
of
softwar
system
that
are
to
be
built
though
use
case
are
primarili
for
specifi
behavior
they
can
also
be
use
effect
for
analysi
later
when
we
discu
how
to
develop
use
case
we
will
discu
how
they
can
help
in
elicit
requir
also
use
case
drew
attent
after
they
were
use
a
part
of
the
object-ori
model
approach
propos
by
jacobson
56
due
to
thi
connect
with
an
object-ori
approach
use
case
are
sometim
view
a
part
of
an
object-ori
approach
to
softwar
develop
howev
they
are
a
gener
method
for
describ
the
interact
of
a
system
even
non-it
system
the
discuss
of
use
case
here
is
base
on
the
concept
and
process
discuss
in
24
a
softwar
system
in
our
case
whose
requir
are
be
uncov
may
be
use
by
mani
user
or
by
other
system
in
use
case
terminolog
an
actor
is
a
person
or
a
system
which
us
the
system
for
achiev
some
goal
note
that
a
an
actor
interact
for
achiev
some
goal
it
is
a
logic
entiti
that
repres
a
group
of
user
peopl
or
system
who
behav
in
a
similar
manner
differ
actor
repres
group
with
differ
goal
so
it
is
better
to
have
a
receiv
and
a
sender
actor
rather
than
have
a
gener
user
actor
for
a
system
in
which
some
messag
are
sent
by
user
and
receiv
by
some
other
user
a
primari
actor
is
the
main
actor
that
initi
a
use
case
uc
for
achiev
a
goal
and
whose
goal
satisfact
is
the
main
object
of
the
use
case
the
primari
actor
is
a
logic
concept
and
though
we
assum
that
the
primari
actor
execut
the
use
case
some
agent
may
actual
execut
it
on
behalf
of
the
primari
actor
for
exampl
a
vp
may
be
the
primari
actor
for
get
sale
growth
report
by
region
use
case
though
it
may
actual
be
execut
by
an
assist
we
consid
the
primari
actor
a
the
person
who
actual
us
the
outcom
of
the
use
case
and
who
is
the
main
consum
of
the
goal
time-driven
trigger
is
anoth
exampl
of
how
a
use
case
may
be
execut
on
behalf
of
the
primari
actor
in
thi
situat
the
report
is
gener
automat
at
some
time
note
howev
that
although
the
goal
of
the
primari
actor
is
the
drive
forc
behind
a
use
case
the
use
case
must
also
fulfil
goal
that
other
stake-
holder
might
have
for
thi
use
case
that
is
the
main
goal
of
a
use
case
is
to
describ
behavior
of
the
system
that
result
in
satisfact
of
the
goal
of
all
the
stakehold
although
the
use
case
may
be
driven
by
the
goal
of
the
primari
actor
for
exampl
a
use
case
withdraw
money
from
the
atm
ha
a
custom
a
it
primari
actor
and
will
normal
describ
the
entir
interac-
tion
of
the
custom
with
the
atm
howev
the
bank
is
also
a
stakehold
of
the
atm
system
and
it
goal
may
includ
that
all
step
are
log
money
is
given
onli
if
there
are
suffici
fund
in
the
account
and
no
more
than
some
amount
is
given
at
a
time
etc
satisfact
of
these
goal
should
also
be
shown
by
the
use
case
withdraw
money
from
the
atm
for
describ
interact
use
case
use
scenario
a
scenario
describ
a
set
of
action
that
are
perform
to
achiev
a
goal
under
some
specifi
con-
dition
the
set
of
action
is
gener
specifi
a
a
sequenc
a
that
is
the
most
conveni
way
to
express
it
in
text
though
in
actual
execut
the
ac-
tion
specifi
may
be
execut
in
parallel
or
in
some
differ
order
each
step
in
a
scenario
is
a
logic
complet
action
perform
either
by
the
actor
or
the
system
gener
a
step
is
some
action
by
the
actor
e.g.
enter
informa-
tion
some
logic
step
that
the
system
perform
to
progress
toward
achiev
it
goal
e.g.
valid
inform
deliv
inform
or
an
intern
state
chang
by
the
system
to
satisfi
some
goal
e.g.
log
the
transact
updat
the
record
a
use
case
alway
ha
a
main
success
scenario
which
describ
the
interac-
tion
if
noth
fail
and
all
step
in
the
scenario
succeed
there
may
be
mani
success
scenario
though
the
use
case
aim
to
achiev
it
goal
differ
situ-
ation
can
aris
while
the
system
and
the
actor
are
interact
which
may
not
permit
the
system
to
achiev
the
goal
fulli
for
these
situat
a
use
case
ha
extens
scenario
which
describ
the
system
behavior
if
some
of
the
step
in
the
main
scenario
do
not
complet
success
sometim
they
are
also
call
except
scenario
a
use
case
is
a
collect
of
all
the
success
and
extens
scenario
relat
to
the
goal
the
terminolog
of
use
case
is
summar
in
tabl
to
achiev
the
desir
goal
a
system
can
divid
it
into
subgoal
some
of
these
subgoal
may
be
achiev
by
the
system
itself
but
they
may
also
be
treat
a
separ
use
case
execut
by
support
actor
which
may
be
anoth
system
for
exampl
suppos
for
verifi
a
user
in
withdraw
money
from
the
atm
an
authent
servic
is
use
the
interact
with
thi
servic
can
be
treat
a
a
separ
use
case
a
scenario
in
a
use
case
may
therefor
employ
anoth
use
case
for
perform
some
of
the
task
in
other
word
use
case
permit
a
hierarch
organ
it
should
be
evid
that
the
basic
system
model
that
use
case
assum
is
that
a
system
primarili
respond
to
request
from
actor
who
use
the
system
by
describ
the
interact
between
actor
and
the
system
the
system
be-
havior
can
be
specifi
and
through
the
behavior
it
function
is
specifi
a
key
advantag
of
thi
approach
is
that
use
case
focu
on
extern
behavior
therebi
cleanli
avoid
do
intern
design
dure
requir
someth
that
is
desir
but
not
easi
to
do
with
mani
model
approach
use
case
are
natur
textual
descript
and
repres
the
behavior
requir
of
the
system
thi
behavior
specif
can
captur
most
of
the
function
requir
of
the
system
therefor
use
case
do
not
form
the
complet
sr
but
can
form
a
part
of
it
the
complet
sr
a
we
have
seen
will
need
to
captur
other
requir
like
perform
and
design
constraint
though
the
detail
use
case
are
textual
diagram
can
be
use
to
sup-
plement
the
textual
descript
for
exampl
the
use
case
diagram
of
uml
provid
an
overview
of
the
use
case
and
actor
in
the
system
and
their
depen-
denci
a
uml
use
case
diagram
gener
show
each
use
case
in
the
system
a
an
ellips
show
the
primari
actor
for
the
use
case
a
a
stick
figur
connect
to
the
use
case
with
a
line
and
show
depend
between
use
case
by
arc
between
use
case
some
other
relationship
between
use
case
can
also
be
rep-
resent
howev
a
use
case
are
basic
textual
in
natur
diagram
play
a
limit
role
in
either
develop
or
specifi
use
case
we
will
not
discu
use
case
diagram
further
let
u
illustr
these
concept
with
a
few
use
case
which
we
will
also
use
to
explain
other
concept
relat
to
use
case
let
u
consid
that
a
small
on-lin
auction
system
is
to
be
built
for
a
univers
commun
call
the
univers
auction
system
ua
through
which
differ
member
of
the
univers
can
sell
and
buy
good
we
will
assum
that
there
is
a
separ
financi
subsystem
through
which
the
payment
are
made
and
that
each
buyer
and
seller
ha
an
account
in
it
in
thi
system
though
we
have
the
same
peopl
who
might
be
buy
and
sell
we
have
buyer
and
seller
a
separ
logic
actor
a
both
have
differ
goal
to
achiev
besid
these
the
auction
system
itself
is
a
stake-
holder
and
an
actor
the
financi
system
is
anoth
let
u
first
consid
the
main
use
case
of
thi
system—
put
an
item
for
auction
make
a
bid
and
complet
an
auction.
these
use
case
are
given
in
figur
the
use
case
are
self-explanatori
thi
is
the
great
valu
of
use
cases—they
are
natur
and
story-lik
which
make
them
easi
to
understand
by
both
an
an-
alyst
and
a
layman
thi
help
consider
in
minim
the
commun
gap
between
the
develop
and
other
stakehold
some
point
about
the
use
case
are
worth
discuss
the
use
case
are
gener
number
for
refer
purpos
the
name
of
the
use
case
specifi
the
goal
of
the
primari
actor
henc
there
is
no
separ
line
specifi
the
goal
the
primari
actor
can
be
a
person
or
a
system—for
uc2
they
are
person
but
for
uc3
it
is
a
system
the
primari
actor
can
also
be
anoth
softwar
which
might
request
a
servic
the
precondit
of
a
use
case
specifi
what
the
system
will
ensur
befor
allow
the
use
case
to
be
initi
common
precondit
are
user
is
log
in
input
data
exist
in
file
or
other
data
structur
etc
for
an
oper
like
delet
it
may
be
that
item
exist
or
for
a
track
use
case
it
may
be
that
the
track
number
is
valid
it
is
worth
note
that
the
use
case
descript
list
contain
some
action
that
are
not
necessarili
tie
to
the
goal
of
the
primari
actor
for
exampl
the
last
step
in
uc
thi
action
is
clearli
not
need
by
the
current
bidder
for
hi
goal
howev
a
the
system
and
other
bidder
are
also
stakehold
for
thi
use
case
the
use
case
ha
to
ensur
that
their
goal
are
also
satisfi
similar
is
the
case
with
the
last
item
of
uc1
the
except
situat
are
also
fairli
clear
we
have
list
onli
the
most
obviou
one
there
can
be
mani
more
depend
on
the
goal
of
the
organiza-
tion
for
exampl
there
could
be
one
user
doe
not
complet
the
transact
which
is
a
failur
condit
that
can
occur
anywher
what
should
be
done
in
uc1
put
an
item
for
auction
primari
actor
seller
precondit
seller
ha
log
in
main
success
scenario
seller
post
an
item
it
categori
descript
pictur
etc
for
auction
system
show
past
price
of
similar
item
to
seller
seller
specifi
the
start
bid
price
and
a
date
when
auction
will
close
system
show
the
rate
of
the
seller
the
start
bid
the
current
bid
and
the
highest
bid
ask
buyer
to
make
a
bid
system
accept
the
bid
block
fund
in
bidder
account
system
updat
the
max
bid
price
inform
other
user
and
updat
the
record
for
the
item
the
bidder
doe
not
have
enough
fund
in
hi
account
system
cancel
the
bid
ask
the
user
to
get
more
fund
precondit
the
last
date
for
bid
ha
been
reach
select
highest
bidder
send
email
to
select
bidder
and
seller
inform
final
bid
price
send
email
to
other
bidder
also
transfer
from
seller
’
s
acct
commiss
amt
to
organ
’
s
acct
thi
case
ha
to
then
be
specifi
e.g.
all
the
record
are
clean
a
use
case
can
employ
other
use
case
to
perform
some
of
it
work
for
exampl
in
uc
block
the
necessari
fund
or
debit
bidder
’
s
account
and
credit
seller
’
s
are
action
that
need
to
be
perform
for
the
use
case
to
succeed
howev
they
are
not
perform
in
thi
use
case
but
are
treat
a
use
case
themselv
whose
behavior
ha
to
be
describ
elsewher
if
these
use
case
are
also
part
of
the
system
be
built
then
there
must
be
descript
of
these
in
the
requir
document
if
they
belong
to
some
other
system
then
proper
specif
about
them
will
have
to
be
obtain
the
financi
action
may
easili
be
outsid
the
scope
of
the
auction
system
so
will
not
be
describ
in
the
sr
howev
action
like
search
and
brows
are
most
like
part
of
thi
system
and
will
have
to
be
describ
in
the
sr
thi
allow
use
case
to
be
hierarch
organ
and
refin
approach
can
be
use
to
defin
a
higher-level
use
case
in
term
of
lower
servic
and
then
defin
the
lower
servic
howev
these
lower-level
use
case
are
proper
use
case
with
a
primari
actor
main
scenario
etc
the
primari
actor
will
often
be
the
primari
actor
of
the
higher-level
use
case
for
exampl
the
primari
actor
for
the
use
case
find
an
item
is
the
buyer
it
also
impli
that
while
list
the
scenario
new
use
case
and
new
actor
might
emerg
in
the
requir
document
all
the
use
case
that
are
mention
in
thi
one
will
need
to
be
specifi
if
they
are
a
part
of
the
system
be
built
besid
specifi
the
primari
actor
it
goal
and
the
success
and
except
scenario
a
use
case
can
also
specifi
a
scope
if
the
system
be
built
ha
mani
subsystem
a
is
often
the
case
sometim
system
use
case
may
actual
be
captur
the
behavior
of
some
subsystem
in
such
a
situat
it
is
better
to
specifi
the
scope
of
that
use
case
a
the
subsystem
for
exampl
a
use
case
for
a
system
may
be
log
in
even
though
thi
is
a
part
of
the
system
the
interact
of
the
user
with
the
system
describ
in
thi
use
case
is
limit
to
the
interact
with
the
login
and
authent
subsystem
if
login
and
authent
ha
been
identifi
a
a
subsystem
or
a
compon
then
it
is
better
to
specifi
it
a
the
scope
gener
a
busi
use
case
ha
the
enterpris
or
the
organ
a
the
scope
a
system
use
case
ha
the
system
be
built
a
the
scope
and
a
compon
use
case
is
where
the
scope
is
a
subsystem
uc
where
the
scope
is
the
enterpris
can
often
run
over
a
long
period
of
time
e.g.
process
an
applic
of
a
prospect
candid
these
use
case
may
requir
mani
differ
system
to
perform
differ
task
befor
the
uc
can
be
complet
exampl
for
process
an
applic
the
hr
depart
ha
to
do
some
thing
the
travel
depart
ha
to
arrang
the
travel
and
lodg
and
the
technic
depart
ha
to
conduct
the
interview
the
system
and
subsystem
use
case
are
gener
of
the
type
that
can
be
complet
in
one
rel
short
sit
all
the
three
use
case
abov
are
system
use
case
as
mention
befor
we
will
focu
on
describ
the
behavior
of
the
softwar
system
we
are
interest
in
build
howev
the
enterprise-level
uc
provid
the
context
in
which
the
system
oper
henc
sometim
it
may
be
use
to
describ
some
of
the
key
busi
process
a
summary-level
use
case
to
provid
the
context
for
the
system
be
design
and
built
for
exampl
let
u
describ
the
overal
use
case
of
perform
an
auction
a
possibl
use
case
is
given
in
figur
thi
use
case
is
not
a
one-sit
use
case
and
is
realli
a
busi
process
which
provid
the
context
for
the
earlier
use
case
though
thi
use
case
is
also
larg
done
by
the
system
and
is
probabl
part
of
the
system
be
built
frequent
such
use
case
may
not
be
complet
part
of
the
softwar
system
and
may
involv
manual
step
a
well
for
exampl
in
the
auction
an
item
use
case
if
the
deliveri
of
the
item
be
auction
wa
to
be
ensur
by
the
auction
site
then
that
will
be
a
step
in
thi
use
case
and
it
will
be
a
manual
step
use
case
may
also
specifi
post
condit
for
the
main
success
scenario
or
some
minim
guarante
they
provid
in
all
condit
for
exampl
in
some
use
case
atom
may
be
a
minim
guarante
that
is
no
matter
what
except
occur
either
the
entir
transact
will
be
complet
and
the
goal
achiev
or
the
system
state
will
be
a
if
noth
wa
done
with
atom
there
will
be
no
partial
result
and
ani
partial
chang
will
be
roll
back
uc
not
onli
document
requir
a
their
form
is
like
storytel
and
us
text
both
of
which
are
easi
and
natur
with
differ
stakehold
they
also
are
a
good
medium
for
discuss
and
brainstorm
henc
uc
can
also
be
use
for
requir
elicit
and
problem
analysi
while
develop
use
case
inform
or
formal
model
may
also
be
built
though
they
are
not
requir
uc
can
be
evolv
in
a
stepwis
refin
manner
with
each
step
ad
more
detail
thi
approach
allow
uc
to
be
present
at
differ
level
of
ab-
straction
though
ani
number
of
level
of
abstract
are
possibl
four
natur
level
emerg
actor
and
goal
the
actor-go
list
enumer
the
use
case
and
specifi
the
actor
for
each
goal
the
name
of
the
use
case
is
gener
the
goal
thi
tabl
may
be
extend
by
give
a
brief
descript
of
each
of
the
use
case
at
thi
level
the
use
case
togeth
specifi
the
scope
of
the
system
and
give
an
overal
view
of
what
it
doe
complet
of
function
can
be
assess
fairli
well
by
review
these
main
success
scenario
for
each
of
the
use
case
the
main
success
scenar-
io
are
provid
at
thi
level
with
the
main
scenario
the
system
behavior
for
each
use
case
is
specifi
thi
descript
can
be
review
to
ensur
that
interest
of
all
the
stakehold
are
met
and
that
the
use
case
is
deliv
the
desir
behavior
failur
condit
onc
the
success
scenario
is
list
all
the
possibl
failur
condit
can
be
identifi
at
thi
level
for
each
step
in
the
main
success
scenario
the
differ
way
in
which
a
step
can
fail
form
the
failur
condit
befor
decid
what
should
be
done
in
these
failur
condit
which
is
done
at
the
next
level
it
is
better
to
enumer
the
failur
condi-
tion
and
review
for
complet
failur
handl
thi
is
perhap
the
most
tricki
and
difficult
part
of
write
a
use
case
often
the
focu
is
so
much
on
the
main
function
that
peopl
do
not
pay
attent
to
how
failur
should
be
handl
determin
what
should
be
the
behavior
under
differ
failur
condit
will
often
identifi
new
busi
rule
or
new
actor
the
differ
level
can
be
use
for
differ
purpos
for
discuss
on
overal
function
or
capabl
of
the
system
actor
and
goal-level
descrip-
tion
is
veri
use
failur
condit
on
the
other
hand
are
veri
use
for
understand
and
extract
detail
requir
and
busi
rule
under
special
case
these
four
level
can
also
guid
the
analysi
activ
a
step-by-step
ap-
proach
for
analysi
when
employ
use
case
is
step
1
identifi
the
actor
and
their
goal
and
get
an
agreement
with
the
concern
stakehold
a
to
the
goal
the
actor-go
list
will
clearli
defin
the
scope
of
the
system
and
will
provid
an
overal
view
of
what
the
system
capabl
are
step
2
understand
and
specifi
the
main
success
scenario
for
each
uc
give
more
detail
about
the
main
function
of
the
system
interact
and
dis-
cussion
are
the
primari
mean
to
uncov
these
scenario
though
model
may
be
built
if
requir
dure
thi
step
the
analyst
may
uncov
that
to
complet
some
use
case
some
other
use
case
are
need
which
have
not
been
identifi
in
thi
case
the
list
of
use
case
will
be
expand
step
3
when
the
main
success
scenario
for
a
use
case
is
agre
upon
and
the
main
step
in
it
execut
are
specifi
then
the
failur
condit
can
be
examin
enumer
failur
condit
is
an
excel
method
of
uncov
special
situat
that
can
occur
and
which
must
be
handl
by
the
system
step
4
final
specifi
what
should
be
done
for
these
failur
condit
as
detail
of
handl
failur
scenario
can
requir
a
lot
of
effort
and
discuss
it
is
better
to
first
enumer
the
differ
failur
condit
and
then
get
the
detail
of
these
scenario
veri
often
when
decid
the
failur
scenario
mani
new
busi
rule
of
how
to
deal
with
these
scenario
are
uncov
though
we
have
explain
the
basic
step
in
develop
use
case
at
ani
step
an
analyst
may
have
to
go
back
to
earlier
step
a
dure
some
detail
analysi
new
actor
may
emerg
or
new
goal
and
new
use
case
may
be
un-
cover
that
is
use
use
case
for
analysi
is
also
an
interact
task
what
should
be
the
level
of
detail
in
a
use
case
there
is
no
one
answer
to
a
question
like
thi
the
actual
answer
alway
depend
on
the
project
and
the
situat
so
it
is
with
use
case
gener
it
is
good
to
have
suffici
detail
which
are
not
overwhelm
but
are
suffici
to
build
the
system
and
meet
it
qualiti
goal
for
exampl
if
there
is
a
small
colloc
team
build
the
system
it
is
quit
like
that
use
case
which
list
the
main
except
condit
and
give
a
few
key
step
for
the
scenario
will
suffic
on
the
other
hand
for
a
project
whose
develop
is
to
be
subcontract
to
some
other
organ
it
is
better
to
have
more
detail
use
case
for
write
use
case
gener
technic
write
rule
appli
use
simpl
gram-
mar
clearli
specifi
who
is
perform
the
step
and
keep
the
overal
scenario
a
simpl
a
possibl
also
when
write
step
for
simplic
it
is
better
to
combin
some
step
into
one
logic
step
if
it
make
sens
for
exampl
step
user
enter
hi
name
user
enter
hi
ssn
and
user
enter
hi
address
can
be
easili
combin
into
one
step
user
enter
person
inform
the
basic
aim
of
problem
analysi
is
to
obtain
a
clear
understand
of
the
need
of
the
client
and
the
user
what
exactli
is
desir
from
the
softwar
and
what
the
constraint
on
the
solut
are
frequent
the
client
and
the
user
do
not
understand
or
know
all
their
need
becaus
the
potenti
of
the
new
system
is
often
not
fulli
appreci
the
analyst
have
to
ensur
that
the
real
need
of
the
client
and
the
user
are
uncov
even
if
they
don
’
t
know
them
clearli
that
is
the
analyst
are
not
just
collect
and
organ
inform
about
the
client
’
s
organ
and
it
process
but
they
also
act
a
consult
who
play
an
activ
role
of
help
the
client
and
user
identifi
their
need
the
basic
principl
use
in
analysi
is
the
same
a
in
ani
complex
task
divid
and
conquer
that
is
partit
the
problem
into
subproblem
and
then
tri
to
understand
each
subproblem
and
it
relationship
to
other
subproblem
in
an
effort
to
understand
the
total
problem
the
concept
of
state
and
project
can
sometim
also
be
use
effect
in
the
partit
process
a
state
of
a
system
repres
some
condit
about
the
system
frequent
when
use
state
a
system
is
first
view
a
oper
in
one
of
the
sever
possibl
state
and
then
a
detail
analysi
is
perform
for
each
state
thi
approach
is
sometim
use
in
real-tim
softwar
or
process-control
softwar
in
project
a
system
is
defin
from
multipl
point
of
view
86
while
use
project
differ
viewpoint
of
the
system
are
defin
and
the
system
is
then
analyz
from
these
differ
perspect
the
differ
project
obtain
are
combin
to
form
the
analysi
for
the
complet
system
analyz
the
system
from
the
differ
perspect
is
often
easier
a
it
limit
and
focu
the
scope
of
the
studi
in
the
remaind
of
thi
section
we
will
discu
two
other
method
for
prob-
lem
analysi
as
the
goal
of
analysi
is
to
understand
the
problem
domain
an
analyst
must
be
familiar
with
differ
method
of
analysi
and
pick
the
approach
that
he
feel
is
best
suit
to
the
problem
at
hand
data
flow
diagram
also
call
data
flow
graph
are
commonli
use
dure
problem
analysi
data
flow
diagram
dfd
are
quit
gener
and
are
not
limit
to
problem
analysi
for
softwar
requir
specif
they
were
in
use
long
befor
the
softwar
engin
disciplin
began
dfd
are
veri
use
in
understand
a
system
and
can
be
effect
use
dure
analysi
a
dfd
show
the
flow
of
data
through
a
system
it
view
a
system
a
a
function
that
transform
the
input
into
desir
output
ani
complex
system
will
not
perform
thi
transform
in
a
singl
step
and
data
will
typic
undergo
a
seri
of
transform
befor
it
becom
the
output
the
dfd
aim
to
captur
the
transform
that
take
place
within
a
system
to
the
input
data
so
that
eventu
the
output
data
is
produc
the
agent
that
perform
the
transform
of
data
from
one
state
to
anoth
is
call
a
process
or
a
bubbl
thu
a
dfd
show
the
movement
of
data
through
the
differ
transform
or
process
in
the
system
the
process
are
shown
by
name
circl
and
data
flow
are
repres
by
name
arrow
enter
or
leav
the
bubbl
a
rectangl
repres
a
sourc
or
sink
and
is
a
net
origin
or
consum
of
data
a
sourc
or
a
sink
is
typic
outsid
the
main
system
of
studi
an
exampl
of
a
dfd
for
a
system
that
pay
worker
is
shown
in
figur
in
thi
dfd
there
is
one
basic
input
data
flow
the
weekli
timesheet
which
origin
from
the
sourc
worker
the
basic
output
is
the
paycheck
the
sink
for
which
is
also
the
worker
in
thi
system
first
the
employe
’
s
record
is
re-
triev
use
the
employe
id
which
is
contain
in
the
timesheet
from
the
employe
record
the
rate
of
payment
and
overtim
are
obtain
these
rate
and
the
regular
and
overtim
hour
from
the
timesheet
are
use
to
comput
the
pay
after
the
total
pay
is
determin
tax
are
deduct
to
comput
the
tax
deduct
inform
from
the
tax-rat
file
is
use
the
amount
of
tax
deduct
is
record
in
the
employe
and
compani
record
final
the
pay-
check
is
issu
for
the
net
pay
the
amount
paid
is
also
record
in
compani
record
some
convent
use
in
draw
thi
dfd
should
be
explain
all
ex-
ternal
file
such
a
employe
record
compani
record
and
tax
rate
are
shown
a
a
label
straight
line
the
need
for
multipl
data
flow
by
a
process
is
rep-
resent
by
a
between
the
data
flow
thi
symbol
repres
the
and
relationship
for
exampl
if
there
is
a
between
the
two
input
data
flow
a
and
b
for
a
process
it
mean
that
a
and
b
are
need
for
the
process
in
the
dfd
for
the
process
weekli
pay
the
data
flow
hour
and
pay
rate
both
are
need
a
shown
in
the
dfd
similarli
the
or
relationship
is
repres
by
a
+
between
the
data
flow
thi
dfd
is
an
abstract
descript
of
the
system
for
handl
payment
it
doe
not
matter
if
the
system
is
autom
or
manual
thi
diagram
could
veri
well
be
for
a
manual
system
where
the
comput
are
all
done
with
calcul
and
the
record
are
physic
folder
and
ledger
the
detail
and
minor
data
path
are
not
repres
in
thi
dfd
for
exampl
what
happen
if
there
are
error
in
the
weekli
timesheet
is
not
shown
in
thi
dfd
thi
is
done
to
avoid
get
bog
down
with
detail
while
construct
a
dfd
for
the
overal
system
if
more
detail
are
desir
the
dfd
can
be
further
refin
it
should
be
point
out
that
a
dfd
is
not
a
flowchart
a
dfd
repres
the
flow
of
data
while
a
flowchart
show
the
flow
of
control
a
dfd
doe
not
repres
procedur
inform
so
while
draw
a
dfd
one
must
not
get
involv
in
procedur
detail
and
procedur
think
must
be
conscious
avoid
for
exampl
consider
of
loop
and
decis
must
be
ignor
in
draw
the
dfd
the
design
ha
to
specifi
the
major
transform
in
the
path
of
the
data
flow
from
the
input
to
output
how
those
transform
are
perform
is
not
an
issu
while
draw
the
data
flow
graph
mani
system
are
too
larg
for
a
singl
dfd
to
describ
the
data
process
clearli
it
is
necessari
that
some
decomposit
and
abstract
mechan
be
use
for
such
system
dfd
can
be
hierarch
organ
which
help
in
progress
partit
and
analyz
larg
system
such
dfd
togeth
are
call
a
level
dfd
set
28
a
level
dfd
set
ha
a
start
dfd
which
is
a
veri
abstract
represen-
tation
of
the
system
identifi
the
major
input
and
output
and
the
major
process
in
the
system
often
befor
the
initi
dfd
a
context
diagram
may
be
drawn
in
which
the
entir
system
is
shown
a
a
singl
process
with
all
it
input
output
sink
and
sourc
then
each
process
is
refin
and
a
dfd
is
drawn
for
the
process
in
other
word
a
bubbl
in
a
dfd
is
expand
into
a
dfd
dure
refin
for
the
hierarchi
to
be
consist
it
is
import
that
the
net
input
and
output
of
a
dfd
for
a
process
are
the
same
a
the
input
and
output
of
the
process
in
the
higher-level
dfd
thi
refin
stop
if
each
bubbl
is
consid
to
be
atom
in
that
each
bubbl
can
be
easili
specifi
or
understood
it
should
be
point
out
that
dure
refine-
ment
though
the
net
input
and
output
are
preserv
a
refin
of
the
data
might
also
occur
that
is
a
unit
of
data
may
be
broken
into
it
compon
for
process
when
the
detail
dfd
for
a
process
is
be
drawn
so
a
the
process
are
decompos
data
decomposit
also
occur
in
a
dfd
data
flow
are
identifi
by
uniqu
name
these
name
are
chosen
so
that
they
convey
some
mean
about
what
the
data
is
howev
for
specifi
the
precis
structur
of
data
flow
a
data
dictionari
is
often
use
the
associ
data
dictionari
state
precis
the
structur
of
each
data
flow
in
the
dfd
to
defin
the
data
structur
a
regular
express
type
notat
is
use
while
specifi
the
structur
of
a
data
item
sequenc
or
composit
is
repres
by
+
select
by
vertic
bar
mean
one
or
the
other
and
repetit
by
entiti
relationship
diagram
erd
have
been
use
for
year
for
model
the
data
aspect
of
a
system
an
erd
can
be
use
to
model
the
data
in
the
system
and
how
the
data
item
relat
to
each
other
but
doe
not
cover
how
the
data
is
to
be
process
or
how
the
data
is
actual
manipul
and
chang
in
the
system
it
is
use
often
by
databas
design
to
repres
the
structur
of
the
databas
and
is
a
use
tool
for
analyz
softwar
system
which
employ
databas
er
model
form
the
logic
databas
design
and
can
be
easili
convert
into
initi
tabl
structur
for
a
relat
databas
er
diagram
have
two
main
concept
and
notat
to
repres
them
these
are
entiti
and
relationship
entiti
are
the
main
inform
holder
or
concept
in
a
system
entiti
can
be
view
a
type
which
describ
all
element
of
some
type
which
have
common
properti
entiti
are
repres
a
box
in
an
er
diagram
with
a
box
repres
all
instanc
of
the
concept
or
type
the
entiti
is
repres
an
entiti
is
essenti
equival
to
a
tabl
in
a
databas
or
a
sheet
in
a
spreadsheet
with
each
row
repres
an
instanc
of
thi
entiti
entiti
may
have
attribut
which
are
properti
of
the
concept
be
repres
attribut
can
be
view
a
the
column
of
the
databas
tabl
and
are
repres
a
ellipsi
attach
to
the
entiti
to
avoid
clutter
attribut
are
sometim
not
shown
in
an
er
diagram
if
all
ident
are
identifi
and
repres
we
will
have
a
set
of
label
box
in
the
diagram
each
box
repres
some
entiti
entiti
of
cours
do
not
exist
in
isol
they
have
relationship
between
them
and
that
is
the
reason
whi
they
exist
togeth
in
the
same
system
relationship
between
two
entiti
are
repres
by
a
line
connect
the
box
repres
the
entiti
have
a
line
between
two
box
mean
that
each
element
of
one
entiti
is
relat
to
element
of
the
other
entiti
and
vice
versa
thi
relationship
can
also
be
given
a
name
by
label
the
line
in
some
notat
the
name
of
the
relationship
is
mention
insid
a
diamond
some
exampl
of
relationship
are
studies-in
between
student
and
colleg
works-
for
between
employe
and
compani
and
owner
between
peopl
and
car
note
that
the
relationship
need
not
be
between
two
distinct
entiti
there
can
be
a
relationship
between
element
of
the
same
entiti
for
exampl
for
an
entiti
type
employe
there
can
be
a
relationship
supervisor
which
is
between
element
of
the
entiti
employe
an
er
diagram
specifi
some
properti
of
the
relationship
also
in
par-
ticular
it
can
specifi
if
the
relationship
is
option
or
necessari
and
with
how
mani
element
an
element
of
an
entiti
is
relat
to
thi
lead
to
mani
form
of
relationship
the
common
one
are
one-to-on
that
one
element
of
an
entiti
is
relat
to
exactli
one
element
of
the
other
entiti
one-to-mani
or
many-to-on
that
one
element
is
relat
to
mani
element
of
the
other
entiti
and
many-to-mani
that
one
element
of
entiti
a
is
relat
to
mani
element
of
entiti
b
and
one
element
of
entiti
b
is
relat
to
mani
element
of
entiti
a
there
are
variou
notat
to
express
the
natur
of
relationship
a
common
one
is
to
put
0
1
or
m
on
the
two
side
of
the
relationship
line
to
rep-
resent
the
cardin
of
the
relationship
thu
for
a
one-to-mani
relationship
a
1
will
be
put
on
one
end
and
n
will
be
put
on
the
other
end
of
the
line
relationship
reflect
some
properti
of
the
problem
domain
for
exampl
a
cours
ha
mani
student
and
a
student
is
take
mani
cours
lead
to
many-to-mani
relationship
between
cours
and
student
but
a
student
studi
in
exactli
one
colleg
though
the
colleg
ha
mani
student
lead
to
many-
to-on
relationship
between
student
and
colleg
a
depart
in
a
colleg
ha
exactli
one
head
and
one
person
can
be
head
of
onli
one
depart
lead
to
one-to-on
relationship
let
u
draw
the
er
diagram
for
the
univers
auction
system
some
use
case
of
which
were
discuss
earlier
from
the
use
case
describ
we
can
easili
identifi
some
entities—us
categori
item
and
bid
the
relationship
between
them
are
also
clear
a
user
can
sell
mani
item
but
each
item
ha
onli
one
seller
so
there
is
a
one-to-mani
relationship
sell
between
the
user
and
item
similarli
there
is
a
one-to-mani
relationship
between
item
and
bid
between
user
and
bid
and
between
categori
and
item
the
er
diagram
of
thi
is
shown
in
figur
from
the
er
diagram
it
is
easi
to
determin
the
initi
logic
structur
of
the
tabl
each
entiti
repres
a
tabl
and
relationship
determin
what
field
a
tabl
must
have
to
support
the
relationship
in
addit
to
have
field
for
each
of
the
attribut
for
exampl
from
the
er
diagram
for
the
auction
system
we
can
say
that
there
will
be
four
tabl
for
user
categori
item
and
bid
as
user
is
relat
to
item
by
one-to-mani
the
item
tabl
should
have
a
user-id
field
to
uniqu
identifi
the
user
who
is
sell
the
item
similarli
the
bid
tabl
must
have
a
user-id
to
identifi
the
user
who
place
the
bid
and
an
item-id
to
identifi
the
item
for
which
the
bid
ha
been
made
as
we
can
see
an
er
diagram
is
complementari
to
method
like
use
case
wherea
use
case
focu
on
the
natur
of
interact
and
function
er
diagram
focu
on
the
structur
of
the
entiti
be
use
in
the
use
case
due
to
their
complementari
natur
both
use
case
and
er
diagram
can
be
use
while
analyz
the
requir
of
a
system
and
both
may
be
contain
in
an
sr
the
develop
of
softwar
start
with
a
requir
document
which
is
also
use
to
determin
eventu
whether
or
not
the
deliv
softwar
system
is
accept
it
is
therefor
import
that
the
requir
specif
con-
tain
no
error
and
specifi
the
client
’
s
requir
correctli
furthermor
a
the
longer
an
error
remain
undetect
the
greater
the
cost
of
correct
it
it
is
extrem
desir
to
detect
error
in
the
requir
befor
the
design
and
develop
of
the
softwar
begin
due
to
the
natur
of
the
requir
specif
phase
there
is
a
lot
of
room
for
misunderstand
and
commit
error
and
it
is
quit
possibl
that
the
requir
specif
doe
not
accur
repres
the
client
’
s
need
the
basic
object
of
the
requir
valid
activ
is
to
ensur
that
the
sr
reflect
the
actual
requir
accur
and
clearli
a
relat
object
is
to
check
that
the
sr
document
is
itself
of
good
qualiti
befor
we
discu
valid
let
u
consid
the
type
of
error
that
typic
occur
in
an
sr
mani
differ
type
of
error
are
possibl
but
the
most
com-
mon
error
that
occur
can
be
classifi
in
four
type
omiss
inconsist
incorrect
fact
and
ambigu
omiss
is
a
common
error
in
requir
in
thi
type
of
error
some
user
requir
is
simpli
not
includ
in
the
sr
the
omit
requir
may
be
relat
to
the
behavior
of
the
system
it
perfor-
manc
constraint
or
ani
other
factor
omiss
directli
affect
the
extern
complet
of
the
sr
anoth
common
form
of
error
in
requir
is
inconsist
inconsist
can
be
due
to
contradict
within
the
require-
ment
themselv
or
to
incompat
of
the
state
requir
with
the
actual
requir
of
the
client
or
with
the
environ
in
which
the
system
will
oper
the
third
common
requir
error
is
incorrect
fact
error
of
thi
type
occur
when
some
fact
record
in
the
sr
is
not
correct
the
fourth
common
error
type
is
ambigu
error
of
thi
type
occur
when
there
are
some
requir
that
have
multipl
mean
that
is
their
interpret
is
not
uniqu
some
project
have
collect
data
about
requir
error
in
27
the
effect
of
differ
method
and
tool
in
detect
requir
error
in
specif
for
a
data
process
applic
is
report
on
averag
a
total
of
more
than
250
error
were
detect
and
the
percentag
of
differ
type
of
error
wa
in
5
the
error
detect
in
the
requir
specif
of
the
a-
which
deal
with
a
real-tim
flight
control
softwar
were
report
a
total
of
about
80
error
were
detect
out
of
which
about
23
%
were
cleric
in
natur
of
the
remain
the
distribut
with
error
type
wa
though
the
distribut
of
error
is
differ
in
these
two
case
reflect
the
differ
in
applic
domain
and
the
error
detect
method
use
they
do
suggest
that
the
major
problem
besid
cleric
error
are
omiss
incorrect
fact
inconsist
and
ambigu
if
we
take
the
averag
of
the
two
data
tabl
it
show
that
all
four
class
of
error
are
veri
signific
and
a
good
fraction
of
error
belong
to
each
of
these
type
thi
impli
that
besid
improv
the
qualiti
of
the
sr
itself
e.g.
no
cleric
error
the
valid
should
focu
on
uncov
these
type
of
error
as
requir
are
gener
textual
document
that
can
not
be
execut
inspect
and
review
are
emin
suitabl
for
requir
valid
consequ
inspect
of
the
sr
frequent
call
requir
review
are
the
most
common
method
of
valid
becaus
requir
specifica-
tion
formal
specifi
someth
that
origin
exist
inform
in
peopl
’
s
mind
requir
valid
must
involv
the
client
and
the
user
due
to
thi
the
requir
review
team
gener
consist
of
client
a
well
a
user
repres
requir
review
is
a
review
by
a
group
of
peopl
to
find
error
and
point
out
other
matter
of
concern
in
the
requir
specif
of
a
system
the
review
group
should
includ
the
author
of
the
requir
document
someon
who
understand
the
need
of
the
client
a
person
of
the
design
team
and
the
person
s
respons
for
maintain
the
requir
document
it
is
also
good
practic
to
includ
some
peopl
not
directli
involv
with
product
develop
like
a
softwar
qualiti
engin
although
the
primari
goal
of
the
review
process
is
to
reveal
ani
error
in
the
requir
such
a
those
discuss
earlier
the
review
process
is
also
use
to
consid
factor
affect
qualiti
such
a
testabl
and
readabl
dure
the
review
one
of
the
job
of
the
review
is
to
uncov
the
requir
that
are
too
subject
and
too
difficult
to
defin
criterion
for
test
that
requir
dure
the
review
the
review
team
must
go
through
each
requir
and
if
ani
error
are
there
then
they
discu
and
agre
on
the
natur
of
the
error
a
detail
inspect
process
may
be
use
we
will
discu
one
such
process
later
in
chapter
requir
review
are
probabl
the
most
effect
mean
for
detect
requir
error
the
data
in
5
about
the
a-33
%
of
the
total
requir
error
detect
were
detect
by
review
process
and
about
45
%
of
the
requir
error
were
detect
dure
the
design
phase
when
the
requir
document
is
use
a
a
refer
for
design
thi
clearli
suggest
that
if
requir
are
review
then
not
onli
a
substanti
fraction
of
the
error
are
detect
by
them
but
a
vast
major
of
the
remain
error
are
detect
soon
afterward
in
the
design
activ
though
requir
review
remain
the
most
commonli
use
and
viabl
mean
for
requir
valid
other
possibl
aris
if
some
special-
purpos
tool
for
model
and
analysi
are
use
for
exampl
if
the
require-
ment
are
written
in
a
formal
specif
languag
or
a
languag
specif
design
for
machin
process
then
it
is
possibl
to
have
tool
to
verifi
some
properti
of
requir
these
tool
will
focu
on
check
for
intern
con-
sistenc
and
complet
which
sometim
lead
to
check
of
extern
com-
plete
howev
these
tool
can
not
directli
check
for
extern
complet
after
all
how
will
a
tool
know
that
some
requir
ha
been
complet
omit
for
thi
reason
requir
review
are
need
even
if
the
re-
quirement
are
specifi
through
a
tool
or
are
in
a
formal
notat
the
main
goal
of
the
requir
process
is
to
produc
the
softwar
require-
ment
specif
sr
which
accur
captur
the
client
’
s
requir
and
which
form
the
basi
of
softwar
develop
and
valid
there
are
three
basic
activ
in
the
requir
process—problem
anal-
ysi
specif
and
valid
the
goal
of
analysi
is
to
understand
the
differ
aspect
of
the
problem
it
context
and
how
it
fit
within
the
client
’
s
organ
in
requir
specif
the
understood
problem
is
speci-
fie
or
written
produc
the
sr
requir
valid
is
done
to
ensur
that
the
requir
specifi
in
the
sr
are
inde
what
are
desir
the
key
desir
characterist
of
an
sr
are
correct
complet
consist
unambigu
verifi
and
rank
for
import
a
good
sr
should
specifi
all
the
function
the
softwar
need
to
support
perform
requir
of
the
system
the
design
constraint
that
exist
and
all
the
extern
interfac
use
case
are
a
popular
approach
for
specifi
function
requir
each
use
case
specifi
the
interact
of
the
system
with
the
primari
actor
who
initi
the
use
case
for
achiev
some
goal
a
use
case
ha
a
precondit
a
normal
scenario
a
well
a
mani
excep-
tional
scenario
therebi
provid
the
complet
behavior
of
the
system
for
develop
use
case
first
the
actor
and
goal
should
be
identifi
then
the
main
success
scenario
then
the
failur
condit
and
final
the
failur
handl
with
data
flow
diagram
a
system
is
analyz
from
the
point
of
view
of
how
data
flow
through
the
system
a
dfd
consist
of
process
and
data
flow
through
the
process
omiss
incorrect
fact
inconsist
and
ambigu
are
the
most
common
error
in
an
sr
for
valid
the
most
commonli
use
method
is
do
a
structur
group
review
of
the
requir
the
basic
goal
of
the
requir
activ
is
to
get
an
sr
that
ha
some
desir
properti
what
is
the
role
of
model
in
develop
such
an
sr
what
are
the
main
compon
of
an
sr
and
what
are
the
main
criterion
for
evalu
the
qualiti
of
an
sr
take
an
on-lin
social
network
site
of
your
choic
list
the
major
use
case
for
thi
system
along
with
the
goal
precondit
and
except
scenario
do
the
same
exercis
for
a
confer
manag
site
which
allow
author
to
submit
paper
program
chair
to
assign
review
and
do
the
final
paper
select
base
on
review
and
review
to
enter
the
review
who
do
you
think
should
be
includ
in
the
requir
review
team
plan
is
the
most
import
project
manag
activ
it
ha
two
ba-
sic
objectives—establish
reason
cost
schedul
and
qualiti
goal
for
the
project
and
to
draw
out
a
plan
to
deliv
the
project
goal
a
project
succe
if
it
meet
it
cost
schedul
and
qualiti
goal
without
the
project
goal
be-
ing
defin
it
is
not
possibl
to
even
declar
if
a
project
ha
succeed
and
without
detail
plan
no
real
monitor
or
control
of
the
project
is
possibl
often
project
are
rush
toward
implement
with
not
enough
effort
spent
on
plan
no
amount
of
technic
effort
later
can
compens
for
lack
of
care
plan
lack
of
proper
plan
is
a
sure
ticket
to
fail-
ure
for
a
larg
softwar
project
for
thi
reason
we
treat
project
plan
a
an
independ
chapter
note
that
we
also
cover
the
monitor
phase
of
the
project
manag
process
a
part
of
plan
a
how
the
project
is
to
be
monitor
is
also
a
part
of
the
plan
phase
the
input
to
the
plan
activ
are
the
requir
specif
and
mayb
the
architectur
descript
a
veri
detail
requir
document
is
not
essenti
for
plan
but
for
a
good
plan
all
the
import
requir
must
be
known
and
it
is
highli
desir
that
key
architectur
decis
have
been
taken
there
are
gener
two
main
output
of
the
plan
activ
the
overal
project
manag
plan
document
that
establish
the
project
goal
on
the
cost
schedul
and
qualiti
front
and
defin
the
plan
for
manag
risk
monitor
the
project
etc
and
the
detail
plan
often
refer
to
a
the
detail
project
schedul
specifi
the
task
that
need
to
be
perform
to
meet
the
goal
the
resourc
who
will
perform
them
and
their
schedul
the
p.
jalot
a
concis
introduct
to
softwar
engin
overal
plan
guid
the
develop
of
the
detail
plan
which
then
becom
the
main
guid
document
dure
project
execut
for
project
monitor
how
to
estim
effort
and
schedul
for
the
project
to
establish
project
goal
and
mileston
and
determin
the
team
size
need
for
execut
the
project
how
to
establish
qualiti
goal
for
the
project
and
prepar
a
qualiti
plan
how
to
identifi
high-prior
risk
that
can
threaten
the
success
of
the
project
and
plan
for
their
mitig
how
to
plan
for
monitor
a
project
use
measur
to
check
if
a
project
is
progress
a
per
the
plan
how
to
develop
a
detail
task
schedul
from
the
overal
estim
and
other
plan
task
done
such
that
if
follow
the
overal
goal
of
the
project
will
be
met
for
a
softwar
develop
project
overal
effort
and
schedul
estim
are
essenti
prerequisit
for
plan
the
project
these
estim
are
need
befor
develop
is
initi
a
they
establish
the
cost
and
schedul
goal
of
the
project
without
these
even
simpl
question
like
is
the
project
late
are
there
cost
overrun
and
when
is
the
project
like
to
complet
can
not
be
answer
a
more
practic
use
of
these
estim
is
in
bid
for
softwar
project
where
cost
and
schedul
estim
must
be
given
to
a
potenti
client
for
the
develop
contract
as
the
bulk
of
the
cost
of
softwar
develop
is
due
to
the
human
effort
cost
can
easili
be
determin
from
effort
by
use
a
suitabl
person-month
cost
valu
effort
and
schedul
estim
are
also
requir
for
determin
the
staf
level
for
a
project
dure
differ
phase
for
the
detail
plan
and
for
project
monitor
the
accuraci
with
which
effort
can
be
estim
clearli
depend
on
the
level
of
inform
avail
about
the
project
the
more
detail
the
infor-
mation
the
more
accur
the
estim
can
be
of
cours
even
with
all
the
inform
avail
the
accuraci
of
the
estim
will
depend
on
the
effec-
tive
and
accuraci
of
the
estim
procedur
or
model
employ
and
the
process
if
from
the
requir
specif
the
estim
approach
can
produc
estim
that
are
within
20
%
of
the
actual
effort
about
two-third
of
the
time
then
the
approach
can
be
consid
good
here
we
discu
two
commonli
use
approach
although
the
effort
for
a
project
is
a
function
of
mani
paramet
it
is
gener
agre
that
the
primari
factor
that
control
the
effort
is
the
size
of
the
project
that
is
the
larger
the
project
the
greater
is
the
effort
requir
the
top-
down
approach
util
thi
and
consid
effort
a
a
function
of
project
size
note
that
to
use
thi
approach
we
need
to
first
determin
the
natur
of
the
function
and
then
to
appli
the
function
we
need
to
estim
the
size
of
the
project
for
which
effort
is
to
be
estim
if
past
product
on
similar
project
is
known
then
it
can
be
use
a
the
estim
function
to
determin
effort
from
the
size
if
product
is
p
kloc/pm
then
the
effort
estim
for
the
project
will
be
size/p
person-
month
note
that
a
product
itself
depend
on
the
size
of
the
project
larger
project
often
have
lower
product
thi
approach
can
work
onli
if
the
size
and
type
of
the
project
are
similar
to
the
set
of
project
from
which
the
product
p
wa
obtain
and
that
in
the
new
project
a
similar
product
can
be
obtain
by
follow
a
process
similar
to
what
wa
use
in
earlier
project
a
more
gener
function
for
determin
effort
from
size
that
is
commonli
use
is
of
the
form
where
a
and
b
are
constant
2
and
project
size
is
gener
in
kloc
size
could
also
be
in
anoth
size
measur
call
function
point
which
can
be
de-
termin
from
requir
valu
for
these
constant
for
an
organ
are
determin
through
regress
analysi
which
is
appli
to
data
about
the
project
that
have
been
perform
in
the
past
for
exampl
watson
and
felix
81
analyz
the
data
of
more
than
60
project
done
at
ibm
feder
system
divis
rang
from
4000
to
467,000
line
of
deliv
sourc
code
and
found
that
if
the
size
estim
is
in
thousand
of
deliv
line
of
code
kloc
the
total
effort
e
in
person-month
pm
can
be
given
by
the
equa-
tion
e
=
5.2
size
.91
in
the
construct
cost
model
cocomo
12
13
for
the
initi
estim
also
call
nomin
estim
the
equat
for
an
or-
ganic
project
is
e
=
3.9
size
.91
though
size
is
the
primari
factor
affect
cost
other
factor
also
have
some
effect
in
the
cocomo
model
after
determin
the
initi
estim
some
other
factor
are
incorpor
for
obtain
the
final
estim
to
do
thi
cocomo
us
a
set
of
1
exampl
of
the
attribut
are
requir
softwar
reliabl
product
complex
analyst
capabl
applic
experi
use
of
modern
tool
and
requir
develop
schedul
each
cost
driver
ha
a
rate
scale
and
for
each
rate
a
multipli
factor
is
provid
for
exampl
for
the
reliabl
the
rate
scale
is
veri
low
low
nomin
high
and
veri
high
the
multipli
factor
for
these
rate
are
.75
.88
1.00
1.15
and
1.40
respect
so
if
the
reliabl
requir
for
the
project
is
judg
to
be
low
then
the
multipli
factor
is
.75
while
if
it
is
judg
to
be
veri
high
the
factor
is
1.40
the
attribut
and
their
multipli
factor
for
differ
rate
are
shown
in
tabl
12
13
the
multipli
factor
for
all
1
eaf
the
final
effort
estim
e
is
obtain
by
multipli
the
initi
estim
by
the
eaf
in
other
word
adjust
is
made
to
the
size-bas
estim
use
the
rate
for
these
1
as
an
exampl
consid
a
system
be
built
for
support
auction
in
a
univers
some
of
the
use
case
of
thi
were
discuss
in
the
previou
chapter
from
the
use
case
and
other
requir
it
is
decid
that
the
system
will
compris
a
few
differ
modul
the
modul
and
their
expect
size
are
the
total
size
of
thi
softwar
is
estim
to
be
if
we
want
to
use
cocomo
for
estim
we
should
estim
the
valu
of
the
differ
cost
driver
suppos
we
expect
that
the
complex
of
the
system
is
high
the
programm
capabl
is
low
and
the
applic
experi
of
the
team
is
low
all
other
factor
have
a
nomin
rate
from
these
the
effort
adjust
factor
eaf
is
the
initi
effort
estim
for
the
project
is
obtain
from
the
relev
equa-
tion
we
have
from
the
overal
estim
estim
of
the
effort
requir
for
the
differ
phase
in
the
project
can
also
be
determin
thi
is
gener
done
by
use
an
effort
distribut
among
phase
the
percentag
of
total
effort
spent
in
a
phase
vari
with
the
type
and
size
of
the
project
and
can
be
obtain
from
data
of
similar
project
in
the
past
a
gener
distribut
of
effort
among
differ
phase
wa
discuss
in
the
previou
chapter
the
effort
distribut
suggest
by
cocomo
for
one
type
of
softwar
system
is
given
in
tabl
it
should
be
note
that
to
use
the
top-down
approach
for
estim
even
if
we
have
a
suitabl
function
we
need
to
have
an
estim
of
the
project
size
in
other
word
we
have
replac
the
problem
of
effort
estim
by
size
estim
one
may
then
ask
whi
not
directli
do
effort
estim
rather
than
size
estim
the
answer
is
that
size
estim
is
often
easier
than
direct
effort
estim
thi
is
mainli
due
to
the
fact
that
the
system
size
can
be
estim
from
the
size
of
it
compon
which
is
often
easier
to
do
by
ad
the
size
estim
of
all
the
compon
similar
properti
doe
not
hold
for
effort
estim
a
effort
for
develop
a
system
is
not
the
sum
of
effort
for
develop
the
compon
a
addit
effort
is
need
for
integr
and
other
such
activ
when
build
a
system
from
develop
compon
clearli
for
top-down
estim
to
work
well
it
is
import
that
good
estim
for
the
size
of
the
softwar
be
obtain
there
is
no
known
simpl
method
for
estim
the
size
accur
when
estim
softwar
size
the
best
way
may
be
to
get
a
much
detail
a
possibl
about
the
softwar
to
be
develop
and
to
be
awar
of
our
bia
when
estim
the
size
of
the
vari-
ou
compon
by
obtain
detail
and
use
them
for
size
estim
the
estim
are
like
to
be
closer
to
the
actual
size
of
the
final
softwar
a
somewhat
differ
approach
for
effort
estim
is
the
bottom-up
approach
in
thi
approach
the
project
is
first
divid
into
task
and
then
estim
for
the
differ
task
of
the
project
are
obtain
from
the
estim
of
the
differ
task
the
overal
estim
is
determin
that
is
the
overal
estim
of
the
project
is
deriv
from
the
estim
of
it
part
thi
type
of
approach
is
also
call
activity-bas
estim
essenti
in
thi
approach
the
size
and
complex
of
the
project
is
captur
in
the
set
of
task
the
project
ha
to
perform
the
bottom-up
approach
lend
itself
to
direct
estim
of
effort
onc
the
project
is
partit
into
smaller
task
it
is
possibl
to
directli
estim
the
effort
requir
for
them
especi
if
task
are
rel
small
one
difficulti
in
thi
approach
is
that
to
get
the
overal
estim
all
the
task
have
to
be
enumer
a
risk
of
bottom-up
method
is
that
one
may
omit
some
activ
also
directli
estim
the
effort
for
some
overhead
task
such
a
project
manag
that
span
the
project
can
be
difficult
if
architectur
of
the
system
to
be
built
ha
been
develop
and
if
past
inform
about
how
effort
is
distribut
over
differ
phase
is
known
then
the
bottom-up
approach
need
not
complet
list
all
the
task
and
a
le
tediou
approach
is
possibl
here
we
describ
one
such
approach
use
in
a
commerci
organ
58
in
thi
approach
the
major
program
or
unit
or
modul
in
the
softwar
be
built
are
first
determin
each
program
unit
is
then
classifi
a
simpl
medium
or
complex
base
on
certain
criterion
for
each
classif
unit
an
averag
effort
for
code
and
unit
test
is
decid
thi
averag
code
effort
can
be
base
on
past
data
from
a
similar
project
from
some
guidelin
or
on
experi
of
peopl
onc
the
number
of
unit
in
the
three
categori
of
complex
is
known
and
the
estim
code
effort
for
each
program
is
select
the
total
code
effort
for
the
project
is
known
from
the
total
code
effort
the
effort
requir
for
the
other
phase
and
activ
in
the
project
is
determin
a
a
percentag
of
code
effort
for
thi
from
inform
about
the
past
perform
of
the
process
the
like
distribut
of
effort
in
differ
phase
of
thi
project
is
determin
thi
distribut
is
then
use
to
determin
the
effort
for
other
phase
and
activ
from
the
effort
estim
of
code
from
these
estim
the
total
effort
for
the
project
is
obtain
thi
approach
lend
itself
to
a
judici
mixtur
of
experi
and
data
if
suitabl
past
data
are
not
avail
for
exampl
if
launch
a
new
type
of
project
one
can
estim
the
code
effort
use
experi
onc
the
natur
of
the
differ
type
of
unit
is
specifi
with
thi
estim
we
can
obtain
the
estim
for
other
activ
by
work
with
some
reason
or
standard
effort
distribut
thi
strategi
can
easili
account
for
activ
that
are
sometim
difficult
to
enumer
earli
but
do
consum
effort
by
budget
effort
for
an
other
or
miscellan
categori
the
procedur
for
estim
can
be
summar
a
the
follow
sequenc
of
step
identifi
modul
in
the
system
and
classifi
them
a
simpl
medium
or
complex
determin
the
averag
code
effort
for
simple/medium/complex
modul
get
the
total
code
effort
use
the
code
effort
of
differ
type
of
modul
and
the
count
for
them
use
the
effort
distribut
for
similar
project
estim
the
effort
for
other
task
and
the
total
effort
refin
the
estim
base
on
project-specif
factor
thi
procedur
us
a
judici
mixtur
of
past
data
in
the
form
of
dis-
tribut
of
effort
and
experi
of
the
programm
thi
approach
is
also
simpl
and
similar
to
how
mani
of
u
plan
ani
project
for
thi
reason
for
small
project
mani
peopl
find
thi
approach
natur
and
comfort
note
that
thi
method
of
classifi
program
into
a
few
categori
and
us-
ing
an
averag
code
effort
for
each
categori
is
use
onli
for
effort
estim
in
detail
schedul
when
a
project
manag
assign
each
unit
to
a
member
of
the
team
for
code
and
budget
time
for
the
activ
characterist
of
the
unit
are
taken
into
account
to
give
more
or
le
time
than
the
averag
after
establish
a
goal
on
the
effort
front
we
need
to
establish
the
goal
for
deliveri
schedul
with
the
effort
estim
in
person-month
it
may
be
tempt
to
pick
ani
project
durat
base
on
conveni
and
then
fix
a
suitabl
team
size
to
ensur
that
the
total
effort
match
the
estim
howev
a
is
well
known
now
person
and
month
are
not
fulli
interchang
in
a
softwar
project
person
and
month
can
be
interchang
arbitrarili
onli
if
all
the
task
in
the
project
can
be
done
in
parallel
and
no
commun
is
need
between
peopl
perform
the
task
thi
is
not
true
for
softwar
projects—ther
are
depend
between
task
e.g.
test
can
onli
be
done
after
code
is
done
and
a
person
perform
some
task
in
a
project
need
to
commun
with
other
perform
other
task
as
brook
ha
point
out
16
...
man
and
month
are
interchang
onli
for
activ
that
requir
no
commun
among
men
like
sow
wheat
or
reap
cotton
thi
is
not
even
approxim
true
of
softwar
howev
for
a
project
with
some
estim
effort
multipl
schedul
or
project
durat
are
inde
possibl
for
exampl
for
a
project
whose
effort
estim
is
5-month
a
total
schedul
of
a
schedul
of
a
is
a
schedul
of
approxim
but
a
schedul
of
5
similarli
no
one
would
execut
the
project
in
2
in
other
word
onc
the
effort
is
fix
there
is
some
flexibl
in
set
the
schedul
by
appropri
staf
the
project
but
thi
flexibl
is
not
unlimit
empir
data
also
suggest
that
no
simpl
equat
between
effort
and
schedul
fit
well
72
the
object
is
to
fix
a
reason
schedul
that
can
be
achiev
if
suit-
abl
number
of
resourc
are
assign
one
method
to
determin
the
overal
schedul
is
to
determin
it
a
a
function
of
effort
such
function
can
be
de-
termin
from
data
from
complet
project
use
statist
techniqu
like
fit
a
regress
curv
through
the
scatter
plot
obtain
by
plot
the
ef-
fort
and
schedul
of
past
project
thi
curv
is
gener
nonlinear
becaus
the
schedul
doe
not
grow
linearli
with
effort
mani
model
follow
thi
approach
2
12
the
ibm
feder
system
divis
found
that
the
total
durat
m
in
calendar
month
can
be
estim
by
m
=
4.1e.36
in
cocomo
the
equat
for
schedul
for
an
organ
type
of
softwar
is
m
=
2.5e.38
as
schedul
is
not
a
function
sole
of
effort
the
schedul
determin
in
thi
manner
is
essenti
a
guidelin
anoth
method
for
check
a
schedul
for
medium-s
project
is
the
rule
of
thumb
call
the
squar
root
check
58
thi
check
suggest
that
the
propos
schedul
can
be
around
the
squar
root
of
the
total
effort
in
person-
month
thi
schedul
can
be
met
if
suitabl
resourc
are
assign
to
the
project
for
exampl
if
the
effort
estim
is
50
person-month
a
schedul
of
about
from
thi
macro
estim
of
schedul
we
can
determin
the
schedul
for
the
major
mileston
in
the
project
to
determin
the
mileston
we
must
first
understand
the
manpow
ramp-up
that
usual
take
place
in
a
project
the
number
of
peopl
that
can
be
gain
util
in
a
softwar
project
tend
to
follow
the
rayleigh
curv
71
72
that
is
in
the
begin
and
the
end
few
peopl
are
need
on
the
project
the
peak
team
size
pt
is
need
somewher
near
the
middl
of
the
project
and
again
fewer
peopl
are
need
after
that
thi
occur
becaus
onli
a
few
peopl
are
need
and
can
be
use
in
the
initi
phase
of
requir
analysi
and
design
the
human
resourc
requir
peak
dure
code
and
unit
test
and
dure
system
test
and
integr
again
fewer
peopl
are
requir
often
the
staf
level
is
not
chang
continu
in
a
project
and
ap-
proxim
of
the
rayleigh
curv
are
use
assign
a
few
peopl
at
the
start
have
the
peak
team
dure
the
code
phase
and
then
leav
a
few
peopl
for
integr
and
system
test
if
we
consid
design
and
analysi
build
and
test
a
three
major
phase
the
manpow
ramp-up
in
project
typic
resembl
the
function
shown
in
figur
58
for
eas
of
schedul
particularli
for
smaller
project
often
the
requir
peopl
are
assign
togeth
around
the
start
of
the
project
thi
approach
can
lead
to
some
peopl
be
unoccupi
at
the
start
and
toward
the
end
thi
slack
time
is
often
use
for
support
project
activ
like
train
and
document
given
the
effort
estim
for
a
phase
we
can
determin
the
durat
of
the
phase
if
we
know
the
manpow
ramp-up
for
these
three
major
phase
the
percentag
of
the
schedul
consum
in
the
build
phase
is
smaller
than
the
percentag
of
the
effort
consum
becaus
thi
phase
involv
more
peopl
similarli
the
percentag
of
the
schedul
consum
in
the
design
and
test
phase
exce
their
effort
percentag
the
exact
schedul
depend
on
the
plan
manpow
ramp-up
and
how
mani
resourc
can
be
use
effect
in
a
phase
on
that
project
gener
speak
design
requir
about
a
quarter
of
the
schedul
build
consum
about
half
and
integr
and
system
test-
ing
consum
the
remain
quarter
cocomo
give
19
%
for
design
62
%
for
program
and
18
%
for
integr
have
set
the
goal
for
effort
and
schedul
the
goal
for
the
third
key
dimens
of
a
project—quality—ne
to
be
defin
howev
unlik
schedul
and
effort
quantifi
qualiti
goal
set
for
a
project
and
then
plan
to
meet
it
is
much
harder
for
effort
and
schedul
goal
we
can
easili
check
if
a
detail
plan
meet
these
goal
e.g.
by
see
if
the
last
task
end
befor
the
target
date
and
if
the
sum
total
of
effort
of
all
task
is
le
than
the
overal
effort
goal
for
qualiti
even
if
we
set
the
goal
in
term
of
expect
deliv
defect
densiti
it
is
not
easi
to
plan
for
achiev
thi
goal
or
for
check
if
a
plan
can
meet
these
goal
henc
often
qualiti
goal
are
specifi
in
term
of
accept
criteria—
the
deliv
softwar
should
final
work
for
all
the
situat
and
test
case
in
the
accept
criterion
further
there
may
even
be
an
accept
criterion
on
the
number
of
defect
that
can
be
found
dure
the
accept
test
for
exampl
no
more
than
n
defect
are
uncov
by
accept
test
the
qualiti
plan
is
the
set
of
quality-rel
activ
that
a
project
plan
to
do
to
achiev
the
qualiti
goal
to
plan
for
qualiti
let
u
first
understand
the
defect
inject
and
remov
cycl
a
it
is
defect
that
determin
the
qualiti
of
the
final
deliv
softwar
softwar
develop
is
a
highli
people-ori
activ
and
henc
it
is
error-pron
in
a
softwar
project
we
start
with
no
defect
there
is
no
soft-
ware
to
contain
defect
defect
are
inject
into
the
softwar
be
built
dure
the
differ
phase
in
the
project
that
is
dure
the
transform
from
user
need
to
softwar
to
satisfi
those
need
defect
are
inject
in
the
transform
activ
undertaken
these
inject
stage
are
primarili
the
requir
specif
the
high-level
design
the
detail
design
and
cod-
ing
to
ensur
that
high-qual
softwar
is
deliv
these
defect
are
remov
through
the
qualiti
control
qc
activ
the
qc
activ
for
defect
re-
moval
includ
requir
review
design
review
code
review
unit
test
integr
test
system
test
accept
test
etc
figur
show
the
process
of
defect
inject
and
remov
as
the
final
goal
is
to
deliv
softwar
with
low
defect
densiti
ensur
qualiti
revolv
around
two
main
theme
reduc
the
defect
be
inject
and
increas
the
defect
be
remov
the
first
is
often
done
through
standard
methodolog
follow
of
good
process
etc.
which
help
reduc
the
chanc
of
error
by
the
project
personnel
there
are
specif
techniqu
for
defect
prevent
also
the
qualiti
plan
therefor
focu
mostli
on
plan
suitabl
qualiti
control
task
for
remov
defect
review
and
test
are
two
most
common
qc
activ
util
in
a
project
wherea
review
are
structur
human-ori
process
test
is
the
process
of
execut
softwar
or
part
of
it
in
an
attempt
to
identifi
de-
fect
the
most
common
approach
for
qualiti
plan
in
a
project
is
to
specifi
the
qc
activ
to
be
perform
in
the
project
and
have
suitabl
guidelin
for
perform
each
of
the
qc
task
such
that
the
chanc
of
meet
the
qual-
iti
goal
are
high
dure
project
execut
these
activ
are
carri
out
in
accord
with
the
defin
procedur
when
thi
approach
is
use
for
ensur
qualiti
make
quantit
claim
can
be
quit
hard
for
quantit
assess
of
the
qualiti
process
metrics-bas
analysi
is
necessari
that
howev
is
an
advanc
topic
beyond
the
scope
of
thi
book
and
inde
mani
organ
henc
for
ensur
qualiti
the
relianc
is
primarili
on
appli
suitabl
qc
techniqu
at
the
right
place
in
the
process
and
use
experi
to
ensur
that
suffici
qc
task
are
done
in
the
project
henc
the
qualiti
plan
for
the
project
is
larg
a
specif
of
which
qc
task
is
to
be
done
and
when
and
what
process
and
guidelin
are
to
be
use
for
perform
the
qc
task
the
choic
depend
on
the
natur
and
goal
and
constraint
of
the
project
typic
the
qc
task
will
be
schedul
task
in
the
detail
schedul
of
the
project
for
exampl
it
will
specifi
what
document
will
be
inspect
what
part
of
the
code
will
be
inspect
and
what
level
of
test
will
be
perform
the
plan
can
be
consider
enhanc
if
some
expect
of
defect
level
that
are
expect
to
be
found
for
the
differ
qualiti
control
task
are
also
mentioned—thes
can
then
aid
the
monitor
of
qualiti
a
the
project
proce
a
softwar
project
is
a
complex
undertak
unforeseen
event
may
have
an
advers
impact
on
a
project
’
s
abil
to
meet
the
cost
schedul
or
qualiti
goal
risk
manag
is
an
attempt
to
minim
the
chanc
of
failur
caus
by
unplan
event
the
aim
of
risk
manag
is
not
to
avoid
get
into
project
that
have
risk
but
to
minim
the
impact
of
risk
in
the
project
that
are
undertaken
a
risk
is
a
probabilist
event—it
may
or
may
not
occur
for
thi
reason
we
frequent
have
an
optimist
tendenc
to
simpli
not
see
risk
or
to
hope
that
they
will
not
occur
social
and
organiz
factor
also
may
stigmat
risk
and
discourag
clear
identif
of
them
19
thi
kind
of
attitud
get
the
project
in
troubl
if
the
risk
event
materi
someth
that
is
like
to
happen
in
a
larg
project
not
surprisingli
then
risk
manag
is
consid
first
among
the
best
practic
for
manag
larg
softwar
project
17
it
first
came
to
the
forefront
with
boehm
’
s
tutori
on
risk
manag
11
sinc
then
sever
book
have
target
risk
manag
for
softwar
18
45
risk
is
defin
a
an
exposur
to
the
chanc
of
injuri
or
loss
that
is
risk
impli
that
there
is
a
possibl
that
someth
neg
may
happen
in
the
context
of
softwar
project
neg
impli
that
there
is
an
advers
effect
on
cost
qualiti
or
schedul
risk
manag
is
the
area
that
tri
to
ensur
that
the
impact
of
risk
on
cost
qualiti
and
schedul
is
minim
risk
manag
can
be
consid
a
deal
with
the
possibl
and
actual
occurr
of
those
event
that
are
not
regular
or
commonli
expect
that
is
they
are
probabilist
the
commonli
expect
event
such
a
peopl
go
on
leav
or
some
requir
chang
are
handl
by
normal
project
manag
so
in
a
sens
risk
manag
begin
where
normal
project
manag
end
it
deal
with
event
that
are
infrequ
somewhat
out
of
the
control
of
the
project
manag
and
which
can
have
a
major
impact
on
the
project
most
project
have
risk
the
idea
of
risk
manag
is
to
minim
the
possibl
of
risk
materi
if
possibl
or
to
minim
the
effect
if
risk
actual
materi
for
exampl
when
construct
a
build
there
is
a
risk
that
the
build
may
later
collaps
due
to
an
earthquak
that
is
the
possibil-
iti
of
an
earthquak
is
a
risk
if
the
build
is
a
larg
residenti
complex
then
the
potenti
cost
in
case
the
earthquak
risk
materi
can
be
enorm
thi
risk
can
be
reduc
by
shift
to
a
zone
that
is
not
earthquake-pron
altern
if
thi
is
not
accept
then
the
effect
of
thi
risk
materi
are
minim
by
suitabl
construct
the
build
the
approach
taken
in
japan
and
california
at
the
same
time
if
a
small
dump
ground
is
to
be
construct
no
such
approach
might
be
follow
a
the
financi
and
other
impact
of
an
actual
earthquak
on
such
a
build
is
so
low
that
it
doe
not
warrant
special
measur
it
should
be
clear
that
risk
manag
ha
to
deal
with
identifi
the
undesir
event
that
can
occur
the
probabl
of
their
occur
and
the
loss
if
an
undesir
event
doe
occur
onc
thi
is
known
strategi
can
be
formul
for
either
reduc
the
probabl
of
the
risk
materi
or
re-
duce
the
effect
of
risk
materi
so
the
risk
manag
revolv
around
risk
assess
and
risk
control
the
goal
of
risk
assess
is
to
priorit
the
risk
so
that
attent
and
resourc
can
be
focus
on
the
more
riski
item
risk
identif
is
the
first
step
in
risk
assess
which
identifi
all
the
differ
risk
for
a
particular
project
these
risk
are
project-depend
and
identifi
them
is
an
exercis
in
envis
what
can
go
wrong
method
that
can
aid
risk
identif
includ
checklist
of
possibl
risk
survey
meet
and
brainstorm
and
review
of
plan
process
and
work
product
45
checklist
of
frequent
occur
risk
are
probabl
the
most
common
tool
for
risk
identification—most
organ
prepar
a
list
of
commonli
occur
risk
for
project
prepar
from
a
survey
of
previou
project
such
a
list
can
form
the
start
point
for
identifi
risk
for
the
current
project
base
on
survey
of
experienc
project
manag
boehm
11
ha
produc
a
list
of
the
top
10
risk
item
like
to
compromis
the
success
of
a
softwar
project
figur
show
some
of
these
risk
along
with
the
techniqu
prefer
by
manag
for
manag
these
risk
top
risk
in
a
commerci
softwar
organ
can
be
found
in
58
the
top-rank
risk
item
is
personnel
shortfal
thi
involv
just
have
fewer
peopl
than
necessari
or
not
have
peopl
with
specif
skill
that
a
project
might
requir
some
of
the
way
to
manag
thi
risk
are
to
get
the
top
talent
possibl
and
to
match
the
need
of
the
project
with
the
skill
of
the
avail
personnel
adequ
train
along
with
have
some
key
personnel
for
critic
area
of
the
project
will
also
reduc
thi
risk
the
second
item
unrealist
schedul
and
budget
happen
veri
frequent
due
to
busi
and
other
reason
it
is
veri
common
that
high-level
manage-
ment
impos
a
schedul
for
a
softwar
project
that
is
not
base
on
the
char-
acterist
of
the
project
and
is
unrealist
underestim
may
also
happen
due
to
inexperi
or
optim
the
next
few
item
are
relat
to
requir
project
run
the
risk
of
develop
the
wrong
softwar
if
the
requir
analysi
is
not
done
properli
and
if
develop
begin
too
earli
similarli
often
improp
user
interfac
may
be
develop
thi
requir
extens
rework
of
the
user
interfac
later
or
the
softwar
benefit
are
not
obtain
becaus
user
are
reluct
to
use
it
gold
plate
refer
to
ad
featur
in
the
softwar
that
are
onli
margin
use
thi
add
unnecessari
risk
to
the
project
becaus
gold
plate
consum
resourc
and
time
with
littl
return
risk
identif
mere
identifi
the
undesir
event
that
might
take
place
dure
the
project
i.e.
enumer
the
unforeseen
event
that
might
occur
it
doe
not
specifi
the
probabl
of
these
risk
materi
nor
the
impact
on
the
project
if
the
risk
inde
materi
henc
the
next
task
are
risk
analysi
and
priorit
in
risk
analysi
the
probabl
of
occurr
of
a
risk
ha
to
be
estim
along
with
the
loss
that
will
occur
if
the
risk
doe
materi
thi
is
often
done
through
discuss
use
experi
and
understand
of
the
situat
though
structur
approach
also
exist
onc
the
probabl
of
risk
materi
and
loss
due
to
materializa-
tion
of
differ
risk
have
been
analyz
they
can
be
priorit
one
approach
for
priorit
is
through
the
concept
of
risk
exposur
re
11
which
is
sometim
call
risk
impact
re
is
defin
by
the
relationship
where
prob
uo
is
the
probabl
of
the
risk
materi
i.e.
undesir
outcom
and
loss
uo
is
the
total
loss
incur
due
to
the
unsatisfactori
outcom
the
loss
is
not
onli
the
direct
financi
loss
that
might
be
incur
but
also
ani
loss
in
term
of
credibl
futur
busi
and
loss
of
properti
or
life
the
re
is
the
expect
valu
of
the
loss
due
to
a
particular
risk
for
risk
priorit
use
re
is
the
higher
the
re
the
higher
the
prioriti
of
the
risk
item
the
main
object
of
risk
manag
is
to
identifi
the
top
few
risk
item
and
then
focu
on
them
onc
a
project
manag
ha
identifi
and
priorit
the
risk
the
top
risk
can
be
easili
identifi
the
question
then
becom
what
to
do
about
them
know
the
risk
is
of
valu
onli
if
you
can
prepar
a
plan
so
that
their
consequ
are
minimal—that
is
the
basic
goal
of
risk
manag
one
obviou
strategi
is
risk
avoid
which
entail
take
action
that
will
avoid
the
risk
altogeth
like
the
earlier
exampl
of
shift
the
build
site
to
a
zone
that
is
not
earthquake-pron
for
some
risk
avoid
might
be
possibl
for
most
risk
the
strategi
is
to
perform
the
action
that
will
either
reduc
the
probabl
of
the
risk
materi
or
reduc
the
loss
due
to
the
risk
materi
these
are
call
risk
mitig
step
to
decid
what
mitig
step
to
take
a
list
of
commonli
use
risk
mitig
step
for
variou
risk
is
veri
use
here
for
the
risk
mention
in
figur
suitabl
risk
mitig
step
are
also
given
note
that
unlik
risk
assess
which
is
larg
an
analyt
exercis
risk
mitig
compris
activ
measur
that
have
to
be
perform
to
minim
the
impact
of
risk
in
other
word
select
a
risk
mitig
step
is
not
just
an
intellectu
exercis
the
risk
mitig
step
must
be
execut
and
monitor
to
ensur
that
the
need
action
are
execut
properli
they
must
be
incorpor
into
the
detail
project
schedul
risk
priorit
and
consequ
plan
are
base
on
the
risk
percept
at
the
time
the
risk
analysi
is
perform
becaus
risk
are
probabilist
event
that
frequent
depend
on
extern
factor
the
threat
due
to
risk
may
chang
with
time
a
factor
chang
clearli
then
the
risk
percept
may
also
chang
with
time
furthermor
the
risk
mitig
step
undertaken
may
affect
the
risk
percept
thi
dynam
impli
that
risk
in
a
project
should
not
be
treat
a
static
and
must
be
monitor
and
reevalu
period
henc
in
addit
to
monitor
the
progress
of
the
plan
risk
mitig
step
a
project
must
period
revisit
the
risk
percept
and
modifi
the
risk
mitig
plan
if
need
risk
monitor
is
the
activ
of
monitor
the
statu
of
variou
risk
and
their
control
activ
one
simpl
approach
for
risk
monitor
is
to
analyz
the
risk
afresh
at
each
major
mileston
and
chang
the
plan
a
need
though
the
concept
of
risk
exposur
is
rich
a
simpl
practic
way
of
do
risk
plan
is
to
simpli
categor
risk
and
the
impact
in
a
few
level
and
then
use
it
for
priorit
thi
approach
is
use
in
mani
organ
here
we
discu
a
simpl
approach
use
in
an
organ
58
in
thi
approach
the
probabl
of
a
risk
occur
is
categor
a
low
medium
or
high
the
risk
impact
can
also
be
classifi
a
low
medium
and
high
with
these
rate
the
follow
simpl
method
for
risk
priorit
can
be
specifi
for
each
risk
rate
the
probabl
of
it
happen
a
low
medium
or
high
for
each
risk
ass
it
impact
on
the
project
a
low
medium
or
high
rank
the
risk
base
on
the
probabl
and
effect
on
the
project
for
exampl
a
high-prob
high-impact
item
will
have
higher
rank
than
a
risk
item
with
a
medium
probabl
and
high
impact
in
case
of
conflict
use
judgment
select
the
top
few
risk
item
for
mitig
and
track
an
exampl
of
thi
approach
is
given
in
tabl
which
show
the
variou
rate
and
the
risk
mitig
step
58
as
we
can
see
the
risk
manag
plan
which
is
essenti
thi
tabl
can
be
veri
brief
and
focus
for
moni-
tore
the
risk
one
way
is
to
redo
risk
manag
plan
at
mileston
give
more
attent
to
the
risk
list
in
the
project
plan
dure
risk
mon-
itor
at
mileston
repriorit
may
occur
and
mitig
plan
for
the
remaind
of
the
project
may
chang
depend
on
the
current
situat
and
the
impact
of
mitig
step
taken
earlier
a
project
manag
plan
is
mere
a
document
that
can
be
use
to
guid
the
execut
of
a
project
even
a
good
plan
is
useless
unless
it
is
properli
execut
and
execut
can
not
be
properli
driven
by
the
plan
unless
it
is
monitor
care
and
the
actual
perform
is
track
against
the
plan
monitor
requir
measur
to
be
made
to
ass
the
situat
of
a
project
if
measur
are
to
be
taken
dure
project
execut
we
must
plan
care
regard
what
to
measur
when
to
measur
and
how
to
measur
henc
measur
plan
is
a
key
element
in
project
plan
in
addit
how
the
measur
data
will
be
analyz
and
report
must
also
be
plan
in
advanc
to
avoid
the
situat
of
collect
data
but
not
know
what
to
do
with
it
without
care
plan
for
data
collect
and
it
analysi
neither
is
like
to
happen
in
thi
section
we
discu
the
issu
of
measur
and
project
track
the
basic
purpos
of
measur
in
a
project
is
to
provid
data
to
project
manag
about
the
project
’
s
current
state
such
that
they
can
effect
monitor
and
control
the
project
and
ensur
that
the
project
goal
are
met
as
project
goal
are
establish
in
term
of
softwar
to
be
deliv
cost
schedul
and
qualiti
for
monitor
the
state
of
a
project
size
effort
schedul
and
defect
are
the
basic
measur
that
are
need
43
75
schedul
is
one
of
the
most
import
metric
becaus
most
project
are
driven
by
schedul
and
deadlin
onli
by
monitor
the
actual
schedul
can
we
properli
ass
if
the
project
is
on
time
or
if
there
is
a
delay
it
is
howev
easi
to
measur
becaus
calendar
time
is
usual
use
in
all
plan
effort
is
the
main
resourc
consum
in
a
softwar
project
consequ
track
of
effort
is
a
key
activ
dure
monitor
it
is
essenti
for
evalu
whether
the
project
is
execut
within
budget
for
effort
data
some
type
of
timesheet
system
is
need
where
each
person
work
on
the
project
enter
the
amount
of
time
spent
on
the
project
for
better
monitor
the
effort
spent
on
variou
task
should
be
log
separ
gener
effort
is
record
through
some
on-lin
system
like
the
weekli
activ
report
system
in
57
which
allow
a
person
to
record
the
amount
of
time
spent
against
a
particular
activ
in
a
project
at
ani
point
total
effort
on
an
activ
can
be
aggreg
becaus
defect
have
a
direct
relationship
to
softwar
qualiti
track
of
defect
is
critic
for
ensur
qualiti
a
larg
softwar
project
may
includ
thousand
of
defect
that
are
found
by
differ
peopl
at
differ
stage
just
to
keep
track
of
the
defect
found
and
their
statu
defect
must
be
log
and
their
closur
track
if
defect
found
are
be
log
monitor
can
focu
on
how
mani
defect
have
been
found
so
far
what
percentag
of
defect
are
still
open
and
other
issu
defect
track
is
consid
one
of
the
best
practic
for
manag
a
project
17
size
is
anoth
fundament
metric
becaus
it
repres
progress
toward
deliv
the
desir
function
and
mani
data
for
exampl
deliv
de-
fect
densiti
are
normal
with
respect
to
size
the
size
of
deliv
softwar
can
be
measur
in
term
of
loc
which
can
be
determin
through
the
use
of
regular
editor
and
line
counter
or
function
point
at
a
more
gross
level
just
the
number
of
modul
or
number
of
featur
might
suffic
for
effect
monitor
a
project
must
plan
for
collect
these
measure-
ment
most
often
organ
provid
tool
and
polici
support
for
record
thi
basic
data
which
is
then
avail
to
project
manag
for
track
the
main
goal
of
project
manag
for
monitor
a
project
is
to
get
visibl
into
the
project
execut
so
that
they
can
determin
whether
ani
action
need
to
be
taken
to
ensur
that
the
project
goal
are
met
as
project
goal
are
in
term
of
effort
schedul
and
qualiti
the
focu
of
monitor
is
on
these
aspect
differ
level
of
monitor
might
be
done
for
a
project
the
three
main
level
of
monitor
are
activ
level
statu
report
and
mileston
analysi
measur
taken
on
the
project
are
employ
for
monitor
activity-level
monitor
ensur
that
each
activ
in
the
detail
schedul
ha
been
done
properli
and
within
time
thi
type
of
monitor
may
be
done
daili
in
project
team
meet
or
by
the
project
manag
check
the
statu
of
all
the
task
schedul
to
be
complet
on
that
day
a
complet
task
is
often
mark
a
100
%
complet
in
detail
schedule—thi
is
use
by
tool
like
the
microsoft
project
to
track
the
percentag
complet
of
the
overal
project
or
a
higher-level
task
thi
monitor
is
to
ensur
that
the
project
continu
to
proceed
a
per
the
plan
schedul
statu
report
are
often
prepar
weekli
to
take
stock
of
what
ha
happen
and
what
need
to
be
done
statu
report
typic
contain
a
summari
of
the
activ
success
complet
sinc
the
last
statu
report
ani
activ
that
have
been
delay
ani
issu
in
the
project
that
need
attent
and
if
everyth
is
in
place
for
the
next
week
again
the
purpos
of
thi
is
to
ensur
that
the
project
is
proceed
a
per
the
plan
schedul
the
mileston
analysi
is
done
at
each
mileston
or
everi
few
week
if
mileston
are
too
far
apart
and
is
more
elabor
analysi
of
actual
versu
estim
for
effort
and
schedul
is
often
includ
in
the
mileston
analysi
if
the
deviat
is
signific
it
may
impli
that
the
project
may
run
into
troubl
and
might
not
meet
it
object
thi
situat
call
for
project
manag
to
understand
the
reason
for
the
variat
and
to
appli
correct
and
prevent
action
if
necessari
defect
found
by
differ
qualiti
control
task
and
the
number
of
defect
fix
may
also
be
report
thi
report
monitor
the
progress
of
the
project
with
respect
to
all
the
goal
the
activ
discuss
so
far
result
in
a
project
manag
plan
document
that
establish
the
project
goal
for
effort
schedul
and
qualiti
and
defin
the
approach
for
risk
manag
ensur
qualiti
and
project
monitor
now
thi
overal
plan
ha
to
be
translat
into
a
detail
action
plan
which
can
then
be
follow
in
the
project
and
which
if
follow
will
lead
to
a
success
project
that
is
we
need
to
develop
a
detail
plan
or
schedul
of
what
to
do
when
such
that
follow
thi
plan
will
lead
to
deliv
the
softwar
with
expect
qualiti
and
within
cost
and
schedul
wherea
the
overal
plan
document
is
typic
prepar
at
the
start
of
the
project
and
is
rel
static
the
detail
plan
is
a
dynam
document
that
reflect
the
current
plan
of
the
project
the
detail
plan
is
what
assign
work
item
to
individu
member
of
the
team
for
the
detail
schedul
the
major
phase
identifi
dure
effort
and
schedul
estim
are
broken
into
small
schedul
activ
in
a
hierarchi-
cal
manner
for
exampl
the
detail
design
phase
can
be
broken
into
task
for
develop
the
detail
design
for
each
modul
review
of
each
detail
design
fix
of
defect
found
and
so
on
for
each
detail
task
the
project
manag
estim
the
time
requir
to
complet
it
and
assign
a
suitabl
resourc
so
that
the
overal
schedul
is
met
and
the
overal
effort
also
match
in
addit
to
the
engin
task
that
are
the
outcom
of
the
develop
process
the
qc
task
identifi
in
the
qualiti
plan
the
monitor
activ
defin
in
the
monitor
plan
and
the
risk
mitig
activ
should
also
be
schedul
at
each
level
of
refin
the
project
manag
determin
the
effort
for
the
overal
task
from
the
detail
schedul
and
check
it
against
the
effort
estim
if
thi
detail
schedul
is
not
consist
with
the
overal
schedul
and
effort
estim
the
detail
schedul
must
be
chang
if
it
is
found
that
the
best
detail
schedul
can
not
match
the
mileston
effort
and
schedul
then
the
earlier
estim
must
be
revis
thu
schedul
is
an
iter
process
gener
the
project
manag
refin
the
task
to
a
level
so
that
the
lowest-level
activ
can
be
schedul
to
occupi
no
more
than
a
few
day
from
a
singl
resourc
activ
relat
to
task
such
a
project
manag
co-
ordin
databas
manag
and
configur
manag
may
also
be
list
in
the
schedul
even
though
these
activ
have
le
direct
effect
on
de-
termin
the
schedul
becaus
they
are
ongo
task
rather
than
schedul
activ
nevertheless
they
consum
resourc
and
henc
are
often
includ
in
the
project
schedul
rare
will
a
project
manag
complet
the
detail
schedul
of
the
entir
project
all
at
onc
onc
the
overal
schedul
is
fix
detail
for
a
phase
may
onli
be
done
at
the
start
of
that
phase
for
detail
schedul
tool
like
microsoft
project
or
a
spreadsheet
can
be
veri
use
for
each
lowest-level
activ
the
project
manag
specifi
the
effort
durat
start
date
end
date
and
resourc
depend
between
activ
due
either
to
an
inher
depend
for
exampl
you
can
conduct
a
unit
test
plan
for
a
program
onli
after
it
ha
been
code
or
to
a
resource-
relat
depend
the
same
resourc
is
assign
two
task
may
also
be
specifi
from
these
tool
the
overal
effort
and
schedul
of
higher-level
task
can
be
determin
a
detail
project
schedul
is
never
static
chang
may
be
need
becaus
the
actual
progress
in
the
project
may
be
differ
from
what
wa
plan
becaus
newer
task
are
ad
in
respons
to
chang
request
or
becaus
of
other
unforeseen
situat
chang
are
done
a
and
when
the
need
aris
the
final
schedul
frequent
maintain
use
some
suitabl
tool
is
often
the
most
live
project
plan
document
dure
the
project
if
plan
must
be
chang
and
addit
activ
must
be
done
after
the
decis
is
made
the
chang
must
be
reflect
in
the
detail
schedul
a
thi
reflect
the
task
actual
plan
to
be
perform
henc
the
detail
schedul
becom
the
main
document
that
track
the
activ
and
schedul
it
should
be
note
that
onli
the
number
of
resourc
is
decid
dure
the
overal
project
plan
howev
detail
schedul
can
be
done
effec-
tive
onli
after
actual
assign
of
peopl
ha
been
done
a
task
assign
need
inform
about
the
capabl
of
the
team
member
in
our
discus-
sion
abov
we
have
implicitli
assum
that
the
project
’
s
team
is
led
by
a
project
manag
who
doe
the
plan
and
task
assign
thi
form
of
hi-
erarch
team
organ
is
fairli
common
and
wa
earlier
call
the
chief
programm
team
as
an
exampl
consid
the
exampl
of
a
project
from
58
the
overal
effort
estim
for
thi
project
is
50-day
or
about
2-month
thi
estim
wa
done
use
the
bottom-up
approach
discuss
earlier
the
custom
gave
approxim
5
..
becaus
thi
is
more
than
the
squar
root
of
effort
in
person-month
thi
schedul
wa
accept
henc
these
defin
the
effort
and
schedul
goal
of
the
project
the
mileston
are
determin
by
use
the
effort
estim
for
the
phase
and
an
estim
of
the
number
of
resourc
avail
tabl
show
the
high-
level
schedul
of
the
project
thi
project
us
the
rup
process
in
which
initi
requir
and
design
is
done
in
two
iter
and
the
develop
is
done
in
three
iter
the
overal
project
durat
with
these
mileston
is
140
day
thi
high-level
schedul
is
an
outcom
of
the
overal
project
plan
and
is
not
suitabl
for
assign
resourc
and
detail
plan
for
detail
schedul
these
task
are
broken
into
schedul
activ
in
thi
way
the
schedul
also
becom
a
checklist
of
task
for
the
project
as
mention
abov
thi
explod
of
top-level
activ
is
not
done
fulli
at
the
start
but
rather
take
place
mani
time
dure
the
project
tabl
show
part
of
the
detail
schedul
of
the
construction-iter
for
each
activ
the
tabl
specifi
the
activ
by
a
short
name
the
modul
to
which
the
activ
is
contribut
and
the
effort
the
durat
may
also
be
specifi
for
each
task
how
much
is
complet
is
given
in
the
%
complet
column
thi
inform
is
use
for
activ
track
the
detail
schedul
also
specifi
the
resourc
to
which
the
task
is
assign
specifi
by
initi
of
the
person
sometim
the
predecessor
of
the
activ
the
activ
upon
which
the
task
depend
are
also
specifi
thi
inform
help
in
determin
the
critic
path
and
the
critic
resourc
thi
project
final
had
a
total
of
about
32
project
plan
serf
two
purpos
to
set
the
overal
goal
or
expect
for
the
project
and
the
overal
approach
for
manag
the
project
and
to
schedul
task
to
be
done
such
that
the
goal
are
met
in
overal
plan
effort
and
schedul
estim
are
done
to
establish
the
cost
and
schedul
goal
for
the
project
a
well
a
key
mileston
project
qualiti
plan
and
risk
manag
plan
establish
approach
for
achiev
qualiti
goal
and
ensur
that
the
project
doe
not
fail
in
the
face
of
risk
in
the
detail
schedul
task
for
achiev
each
mileston
are
identifi
and
schedul
to
be
execut
by
specif
team
member
such
that
the
overal
schedul
and
effort
for
differ
mileston
is
met
in
a
top-down
approach
for
estim
effort
for
the
project
the
effort
is
estim
from
the
size
estim
which
may
be
refin
use
other
char-
acterist
of
the
project
effort
for
differ
phase
is
determin
from
the
overal
effort
use
effort
distribut
data
cocomo
is
one
model
that
us
thi
approach
in
a
bottom-up
approach
to
estim
the
modul
to
be
built
are
identifi
first
and
then
use
an
averag
effort
for
code
such
modul
the
overal
code
effort
is
determin
from
code
effort
effort
for
other
phase
and
overal
project
are
determin
use
the
effort
distribut
data
some
flexibl
exist
in
set
the
schedul
goal
for
a
project
an
overal
schedul
can
be
determin
a
a
function
of
effort
and
then
adjust
to
meet
the
project
need
and
constraint
onc
a
reason
schedul
is
chosen
the
staf
requir
of
the
project
are
determin
use
the
project
’
s
effort
schedul
for
mileston
are
determin
from
effort
estim
and
the
effect
team
size
in
differ
phase
with
estim
and
schedul
the
effort
and
schedul
goal
for
the
project
are
establish
set
measur
qualiti
goal
for
a
project
is
harder
the
qualiti
goal
can
be
set
in
term
of
perform
dure
accept
test
a
qualiti
plan
consist
of
qualiti
control
task
that
should
be
perform
in
the
project
to
achiev
the
qualiti
goal
a
project
can
have
risk
and
to
meet
project
goal
under
the
presenc
of
risk
requir
proper
risk
manag
risk
are
those
event
which
may
or
may
not
occur
but
if
they
do
occur
they
can
have
a
neg
impact
on
the
project
risk
can
be
priorit
base
on
the
expect
loss
from
a
risk
which
is
a
combin
of
the
probabl
of
the
risk
and
the
total
possibl
loss
due
to
risk
materi
for
high-prior
risk
activ
are
plan
dure
normal
project
execut
such
that
if
the
risk
do
materi
their
effect
is
minim
the
progress
of
the
project
need
to
be
monitor
use
suitabl
measure-
ment
so
correct
action
can
be
taken
when
need
the
measur
commonli
use
for
monitor
are
actual
schedul
effort
consum
defect
found
and
the
size
of
the
product
statu
report
and
mileston
report
on
actual
vs.
estim
on
effort
and
schedul
activ
that
got
miss
defect
found
so
far
and
risk
can
suffic
to
effect
monitor
the
perform
of
a
project
with
respect
to
it
plan
the
overal
project
manag
plan
document
contain
the
effort
sched-
ule
and
qualiti
goal
and
plan
for
qualiti
monitor
and
risk
manage-
ment
set
the
overal
context
for
execut
the
overal
schedul
is
broken
into
a
detail
schedul
of
task
to
be
done
so
a
to
meet
the
goal
and
constraint
these
task
are
assign
to
specif
team
member
with
identifi
start
and
end
date
the
sched-
ule
ha
to
be
such
that
it
is
consist
with
the
overal
schedul
and
effort
estim
task
plan
for
qualiti
monitor
and
risk
manag
are
also
schedul
in
the
detail
schedul
thi
detail
schedul
lay
out
the
path
the
project
should
follow
in
order
to
achiev
the
project
object
it
is
the
most
live
project
plan
document
and
ani
chang
in
the
project
plan
must
be
reflect
suitabl
in
the
detail
schedul
what
is
the
role
of
effort
estim
in
a
project
and
whi
is
it
import
to
do
thi
estim
earli
if
an
architectur
of
the
propos
system
ha
been
design
specifi
the
major
compon
in
the
system
and
you
have
sourc
code
of
similar
compon
avail-
abl
in
your
organ
’
s
repositori
which
method
will
you
use
for
estim
suppos
an
organ
plan
to
use
cocomo
for
effort
estim
but
it
want
to
use
onli
three
cost
drivers—product
complex
programm
capabl
and
develop
schedul
in
thi
situat
from
the
initi
estim
by
how
much
can
the
final
estim
vari
whi
are
all
combin
of
peopl
and
month
that
are
consist
with
the
effort
estim
not
feasibl
a
custom
ask
you
to
complet
a
project
whose
effort
estim
is
e
in
time
t
how
will
you
decid
whether
to
accept
thi
schedul
or
not
for
a
group
student
project
be
done
in
a
semest
cours
list
the
major
risk
that
a
typic
project
will
face
and
risk
mitig
strategi
for
the
high-prior
risk
suppos
you
make
a
detail
schedul
for
your
project
whose
effort
and
schedul
estim
for
variou
mileston
have
been
done
in
the
project
plan
how
will
you
check
if
the
detail
schedul
is
consist
with
the
overal
plan
what
will
you
do
if
it
is
not
ani
complex
system
is
compos
of
subsystem
that
interact
under
the
control
of
system
design
such
that
the
system
provid
the
expect
behavior
when
design
such
a
system
therefor
the
logic
approach
is
to
identifi
the
sub-
system
that
should
compos
the
system
the
interfac
of
these
subsystem
and
the
rule
for
interact
between
the
subsystem
thi
is
what
softwar
architectur
aim
to
do
softwar
architectur
is
a
rel
recent
area
as
the
softwar
system
increasingli
becom
distribut
and
more
complex
architectur
becom
an
import
step
in
build
the
system
due
to
a
wide
rang
of
option
now
avail
for
how
a
system
may
be
configur
and
connect
care
de-
sign
the
architectur
becom
veri
import
it
is
dure
the
architectur
design
where
choic
like
use
some
type
of
middlewar
or
some
type
of
back-
end
databas
or
some
type
of
server
or
some
type
of
secur
compon
are
made
architectur
is
also
the
earliest
place
when
properti
like
reliabl
and
perform
can
be
evalu
for
the
system
a
capabl
that
is
increasingli
becom
import
the
key
role
an
architectur
descript
play
in
a
softwar
project
the
multipl
architectur
view
that
can
be
use
to
specifi
differ
struc-
tural
aspect
of
the
system
be
built
the
compon
and
connector
architectur
of
a
system
and
how
it
can
be
express
p.
jalot
a
concis
introduct
to
softwar
engin
differ
style
that
have
been
propos
for
compon
and
connector
view
that
can
be
use
to
design
the
architectur
of
the
propos
system
what
is
architectur
gener
speak
architectur
of
a
system
provid
a
veri
high
level
view
of
the
part
of
the
system
and
how
they
are
relat
to
form
the
whole
system
that
is
architectur
partit
the
system
in
logic
part
such
that
each
part
can
be
comprehend
independ
and
then
describ
the
system
in
term
of
these
part
and
the
relationship
between
these
part
ani
complex
system
can
be
partit
in
mani
differ
way
each
pro-
vide
a
use
view
and
each
have
differ
type
of
logic
part
the
same
hold
true
for
a
softwar
system—ther
is
no
uniqu
structur
of
the
system
that
can
be
describ
by
it
architectur
there
are
mani
possibl
structur
due
to
thi
possibl
of
have
multipl
structur
one
of
the
most
wide
accept
definit
of
softwar
architectur
is
that
the
softwar
architectur
of
a
system
is
the
structur
or
structur
of
the
system
which
compris
softwar
el-
ement
the
extern
visibl
properti
of
those
element
and
the
relationship
among
them
6
thi
definit
impli
that
for
element
in
an
architectur
we
are
onli
interest
in
those
abstract
that
specifi
those
properti
that
other
element
can
assum
to
exist
and
that
are
need
to
specifi
relationship
detail
on
how
these
properti
are
support
are
not
need
for
architectur
thi
is
an
import
capabl
that
allow
architectur
descript
to
repre-
sent
a
complex
system
in
a
succinct
form
that
is
easili
comprehend
an
architectur
descript
of
a
system
will
therefor
describ
the
differ
structur
of
the
system
the
next
natur
question
is
whi
should
a
team
build
a
softwar
system
for
some
custom
be
interest
in
creat
and
document
the
structur
of
the
propos
system
some
of
the
import
us
that
softwar
architectur
descript
play
are
6
23
54
understand
and
commun
an
architectur
descript
is
primar-
ili
to
commun
the
architectur
to
it
variou
stakehold
which
in-
clude
the
user
who
will
use
the
system
the
client
who
commiss
the
system
the
builder
who
will
build
the
system
and
of
cours
the
archi-
tect
through
thi
descript
the
stakehold
gain
an
understand
of
some
macro
properti
of
the
system
and
how
the
system
intend
to
ful-
fill
the
function
and
qualiti
requir
as
the
descript
provid
a
common
languag
between
stakehold
it
also
becom
the
vehicl
for
negoti
and
agreement
among
the
stakehold
who
may
have
conflict-
ing
goal
reus
the
softwar
engin
world
ha
for
a
long
time
been
work
toward
a
disciplin
where
softwar
can
be
assembl
from
part
that
are
develop
by
differ
peopl
and
are
avail
for
other
to
use
if
one
want
to
build
a
softwar
product
in
which
exist
compon
may
be
reus
then
architectur
becom
the
key
point
at
which
reus
at
the
high-
est
level
is
decid
the
architectur
ha
to
be
chosen
in
a
manner
such
that
the
compon
which
have
to
be
reus
can
fit
properli
and
togeth
with
other
compon
that
may
be
develop
architectur
also
facili-
tate
reus
among
product
that
are
similar
and
build
product
famili
such
that
the
common
part
of
these
differ
but
similar
product
can
be
reus
architectur
help
specifi
what
is
fix
and
what
is
variabl
in
these
differ
product
and
can
help
minim
the
set
of
variabl
element
such
that
differ
product
can
share
softwar
part
to
the
maximum
again
it
is
veri
hard
to
achiev
thi
type
of
reus
at
a
detail
level
construct
and
evolut
as
architectur
partit
the
system
into
part
some
architecture-provid
partit
can
natur
be
use
for
construct
the
system
which
also
requir
that
the
system
be
broken
into
part
such
that
differ
team
or
individu
can
separ
work
on
differ
part
a
suitabl
partit
in
the
architectur
can
provid
the
project
with
the
part
that
need
to
be
built
to
build
the
system
as
almost
by
definit
the
part
specifi
in
an
architectur
are
rel
indepen-
dent
the
depend
between
part
come
through
their
relationship
they
can
be
built
independ
analysi
it
is
highli
desir
if
some
import
properti
about
the
be-
havior
of
the
system
can
be
determin
befor
the
system
is
actual
built
thi
will
allow
the
design
to
consid
altern
and
select
the
one
that
will
best
suit
the
need
mani
engin
disciplin
use
model
to
analyz
design
of
a
product
for
it
cost
reliabl
perform
etc
archi-
tectur
open
such
possibl
for
softwar
also
it
is
possibl
though
the
method
are
not
fulli
develop
or
standard
yet
to
analyz
or
predict
the
properti
of
the
system
be
built
from
it
architectur
for
exam-
ple
the
reliabl
or
the
perform
of
the
system
can
be
analyz
such
an
analysi
can
help
determin
whether
the
system
will
meet
the
qualiti
and
perform
requir
and
if
not
what
need
to
be
done
to
meet
the
requir
for
exampl
while
build
a
websit
for
shop
it
is
possibl
to
analyz
the
respons
time
or
throughput
for
a
propos
archi-
tectur
given
some
assumpt
about
the
request
load
and
hardwar
it
can
then
be
decid
whether
the
perform
is
satisfactori
or
not
and
if
not
what
new
capabl
should
be
ad
for
exampl
a
differ
archi-
tectur
or
a
faster
server
for
the
back
end
to
improv
it
to
a
satisfactori
level
not
all
of
these
us
may
be
signific
in
a
project
and
which
of
these
us
is
pertin
to
a
project
depend
on
the
natur
of
the
project
in
some
project
commun
may
be
veri
import
but
a
detail
perform
analysi
may
be
unnecessari
becaus
the
system
is
too
small
or
is
meant
for
onli
a
few
user
in
some
other
system
perform
analysi
may
be
the
primari
use
of
architectur
there
is
a
gener
view
emerg
that
there
is
no
uniqu
architectur
of
a
system
the
definit
that
we
have
adopt
given
abov
also
express
thi
sentiment
consequ
there
is
no
one
architectur
draw
of
the
system
the
situat
is
similar
to
that
of
civil
construct
a
disciplin
that
is
the
origin
user
of
the
concept
of
architectur
and
from
where
the
concept
of
softwar
architectur
ha
been
borrow
for
a
build
if
you
want
to
see
the
floor
plan
you
are
shown
one
set
of
draw
if
you
are
an
electr
engin
and
want
to
see
how
the
electr
distribut
ha
been
plan
you
will
be
shown
anoth
set
of
draw
and
if
you
are
interest
in
safeti
and
firefight
anoth
set
of
draw
is
use
these
draw
are
not
independ
of
each
other—they
are
all
about
the
same
build
howev
each
draw
provid
a
differ
view
of
the
build
a
view
that
focu
on
explain
one
aspect
of
the
build
and
tri
to
a
good
job
at
that
while
not
divulg
much
about
the
other
aspect
and
no
one
draw
can
express
all
the
differ
aspects—such
a
draw
will
be
too
complex
to
be
of
ani
use
similar
is
the
situat
with
softwar
architectur
in
softwar
the
differ
draw
are
call
view
a
view
repres
the
system
a
compos
of
some
type
of
element
and
relationship
between
them
which
element
are
use
by
a
view
depend
on
what
the
view
want
to
highlight
differ
view
expos
differ
properti
and
attribut
therebi
allow
the
stakehold
and
ana-
lyst
to
properli
evalu
those
attribut
for
the
system
by
focus
onli
on
some
aspect
of
the
system
a
view
reduc
the
complex
that
a
reader
ha
to
deal
with
at
a
time
therebi
aid
system
understand
and
analysi
a
view
describ
a
structur
of
the
system
we
will
use
these
two
concepts—
view
and
structures—interchang
we
will
also
use
the
term
architectur
view
to
refer
to
a
view
mani
type
of
view
have
been
propos
most
of
the
propos
view
gener
belong
to
one
of
these
three
type
6
23
in
a
modul
view
the
system
is
view
a
a
collect
of
code
unit
each
implement
some
part
of
the
system
function
that
is
the
main
element
in
thi
view
are
modul
these
view
are
code-bas
and
do
not
explicitli
rep-
resent
ani
runtim
structur
of
the
system
exampl
of
modul
are
packag
a
class
a
procedur
a
method
a
collect
of
function
and
a
collect
of
class
the
relationship
between
these
modul
are
also
code-bas
and
de-
pend
on
how
code
of
a
modul
interact
with
anoth
modul
exampl
of
relationship
in
thi
view
are
is
a
part
of
i.e.
modul
b
is
a
part
of
modul
a
us
or
depend
on
a
modul
a
us
servic
of
modul
b
to
perform
it
own
function
and
correct
of
modul
a
depend
on
correct
of
modul
b
and
gener
or
special
a
modul
b
is
a
gener
of
a
modul
a
in
a
compon
and
connector
c
&
c
view
the
system
is
view
a
a
col-
lection
of
runtim
entiti
call
compon
that
is
a
compon
is
a
unit
which
ha
an
ident
in
the
execut
system
object
not
class
a
collec-
tion
of
object
and
a
process
are
exampl
of
compon
while
execut
compon
need
to
interact
with
other
to
support
the
system
servic
con-
nector
provid
mean
for
thi
interact
exampl
of
connector
are
pipe
and
socket
share
data
can
also
act
a
a
connector
if
the
compon
use
some
middlewar
to
commun
and
coordin
then
the
middlewar
is
a
connector
henc
the
primari
element
of
thi
view
are
compon
and
con-
nector
an
alloc
view
focu
on
how
the
differ
softwar
unit
are
alloc
to
resourc
like
the
hardwar
file
system
and
peopl
that
is
an
alloc
view
specifi
the
relationship
between
softwar
element
and
element
of
the
environ
in
which
the
softwar
system
is
execut
they
expos
structur
properti
like
which
process
run
on
which
processor
and
how
the
system
file
are
organ
on
a
file
system
an
architectur
descript
consist
of
view
of
differ
type
with
each
view
expos
some
structur
of
the
system
modul
view
show
how
the
soft-
ware
is
structur
a
a
set
of
implement
unit
c
&
c
view
show
how
the
softwar
is
structur
a
interact
runtim
element
and
alloc
view
show
how
softwar
relat
to
nonsoftwar
structur
these
three
type
of
view
of
the
same
system
form
the
architectur
of
the
system
note
that
the
differ
view
are
not
unrel
they
all
repres
the
same
system
henc
there
are
relationship
between
element
in
one
view
and
ele-
ment
in
anoth
view
these
relationship
may
be
simpl
or
may
be
complex
for
exampl
the
relationship
between
modul
and
compon
may
be
one
to
one
in
that
one
modul
implement
one
compon
on
the
other
hand
it
may
be
quit
complex
with
a
modul
be
use
by
multipl
compon
and
a
compon
use
multipl
modul
while
creat
the
differ
view
the
design
have
to
be
awar
of
thi
relationship
the
next
question
is
what
are
the
standard
view
that
should
be
express
for
describ
the
architectur
of
a
system
to
answer
thi
question
the
analog
with
build
may
again
help
if
one
is
build
a
simpl
small
hous
then
perhap
there
is
no
need
to
have
a
separ
view
describ
the
emerg
and
the
fire
system
similarli
if
there
is
no
air
condit
in
the
build
there
need
not
be
ani
view
for
that
on
the
other
hand
an
offic
build
will
perhap
requir
both
of
these
view
in
addit
to
other
view
describ
plumb
space
wire
etc
howev
despit
the
fact
that
there
are
multipl
draw
show
differ
view
of
a
build
there
is
one
view
that
predomin
in
construction—that
of
physic
structur
thi
view
form
the
basi
of
other
view
in
that
other
view
can
not
realli
be
complet
unless
thi
view
can
be
done
other
view
may
or
may
not
be
need
for
construct
a
build
depend
on
the
natur
of
the
project
henc
in
a
sens
the
view
give
the
build
structur
may
be
consid
a
the
primari
view
in
that
it
is
almost
alway
use
and
other
view
reli
on
thi
view
substanti
the
view
also
captur
perhap
the
most
import
properti
to
be
analyz
in
the
earli
stage
name
that
of
space
organ
the
situat
with
softwar
architectur
is
also
somewhat
similar
as
we
have
said
depend
on
what
properti
are
of
interest
differ
view
of
the
softwar
architectur
are
need
howev
of
these
view
the
c
&
c
view
ha
becom
the
defacto
primari
view
one
which
is
almost
alway
prepar
when
an
architectur
is
design
some
definit
even
view
architectur
onli
in
term
of
c
&
c
view
in
thi
chapter
we
will
focu
primarili
on
the
c
&
c
view
a
note
about
relationship
between
architectur
and
design
is
in
order
as
partit
a
system
into
smaller
part
and
compos
the
system
from
these
part
is
also
a
goal
of
design
a
natur
question
is
what
is
the
differ
between
a
design
and
architectur
a
both
aim
to
achiev
similar
object
and
seem
to
fundament
reli
on
the
divid
and
conquer
rule
first
it
should
be
clear
that
architectur
is
a
design
in
that
it
is
in
the
solut
domain
and
talk
about
the
structur
of
the
propos
system
furthermor
an
architectur
view
give
a
high-level
view
of
the
system
reli
on
abstract
to
convey
the
meaning—
someth
which
design
also
doe
so
architectur
is
design
we
can
view
architectur
a
a
veri
high-level
design
focus
onli
on
main
compon
and
the
architectur
activ
a
the
first
step
in
design
what
we
term
a
design
is
realli
about
the
modul
that
will
eventu
exist
a
code
that
is
they
are
a
more
concret
represent
of
the
implement
though
not
yet
an
implement
consequ
dure
design
lower-level
issu
like
the
data
structur
file
and
sourc
of
data
have
to
be
address
while
such
issu
are
not
gener
signific
at
the
architectur
level
we
also
take
the
view
that
design
can
be
consid
a
provid
the
modul
view
of
the
architectur
of
the
system
the
boundari
between
architectur
and
high-level
design
are
not
fulli
clear
the
way
the
field
ha
evolv
we
can
say
that
the
line
between
architec-
ture
and
design
is
realli
up
to
the
design
or
the
architect
at
the
architectur
level
one
need
to
show
onli
those
part
that
are
need
to
perform
the
desir
evalu
the
intern
structur
of
these
part
is
not
import
on
the
other
hand
dure
design
design
the
structur
of
the
part
that
can
lead
to
con-
struct
them
is
one
of
the
key
task
howev
which
part
of
the
structur
should
be
examin
and
reveal
dure
architectur
and
which
part
dure
design
is
a
matter
of
choic
gener
speak
detail
that
are
not
need
to
perform
the
type
of
analysi
we
wish
to
do
at
the
architectur
time
are
unnecessari
and
should
be
left
for
design
to
uncov
the
c
&
c
architectur
view
of
a
system
ha
two
main
elements—compon
and
connector
compon
are
usual
comput
element
or
data
store
that
have
some
presenc
dure
the
system
execut
connector
defin
the
mean
of
interact
between
these
compon
a
c
&
c
view
of
the
system
de-
fine
the
compon
and
which
compon
is
connect
to
which
and
through
what
connector
a
c
&
c
view
describ
a
runtim
structur
of
the
system—
what
compon
exist
when
the
system
is
execut
and
how
they
interact
dure
the
execut
the
c
&
c
structur
is
essenti
a
graph
with
compo-
nent
a
node
and
connector
a
edg
the
c
&
c
view
is
perhap
the
most
common
view
of
architectur
and
most
box-and-lin
draw
repres
architectur
attempt
to
captur
thi
view
most
often
when
peopl
talk
about
the
architectur
they
refer
to
the
c
&
c
view
most
architectur
descript
languag
also
focu
on
the
c
&
c
view
compon
are
gener
unit
of
comput
or
data
store
in
the
system
a
compon
ha
a
name
which
is
gener
chosen
to
repres
the
role
of
the
compon
or
the
function
it
perform
the
name
also
provid
a
uniqu
ident
to
the
compon
which
is
necessari
for
referenc
detail
about
the
compon
in
the
support
document
a
a
c
&
c
draw
will
onli
show
the
compon
name
a
compon
is
of
a
compon
type
where
the
type
repres
a
gener
compon
defin
the
gener
comput
and
the
interfac
a
compon
of
that
type
must
have
note
that
though
a
compon
ha
a
type
in
the
c
&
c
architectur
view
we
have
compon
i.e.
actual
instanc
and
not
type
exampl
of
these
type
are
client
server
filter
etc
differ
domain
may
have
other
gener
type
like
control
actuat
and
sensor
for
a
control
system
domain
in
a
diagram
repres
a
c
&
c
architectur
view
of
a
system
it
is
highli
desir
to
have
a
differ
represent
for
differ
compon
type
so
the
differ
type
can
be
identifi
visual
in
a
box-and-lin
diagram
often
all
compon
are
repres
a
rectangular
box
such
an
approach
will
requir
that
type
of
the
compon
are
describ
separ
and
the
reader
ha
to
read
the
descript
to
figur
out
the
type
of
the
compon
it
is
much
better
to
use
a
differ
symbol/not
for
each
differ
compon
type
some
of
the
common
symbol
use
for
repres
commonli
found
compon
type
are
shown
in
figur
to
make
sure
that
the
mean
of
the
differ
symbol
are
clear
to
the
reader
it
is
desir
to
have
a
key
of
the
differ
symbol
to
describ
what
the
differ
compon
of
a
system
are
like
to
interact
while
the
system
is
in
oper
to
provid
the
servic
expect
of
the
system
after
all
compon
exist
to
provid
part
of
the
servic
and
featur
of
the
system
and
these
must
be
combin
to
deliv
the
overal
system
function
for
compos
a
system
from
it
compon
inform
about
the
interact
between
compon
is
necessari
interact
between
compon
may
be
through
a
simpl
mean
support
by
the
underli
process
execut
infrastructur
of
the
oper
system
for
exampl
a
compon
may
interact
with
anoth
use
the
procedur
call
mechan
a
connector
which
is
provid
by
the
runtim
environ
for
the
program
languag
howev
the
interact
may
involv
more
complex
mechan
a
well
exampl
of
such
mechan
are
remot
procedur
call
tcp/ip
port
and
a
protocol
like
http
these
mechan
requir
a
fair
amount
of
underli
runtim
infrastructur
a
well
a
special
program
within
the
compon
to
use
the
infrastructur
consequ
it
is
extrem
import
to
identifi
and
explicitli
repres
these
connector
specif
of
connector
will
help
identifi
the
suitabl
infrastructur
need
to
implement
an
architectur
a
well
a
clarifi
the
program
need
for
compon
use
them
note
that
connector
need
not
be
binari
and
a
connector
may
provid
an
n-way
commun
between
multipl
compon
for
exampl
a
broadcast
bu
may
be
use
a
a
connector
which
allow
a
compon
to
broadcast
it
messag
to
all
the
other
compon
some
of
the
common
symbol
use
for
repres
commonli
found
connector
type
are
shown
in
figur
a
connector
also
ha
a
name
that
should
describ
the
natur
of
interact
the
connector
support
a
connector
also
ha
a
type
which
is
a
gener
de-
scription
of
the
interact
specifi
properti
like
whether
it
is
a
binari
or
n-way
type
of
interfac
it
support
etc
if
a
protocol
is
use
by
a
connector
type
it
should
be
explicitli
state
it
is
worth
point
out
that
the
implement
of
a
connector
may
be
quit
complex
if
the
connector
is
provid
by
the
underli
system
then
the
compon
just
have
to
ensur
that
they
use
the
connector
a
per
their
specif
if
howev
the
underli
system
doe
not
provid
a
connector
use
in
an
architectur
then
a
mention
abov
the
connector
will
have
to
be
implement
a
part
of
the
project
to
build
the
system
that
is
dure
the
develop
not
onli
will
the
compon
need
to
be
develop
but
resourc
will
have
to
be
assign
to
also
develop
the
connector
thi
situat
might
aris
for
a
special
system
that
requir
connector
that
are
specif
to
the
problem
domain
gener
while
creat
an
architectur
it
is
wise
for
the
architect
to
use
the
connector
which
are
avail
on
the
system
on
which
the
softwar
will
be
deploy
suppos
we
have
to
design
and
build
a
simpl
system
for
take
an
on-lin
survey
of
student
on
a
campu
there
is
a
set
of
multiple-choic
question
and
the
propos
system
will
provid
the
survey
form
to
the
student
who
can
fill
and
submit
it
on-lin
we
also
want
that
when
the
user
submit
the
form
he/sh
is
also
shown
the
current
result
of
the
survey
that
is
what
percentag
of
student
so
far
have
fill
which
option
for
the
differ
question
the
system
is
best
built
use
the
web
thi
is
the
like
choic
of
ani
develop
for
thi
simpl
system
a
tradit
3-tier
architectur
is
propos
it
consist
of
a
client
which
will
display
the
form
that
the
student
can
complet
and
submit
and
will
also
display
the
result
the
second
compon
is
the
server
which
process
the
data
submit
by
the
student
and
save
it
on
the
databas
which
is
the
third
compon
the
server
also
queri
the
databas
to
get
the
outcom
of
the
survey
and
send
the
result
in
proper
format
html
back
to
the
client
which
then
display
the
result
the
c
&
c
view
is
shown
in
figur
note
that
the
client
server
and
databas
are
all
differ
type
of
compo-
nent
and
henc
are
shown
use
differ
symbol
note
also
that
the
connec-
tor
between
the
compon
are
also
of
differ
type
the
diagram
make
the
differ
type
clear
make
the
diagram
stand
alon
and
easi
to
comprehend
note
that
at
the
architectur
level
a
host
of
detail
are
not
discuss
how
is
the
url
of
the
survey
set
what
are
the
modul
that
go
into
build
these
compon
and
what
languag
are
they
written
in
question
like
these
are
not
the
issu
at
thi
level
note
also
that
the
connector
between
the
client
and
the
server
explicitli
say
that
http
is
to
be
use
and
the
diagram
also
say
that
it
is
a
web
client
thi
impli
that
it
is
assum
that
there
will
be
a
web
browser
run
on
the
machin
from
which
the
student
will
take
the
survey
have
the
http
a
the
connector
also
impli
that
there
is
a
proper
http
server
run
and
that
the
server
of
thi
system
will
be
suitabl
attach
to
it
to
allow
access
by
client
in
other
word
the
entir
infrastructur
of
browser
and
the
http
server
for
the
purpos
of
thi
applic
mainli
provid
the
connector
between
the
client
and
the
server
and
a
virtual
machin
to
run
the
client
of
the
applic
there
are
some
implic
of
choic
of
thi
connector
on
the
compon
the
client
will
have
to
be
written
in
a
manner
that
it
can
send
the
request
use
http
thi
will
impli
use
some
type
of
script
languag
or
html
form
similarli
it
also
impli
that
the
server
ha
to
take
it
request
from
the
http
server
in
the
format
specifi
by
the
http
protocol
furthermor
the
server
ha
to
send
it
result
back
to
the
client
in
the
html
format
these
are
all
constraint
on
implement
thi
architectur
henc
when
discuss
it
and
final
accept
it
the
implic
for
the
infrastructur
a
well
a
the
implement
should
be
fulli
understood
and
action
should
be
taken
to
make
sure
that
these
assumpt
are
valid
the
abov
architectur
ha
no
secur
and
a
student
can
take
the
survey
a
mani
time
a
he
wish
furthermor
even
a
nonstud
can
take
the
survey
now
suppos
the
dean
of
student
want
that
thi
system
be
open
onli
to
regist
student
and
that
each
student
is
allow
to
take
the
survey
at
most
onc
to
identifi
the
student
it
wa
explain
that
each
student
ha
an
account
and
their
account
inform
is
avail
from
the
main
proxi
server
of
the
institut
now
the
architectur
will
have
to
be
quit
differ
the
propos
architec-
ture
now
ha
a
separ
login
form
for
the
user
and
a
separ
server
compon
which
doe
the
valid
for
valid
it
go
to
the
proxi
for
check
if
the
login
and
password
provid
are
valid
if
so
the
server
return
a
cooki
to
the
client
which
store
it
a
per
the
cooki
protocol
when
the
student
complet
the
survey
form
the
cooki
inform
valid
the
user
and
the
server
check
if
thi
student
ha
alreadi
complet
the
survey
the
architectur
for
thi
system
is
shown
in
figur
note
that
even
though
we
are
say
that
the
connect
between
the
client
and
the
server
is
that
of
http
it
is
somewhat
differ
from
the
connect
in
the
earlier
architectur
in
the
first
architectur
plain
http
is
suffici
in
thi
one
a
cooki
are
also
need
the
connector
is
realli
http
+
cooki
so
if
the
user
disabl
cooki
the
requir
connector
is
not
avail
and
thi
architectur
will
not
work
now
suppos
we
want
the
system
to
be
extend
in
a
differ
way
it
wa
found
that
the
databas
server
is
somewhat
unreli
and
is
frequent
down
it
wa
also
felt
that
when
the
student
is
given
the
result
of
the
survey
when
he
submit
the
form
a
somewhat
outdat
result
is
accept
a
the
result
are
realli
statist
data
and
a
littl
inaccuraci
will
not
matter
we
assum
that
the
survey
result
can
be
outdat
by
about
even
if
it
doe
not
includ
data
of
it
is
ok
what
the
dean
want
wa
to
make
the
system
more
reliabl
and
provid
some
facil
for
complet
the
survey
even
when
the
databas
is
down
to
make
the
system
more
reliabl
the
follow
strategi
wa
propos
when
the
student
submit
the
survey
the
server
interact
with
the
databas
a
befor
the
result
of
the
survey
howev
are
also
store
in
the
cach
by
the
server
if
the
databas
is
down
or
unavail
the
survey
data
is
store
local
in
a
cach
compon
and
the
result
save
in
the
cach
compon
is
use
to
provid
the
result
to
the
student
thi
can
be
done
for
up
to
after
which
the
survey
can
not
be
complet
so
now
we
have
anoth
compon
in
the
server
call
the
cach
manag
and
there
is
a
connect
between
the
server
and
thi
new
compon
of
the
call/return
type
thi
architectur
is
shown
in
figur
it
should
be
clear
that
by
use
the
cach
the
avail
of
the
system
is
improv
the
cach
will
also
have
an
impact
on
perform
these
exten-
sion
show
how
architectur
affect
both
avail
and
perform
and
how
properli
select
or
tune
the
architectur
can
help
meet
the
qualiti
goal
or
just
improv
the
qualiti
of
the
system
of
cours
detail-level
decis
like
how
a
particular
modul
is
implement
also
have
implic
on
perform
but
they
are
quit
distinct
and
orthogon
to
the
architecture-level
decis
we
will
later
do
a
formal
evalu
of
these
differ
architectur
to
see
the
impact
of
architectur
decis
on
some
qualiti
attribut
it
should
be
clear
that
differ
system
will
have
differ
architectur
there
are
some
gener
architectur
that
have
been
observ
in
mani
system
and
that
seem
to
repres
gener
structur
that
are
use
for
architectur
of
a
class
of
problem
these
are
call
architectur
style
a
style
defin
a
famili
of
architectur
that
satisfi
the
constraint
of
that
style
6
23
76
in
thi
section
we
discu
some
common
style
for
the
c
&
c
view
which
can
be
use
for
a
larg
set
of
problem
23
76
these
style
can
provid
idea
for
creat
an
architectur
view
for
the
problem
at
hand
style
can
also
be
combin
to
form
richer
view
pipe-and-filt
style
of
architectur
is
well
suit
for
system
that
primarili
do
data
transform
wherebi
some
input
data
is
receiv
and
the
goal
of
the
system
is
to
produc
some
output
data
by
suitabl
transform
the
input
data
a
system
use
pipe-and-filt
architectur
achiev
the
desir
transform
by
appli
a
network
of
smaller
transform
and
compos
them
in
a
manner
such
that
togeth
the
overal
desir
transform
is
achiev
the
pipe-and-filt
style
ha
onli
one
compon
type
call
the
filter
it
also
ha
onli
one
connector
type
call
the
pipe
a
filter
perform
a
data
transform
and
send
the
transform
data
to
other
filter
for
further
process
use
the
pipe
connector
in
other
word
a
filter
receiv
the
data
it
need
from
some
defin
input
pipe
perform
the
data
transform
and
then
send
the
output
data
to
other
filter
on
the
defin
output
pipe
a
filter
may
have
more
than
one
input
and
more
than
one
output
filter
can
be
independ
and
asynchron
entiti
and
a
they
are
concern
onli
with
the
data
arriv
on
the
pipe
a
filter
need
not
know
the
ident
of
the
filter
that
sent
the
input
data
or
the
ident
of
the
filter
that
will
consum
the
data
they
produc
the
pipe
connector
is
a
unidirect
channel
which
convey
stream
of
data
receiv
on
one
end
to
the
other
end
a
pipe
doe
not
chang
the
data
in
ani
manner
but
mere
transport
it
to
the
filter
on
the
receiv
end
in
the
order
in
which
the
data
element
are
receiv
as
filter
can
be
asynchron
and
should
work
without
the
knowledg
of
the
ident
of
the
produc
or
the
consum
buffer
and
synchron
need
to
ensur
smooth
function
of
the
producer-consum
relationship
embodi
in
connect
two
filter
by
a
pipe
is
ensur
by
the
pipe
the
filter
mere
consum
and
produc
data
there
are
some
constraint
that
thi
style
impos
first
a
mention
abov
the
filter
should
work
without
know
the
ident
of
the
consum
or
the
produc
they
should
onli
requir
the
data
element
they
need
second
a
pipe
which
is
a
two-way
connector
must
connect
an
output
port
of
a
filter
to
an
input
port
of
anoth
filter
a
pure
pipe-and-filt
structur
will
also
gener
have
a
constraint
that
a
filter
ha
independ
thread
of
control
which
process
the
data
a
it
come
implement
thi
will
requir
suitabl
underli
infrastructur
to
support
a
pipe
mechan
which
buffer
the
data
and
doe
the
synchron
need
for
exampl
block
the
produc
when
the
buffer
is
full
and
block
the
consum
filter
when
the
buffer
is
empti
for
use
thi
pipe
the
filter
builder
must
be
fulli
awar
of
the
properti
of
the
pipe
particularli
with
regard
to
buffer
and
synchron
input
and
output
mechan
and
the
symbol
for
end
of
data
howev
there
could
be
situat
in
which
the
constraint
that
a
filter
process
the
data
a
it
come
may
not
be
requir
without
thi
constraint
pipe-and-filt
style
view
may
have
filter
that
produc
the
data
complet
befor
pass
it
on
or
which
start
their
process
onli
after
complet
input
is
avail
in
such
a
system
the
filter
can
not
oper
concurr
and
the
system
is
like
a
batch-process
system
howev
it
can
consider
simplifi
the
pipe
and
easier
mechan
can
be
use
for
support
them
let
’
s
consid
an
exampl
of
a
system
need
to
count
the
frequenc
of
differ
word
in
a
file
an
architectur
use
the
pipes-and-filt
style
for
a
system
to
achiev
thi
is
given
in
figur
thi
architectur
propos
that
the
input
data
be
first
split
into
a
sequenc
of
word
by
a
compon
sequenc
thi
sequenc
of
word
is
then
sort
by
the
compon
sort
which
pass
the
output
of
sort
word
to
anoth
filter
count
that
count
the
number
of
occurr
of
the
differ
word
thi
structur
of
sort
the
word
first
ha
been
chosen
a
it
will
make
the
task
of
determin
the
frequenc
more
effici
even
though
it
involv
a
sort
oper
it
should
be
clear
that
thi
propos
architectur
can
implement
the
desir
function
later
in
the
chapter
we
will
further
discu
some
implement
issu
relat
to
thi
architectur
as
can
be
seen
from
thi
exampl
pipe-and-filt
architectur
style
is
well
suit
for
data
process
and
transform
consequ
it
is
use
in
text
process
applic
signal
process
applic
also
find
it
use
a
such
applic
typic
perform
encod
error
correct
and
other
transform
on
the
data
the
pipe-and-filt
style
due
to
the
constraint
allow
a
system
’
s
overal
transform
to
be
compos
of
smaller
transform
or
view
it
in
anoth
manner
it
allow
a
desir
transform
to
be
factor
into
smaller
transform
and
then
filter
built
for
the
smaller
transform
that
is
it
allow
the
techniqu
of
function
composit
and
decomposit
to
be
util
someth
that
is
mathemat
appeal
in
thi
style
there
are
two
type
of
components—data
repositori
and
data
accessor
compon
of
data
repositori
type
are
where
the
system
store
share
data—thes
could
be
file
system
or
databas
these
compon
pro-
vide
a
reliabl
and
perman
storag
take
care
of
ani
synchron
need
for
concurr
access
and
provid
data
access
support
compon
of
data
accessor
type
access
data
from
the
repositori
perform
comput
on
the
data
obtain
and
if
they
want
to
share
the
result
with
other
compon
put
the
result
back
in
the
depositori
in
other
word
the
accessor
are
computa-
tional
element
that
receiv
their
data
from
the
repositori
and
save
their
data
in
the
repositori
a
well
these
compon
do
not
directli
commun
with
each
other—th
data
repositori
compon
are
the
mean
of
commun
and
data
transfer
between
them
there
are
two
variat
of
thi
style
possibl
in
the
blackboard
style
if
some
data
is
post
on
the
data
repositori
all
the
accessor
compon
that
need
to
know
about
it
are
inform
in
other
word
the
share
data
sourc
is
an
activ
agent
a
well
which
either
inform
the
compon
about
the
arriv
of
interest
data
or
start
the
execut
of
the
compon
that
need
to
act
upon
thi
new
data
in
databas
thi
form
of
style
is
often
support
through
trigger
the
other
is
the
repositori
style
in
which
the
data
repositori
is
just
a
passiv
repositori
which
provid
perman
storag
and
relat
control
for
data
access
the
compon
access
the
repositori
a
and
when
they
want
as
can
be
imagin
mani
databas
applic
use
thi
architectur
style
databas
though
origin
more
like
repositori
now
act
both
a
repositori
a
well
a
blackboard
a
they
provid
trigger
and
can
act
a
effici
data
storag
a
well
mani
web
system
frequent
follow
thi
style
at
the
back
end—in
respons
to
user
request
differ
script
data
accessor
access
and
updat
some
share
data
mani
program
environ
are
also
organ
thi
way
the
common
represent
of
the
program
artifact
is
store
in
the
repositori
and
the
differ
tool
access
it
to
perform
the
desir
translat
or
to
obtain
the
desir
inform
some
year
back
there
wa
a
standard
defin
for
the
common
repositori
to
facilit
integr
of
tool
as
an
exampl
of
a
system
use
thi
style
of
architectur
let
u
consid
a
student
registr
system
in
a
univers
the
system
clearli
ha
a
central
repositori
which
contain
inform
about
cours
student
prerequisit
etc
it
ha
an
administr
compon
that
set
up
the
repositori
right
to
differ
peopl
etc
the
registr
compon
allow
student
to
reg-
ister
and
updat
the
inform
for
student
and
cours
the
approv
compon
is
for
grant
approv
for
those
cours
that
requir
instructor
’
s
consent
the
report
compon
produc
the
report
regard
the
student
regist
in
differ
cours
at
the
end
of
the
registr
the
compon
cours
feedback
is
use
for
take
feedback
from
student
at
the
end
of
the
cours
thi
architectur
is
shown
in
figur
note
that
the
differ
comput
compon
do
not
need
to
communi-
cate
with
each
other
and
do
not
even
need
to
know
about
each
other
’
s
presenc
for
exampl
if
later
it
is
decid
that
the
schedul
of
cours
can
be
auto-
mate
base
on
data
on
registr
and
other
inform
about
classroom
etc
then
anoth
compon
call
schedul
can
be
simpli
ad
no
ex-
ist
comput
compon
need
to
chang
or
be
inform
about
the
new
compon
be
ad
thi
exampl
is
base
on
a
system
that
is
actual
use
in
the
author
’
s
univers
there
is
realli
onli
one
connector
type
in
thi
style—read/writ
note
how-
ever
that
thi
gener
connector
style
may
take
more
precis
form
in
particular
architectur
for
exampl
though
a
databas
can
be
view
a
support
read
and
updat
for
a
program
interact
with
it
the
databas
system
may
provid
transact
servic
a
well
connector
use
thi
transact
servic
allow
complet
transact
which
may
involv
multipl
read
and
write
and
preserv
atom
to
be
perform
by
an
applic
note
also
that
a
in
mani
other
case
the
connector
involv
a
consider-
abl
amount
of
underli
infrastructur
for
exampl
read
and
write
to
a
file
system
involv
a
fair
amount
of
file
system
softwar
involv
issu
like
directori
buffer
lock
and
synchron
similarli
a
consider
amount
of
softwar
go
into
databas
to
support
the
type
of
connect
it
provid
for
queri
updat
and
transact
we
will
see
anoth
use
of
thi
style
later
when
we
discu
the
case
studi
anoth
veri
common
style
use
to
build
system
today
is
the
client-serv
style
client-serv
comput
is
one
of
the
basic
paradigm
of
distribut
com-
pute
and
thi
architectur
style
is
built
upon
thi
paradigm
in
thi
style
there
are
two
compon
types—cli
and
server
a
con-
straint
of
thi
style
is
that
a
client
can
onli
commun
with
the
server
and
can
not
commun
with
other
client
the
commun
between
a
client
compon
and
a
server
compon
is
initi
by
the
client
when
the
client
send
a
request
for
some
servic
that
the
server
support
the
server
receiv
the
request
at
it
defin
port
perform
the
servic
and
then
return
the
result
of
the
comput
to
the
client
who
request
the
servic
there
is
one
connector
type
in
thi
style—th
request/repli
type
a
con-
nector
connect
a
client
to
a
server
thi
type
of
connector
is
asymmetric—th
client
end
of
the
connector
can
onli
make
request
and
receiv
the
repli
while
the
server
end
can
onli
send
repli
in
respons
to
the
request
it
get
through
thi
connector
the
commun
is
frequent
synchronous—th
client
wait
for
the
server
to
return
the
result
befor
proceed
that
is
the
client
is
block
at
the
request
until
it
get
the
repli
a
gener
form
of
thi
style
is
an
n-tier
structur
in
thi
style
a
client
send
a
request
to
a
server
but
the
server
in
order
to
servic
the
request
send
some
request
to
anoth
server
that
is
the
server
also
act
a
a
client
for
the
next
tier
thi
hierarchi
can
continu
for
some
level
provid
an
n-tier
system
a
common
exampl
of
thi
is
the
3-tier
architectur
in
thi
style
the
client
that
make
request
and
receiv
the
final
result
resid
in
the
client
tier
the
middl
tier
call
the
busi
tier
contain
the
compon
that
process
the
data
submit
by
the
client
and
appli
the
necessari
busi
rule
the
third
tier
is
the
databas
tier
in
which
the
data
resid
the
busi
tier
interact
with
the
databas
tier
for
all
it
data
need
most
often
in
a
client-serv
architectur
the
client
and
the
server
com-
ponent
resid
on
differ
machin
even
if
they
resid
on
the
same
machin
they
are
design
in
a
manner
such
that
they
can
exist
on
differ
machin
henc
the
connector
between
the
client
and
the
server
is
expect
to
support
the
request/result
type
of
connect
across
differ
machin
consequ
these
connector
are
intern
quit
complex
and
involv
a
fair
amount
of
net-
work
to
support
mani
of
the
client-serv
system
today
use
tcp
port
for
their
connector
the
web
us
the
http
for
support
thi
connector
note
that
there
is
a
distinct
between
a
layer
architectur
and
a
tier
architectur
the
tier
style
is
a
compon
and
connector
architectur
view
in
which
each
tier
is
a
compon
and
these
compon
commun
with
the
adjac
one
through
a
defin
protocol
a
layer
architectur
is
a
modul
view
provid
how
modul
are
organ
and
use
in
the
layer
organiza-
tion
modul
are
organ
in
layer
with
modul
in
a
layer
allow
to
invok
servic
onli
of
the
modul
in
the
layer
below
henc
layer
and
tier
rep-
resent
two
differ
view
we
can
have
an
n-tier
architectur
in
which
some
tier
s
have
a
layer
architectur
for
exampl
in
a
client-serv
architectur
the
server
might
have
a
layer
architectur
that
is
modul
that
compos
the
server
are
organ
in
the
layer
style
publish-subscrib
style
in
thi
style
there
are
two
type
of
compon
one
type
of
compon
subscrib
to
a
set
of
defin
event
other
type
of
compo-
nent
gener
or
publish
event
in
respons
to
these
event
the
compon
that
have
publish
their
intent
to
process
the
event
are
invok
thi
type
of
style
is
most
natur
in
user
interfac
framework
where
mani
event
are
defin
like
mous
click
and
compon
are
assign
to
these
event
when
that
event
occur
the
associ
compon
is
execut
as
is
the
case
with
most
connector
it
is
the
task
of
the
runtim
infrastructur
to
ensur
that
thi
type
of
connector
i.e.
publish-subscrib
is
support
thi
style
can
be
seen
a
a
special
case
of
the
blackboard
style
except
that
the
repositori
aspect
is
not
be
use
peer-to-p
style
or
object-ori
style
if
we
take
a
client-serv
style
and
gener
each
compon
to
be
a
client
a
well
a
a
server
then
we
have
thi
style
in
thi
style
compon
are
peer
and
ani
compon
can
request
a
servic
from
ani
other
compon
the
object-ori
comput
model
repres
thi
style
well
if
we
view
compon
a
object
and
connector
a
method
invoc
then
we
have
thi
style
thi
model
is
the
one
that
is
primarili
support
through
middlewar
connector
like
corba
or
.net
commun
process
style
perhap
the
oldest
model
of
distribut
com-
pute
is
that
of
commun
process
thi
style
tri
to
captur
thi
model
of
comput
the
compon
in
thi
model
are
process
or
thread
which
commun
with
each
other
either
with
messag
pass
or
through
share
memori
thi
style
is
use
in
some
form
in
mani
complex
system
which
use
multipl
thread
or
process
so
far
we
have
focus
on
repres
view
through
diagram
while
de-
sign
diagram
are
inde
a
good
way
to
explor
option
and
encourag
discuss
and
brainstorm
between
the
architect
but
when
the
design
is
over
the
architectur
ha
to
be
properli
commun
to
all
stakehold-
er
for
negoti
and
agreement
thi
requir
that
architectur
be
precis
document
with
enough
inform
to
perform
the
type
of
analysi
the
dif-
ferent
stakehold
wish
to
make
to
satisfi
themselv
that
their
concern
have
been
adequ
address
without
a
properli
document
descript
of
the
architectur
it
is
not
possibl
to
have
a
clear
common
understand
henc
properli
document
an
architectur
is
a
import
a
creat
one
in
thi
section
we
discu
what
an
architectur
document
should
contain
our
discus-
sion
is
base
on
the
recommend
in
6
23
54
just
like
differ
project
requir
differ
view
differ
project
will
need
differ
level
of
detail
in
their
architectur
document
in
gener
howev
a
document
describ
the
architectur
should
contain
the
follow
we
know
that
an
architectur
for
a
system
is
driven
by
the
system
object
and
the
need
of
the
stakehold
henc
the
first
aspect
that
an
architectur
document
should
contain
is
identif
of
stakehold
and
their
concern
thi
portion
should
give
an
overview
of
the
system
the
differ
stakehold
and
the
system
properti
for
which
the
architectur
will
be
evalu
a
con-
text
diagram
that
establish
the
scope
of
the
system
it
boundari
the
key
actor
that
interact
with
the
system
and
sourc
and
sink
of
data
can
also
be
veri
use
a
context
diagram
is
frequent
repres
by
show
the
system
in
the
center
and
show
it
connect
with
peopl
and
system
includ
sourc
and
sink
of
data
with
the
context
defin
the
document
can
proceed
with
describ
the
differ
structur
or
view
as
state
befor
multipl
view
of
differ
type
may
be
need
and
which
view
are
chosen
depend
on
the
need
of
the
project
and
it
stakehold
the
descript
of
view
in
the
architectur
document
will
almost
alway
contain
a
pictori
represent
of
the
view
which
is
often
the
primari
present
of
the
view
as
discuss
earlier
in
ani
view
diagram
it
is
desir
to
have
differ
symbol
for
differ
element
type
and
provid
a
key
for
the
differ
type
such
that
the
type
of
the
differ
compon
repres
use
the
symbol
is
clear
to
a
reader
it
is
of
cours
highli
desir
to
keep
the
diagram
simpl
and
unclutt
if
necessari
to
keep
the
complex
of
the
view
manag
a
hierarch
approach
can
be
follow
to
make
the
main
view
simpl
and
provid
further
detail
a
structur
of
the
element
howev
a
pictori
represent
is
not
a
complet
descript
of
the
view
it
give
an
intuit
idea
of
the
design
but
is
not
suffici
for
provid
the
detail
for
exampl
the
purpos
and
function
of
a
modul
or
a
compon
is
indic
onli
by
it
name
which
is
not
suffici
henc
support
doc-
ument
is
need
for
the
view
diagram
thi
support
document
should
have
some
or
all
of
the
follow
element
catalog
provid
more
inform
about
the
element
shown
in
the
primari
represent
besid
describ
the
purpos
of
the
element
it
should
also
describ
the
element
’
interfac
rememb
that
all
element
have
interfac
through
which
they
interact
with
other
element
all
the
differ
interfac
provid
by
the
element
should
be
specifi
interfac
should
have
uniqu
ident
and
the
specif
should
give
both
syntact
and
semant
inform
syntact
inform
is
often
in
term
of
signa-
ture
which
describ
all
the
data
item
involv
in
the
interfac
and
their
type
semant
inform
must
describ
what
the
interfac
doe
the
de-
scription
should
also
clearli
state
the
error
condit
that
the
interfac
can
return
architectur
rational
though
a
view
specifi
the
element
and
the
rela-
tionship
between
them
it
doe
not
provid
ani
insight
into
whi
the
architect
chose
the
particular
structur
architectur
rational
give
the
reason
for
se-
lect
the
differ
element
and
compos
them
in
the
way
it
wa
done
thi
section
may
also
provid
some
discuss
on
the
altern
that
were
consid
and
whi
they
were
reject
thi
discuss
besid
explain
the
choic
is
also
use
later
when
an
analyst
make
a
chang
wonder
whi
the
architectur
should
not
be
chang
in
some
manner
that
might
make
the
chang
easi
behavior
a
view
give
the
structur
inform
it
doe
not
repres
the
actual
behavior
or
execut
consequ
in
a
structur
all
possibl
in-
teract
dure
an
execut
are
shown
sometim
it
is
necessari
to
get
some
idea
of
the
actual
behavior
of
the
system
in
some
scenario
such
a
descript
is
use
for
argu
about
properti
like
deadlock
behavior
de-
scription
can
be
provid
to
help
aid
understand
of
the
system
execut
often
diagram
like
collabor
diagram
or
sequenc
diagram
we
will
discu
these
further
in
chapter
are
use
other
inform
thi
may
includ
a
descript
of
all
those
decis
that
have
not
been
taken
dure
architectur
creation
but
have
been
deliber
left
for
the
futur
such
a
the
choic
of
a
server
or
protocol
if
thi
is
done
then
it
must
be
specifi
a
fix
these
will
have
impact
on
the
architectur
we
know
that
the
differ
view
are
relat
in
what
we
have
discuss
so
far
the
view
have
been
describ
independ
the
architectur
document
therefor
besid
describ
the
view
should
also
describ
the
relationship
between
the
differ
view
thi
is
the
primari
purpos
of
the
across
view
document
essenti
thi
document
describ
the
relationship
be-
tween
element
of
the
differ
view
for
exampl
how
modul
in
a
modul
view
relat
to
compon
in
a
compon
view
or
how
compon
in
a
c
&
c
view
relat
to
process
in
a
process
view
thi
part
of
the
document
can
also
describ
the
rational
of
the
overal
architectur
whi
the
select
view
were
chosen
and
ani
other
inform
that
cut
across
view
howev
often
the
relationship
between
the
differ
view
is
straightfor-
ward
or
veri
strong
in
such
situat
the
differ
structur
may
look
veri
similar
and
describ
the
view
separ
can
lead
to
a
repetit
in
such
situat
for
practic
reason
it
is
better
to
combin
differ
view
into
one
besid
elimin
the
duplic
thi
approach
can
also
help
clearli
show
the
strong
relationship
between
the
two
view
and
in
the
process
also
reduc
the
across
view
document
combin
view
are
also
use
for
some
analysi
which
requir
multipl
view
for
exampl
perform
analy-
si
which
frequent
requir
both
the
c
&
c
view
a
well
a
the
alloc
view
so
sometim
it
may
be
desir
to
show
some
combin
view
combin
of
view
howev
should
be
done
onli
if
the
relationship
be-
tween
the
view
is
strong
and
straightforward
otherwis
put
multipl
view
in
one
diagram
will
clutter
the
view
and
make
it
confus
the
objec-
tive
of
reveal
multipl
view
in
one
is
not
mere
to
reduc
the
number
of
view
but
is
to
be
done
primarili
to
aid
understand
and
show
the
relationship
an
exampl
of
combin
is
when
there
are
multipl
modul
in
the
modul
view
that
form
the
differ
layer
in
the
layer
view
in
such
a
situat
it
is
probabl
more
natur
to
show
one
view
consist
of
the
layer
and
overlay-
ing
the
modul
structur
on
the
layer
that
is
show
the
modul
structur
within
the
layer
mani
layer
system
’
architectur
actual
use
thi
ap-
proach
in
such
a
situat
it
is
best
to
show
them
togeth
creat
a
hybrid
style
in
which
both
a
modul
view
and
a
c
&
c
view
are
captur
overal
if
the
map
can
be
shown
easili
and
in
a
simpl
manner
then
differ
view
should
be
combin
for
the
sake
of
simplic
and
compact
if
howev
the
relationship
between
the
differ
view
is
complex
for
exampl
a
many-
to-mani
relationship
between
element
of
the
differ
view
then
it
is
best
to
keep
them
separ
and
specifi
the
relationship
separ
the
gener
structur
discuss
here
can
provid
a
guid
for
organ
the
architectur
document
howev
the
main
purpos
of
the
document
is
to
clearli
commun
the
architectur
to
the
stakehold
such
that
the
desir
analysi
can
be
done
and
if
some
of
these
section
are
redund
for
that
purpos
they
may
not
be
includ
similarli
if
more
inform
need
to
be
provid
then
it
should
be
done
final
a
word
on
the
languag
chosen
for
describ
differ
part
of
the
architectur
here
the
choic
vari
from
the
formal
architectur
descript
languag
adl
to
inform
notat
mani
peopl
now
use
uml
to
repre-
sent
the
architectur
which
allow
variou
possibl
to
show
the
primari
descript
of
the
view
and
also
allow
annot
capabl
for
support
document
we
believ
that
ani
method
can
be
use
a
long
a
the
object
is
met
to
allow
flexibl
we
suggest
use
a
problem-specif
notat
but
follow
the
guidelin
for
good
view
represent
and
use
a
combin
of
header
definit
and
text
for
the
support
document
architectur
of
a
softwar
system
impact
some
of
the
key
nonfunct
qual-
iti
attribut
like
modifi
perform
reliabl
portabl
etc
the
architectur
ha
a
much
more
signific
impact
on
some
of
these
properti
than
the
design
and
code
choic
that
is
even
though
choic
of
algorithm
data
structur
etc.
are
import
for
mani
of
these
attribut
often
they
have
le
of
an
impact
than
the
architectur
choic
clearli
then
evalu
a
propos
architectur
for
these
properti
can
have
a
benefici
impact
on
the
project—ani
architectur
chang
that
are
requir
to
meet
the
desir
goal
for
these
attribut
can
be
done
dure
the
architectur
design
itself
there
are
mani
nonfunct
qualiti
attribut
not
all
of
them
are
af-
fect
by
architectur
significantli
some
of
the
attribut
on
which
architectur
ha
a
signific
impact
are
perform
reliabl
and
avail
secur
some
aspect
of
it
modifi
reusabl
and
portabl
attribut
like
usabl
are
onli
mildli
affect
by
architectur
how
should
a
propos
architectur
be
evalu
for
these
attribut
for
some
attribut
like
perform
and
reliabl
it
is
possibl
to
build
formal
model
use
techniqu
like
queu
network
and
use
them
for
assess
the
valu
of
the
attribut
howev
these
model
requir
inform
beyond
the
architectur
descript
gener
in
form
of
execut
time
and
reliabl
of
each
compon
anoth
approach
is
procedural—a
sequenc
of
step
is
follow
to
subjec-
tive
evalu
the
impact
of
the
architectur
on
some
of
the
attribut
one
such
inform
analysi
approach
that
is
often
use
is
a
follow
first
identifi
the
attribut
of
interest
for
which
an
architectur
should
be
evalu
these
attribut
are
usual
determin
from
stakehold
’
interests—th
attribut
the
differ
stakehold
are
most
interest
in
these
attribut
are
then
list
in
a
tabl
then
for
each
attribut
an
experience-bas
subject
or
quantit
analysi
is
done
to
ass
the
level
support
by
the
architectur
the
analysi
might
mention
the
level
for
each
attribut
e.g.
good
averag
poor
or
might
simpli
mention
whether
it
is
satisfactori
or
not
base
on
the
outcom
of
thi
analysi
the
architectur
is
either
accept
or
reject
if
reject
it
may
be
enhanc
to
improv
the
perform
for
the
attribut
for
which
the
propos
architectur
wa
unsatisfactori
mani
techniqu
have
been
propos
for
evalu
and
a
survey
of
them
is
given
in
29
architectur
of
a
softwar
system
provid
a
veri
high-level
view
of
the
system
in
term
of
part
of
the
system
and
how
they
are
relat
to
form
the
whole
system
depend
on
how
the
system
is
partit
we
get
a
differ
architectur
view
of
the
system
consequ
the
architectur
of
a
softwar
system
is
defin
a
the
structur
of
the
system
which
compris
softwar
element
their
extern
visibl
properti
and
relationship
among
them
architectur
facilit
develop
of
a
high-qual
system
it
also
allow
analysi
of
mani
of
the
system
properti
like
perform
that
depend
mostli
on
architectur
to
be
done
earli
in
the
softwar
life
cycl
there
are
three
main
architectur
view
of
a
system—modul
compon
and
connector
and
alloc
in
a
modul
view
the
system
is
view
a
a
structur
of
program
modul
like
packag
class
function
etc
in
a
compon
and
connector
c
&
c
view
the
system
is
a
collect
of
runtim
entiti
call
compon
which
interact
with
each
other
through
the
connector
an
alloc
view
describ
how
the
differ
softwar
unit
are
alloc
to
hardwar
resourc
in
the
system
c
&
c
view
is
most
common
and
is
often
the
centerpiec
of
the
architectur
descript
thi
view
is
often
describ
by
block
diagram
specifi
the
differ
compon
and
the
differ
connector
between
the
compon
there
are
some
common
style
for
a
c
&
c
view
which
have
been
found
use
for
creat
thi
architectur
view
for
a
system
these
includ
pipe
and
filter
share
data
client-serv
publish-subscrib
peer
to
peer
and
communicat-
ing
process
style
each
of
these
style
describ
the
type
of
compon
and
connector
that
exist
and
the
constraint
on
how
they
are
use
the
pipe
and
filter
ha
one
type
of
compon
filter
and
one
type
of
connector
pipe
and
compon
can
be
connect
through
the
pipe
the
client-serv
style
ha
two
type
of
compon
client
and
server
and
there
is
one
connector
request/repli
a
client
can
onli
commun
with
the
server
and
an
interact
is
initi
by
a
client
in
share
data
style
the
two
compon
type
are
repositori
and
data
accessor
data
accessor
read/writ
the
repositori
and
share
inform
among
themselv
through
the
repositori
the
architectur
form
the
foundat
for
the
system
and
rest
of
the
design
and
develop
activ
and
need
to
be
properli
document
a
proper
architectur
document
should
describ
the
context
in
which
the
architectur
wa
design
the
differ
architectur
view
that
were
creat
and
how
the
differ
view
relat
to
each
other
the
architectur
descript
should
specifi
the
differ
type
of
element
and
their
extern
behavior
and
the
architectur
rational
architectur
should
be
evalu
to
see
that
it
satisfi
the
requir
a
common
approach
is
to
do
a
subject
evalu
with
respect
to
the
desir
properti
whi
is
architectur
not
just
one
structur
consist
of
differ
part
and
their
relationship
what
are
the
differ
architectur
style
for
the
compon
and
connector
struc-
ture
of
a
system
consid
an
interact
websit
which
provid
mani
differ
featur
to
perform
variou
task
show
that
the
architectur
for
thi
can
be
repres
a
a
shared-
data
style
a
well
a
client-serv
style
which
one
will
you
prefer
and
whi
what
should
an
architectur
document
for
a
system
contain
suggest
how
you
will
evalu
a
propos
architectur
from
a
modifi
per-
spectiv
the
design
activ
begin
when
the
requir
document
for
the
softwar
to
be
develop
is
avail
and
the
architectur
ha
been
design
dure
design
we
further
refin
the
architectur
gener
design
focu
on
what
we
have
call
the
modul
view
in
chapter
5
that
is
dure
design
we
determin
what
modul
the
system
should
have
and
which
have
to
be
develop
often
the
modul
view
may
effect
be
a
modul
structur
of
each
compon
in
the
architectur
in
that
case
the
design
exercis
determin
the
modul
structur
of
the
compon
howev
thi
simpl
map
of
compon
and
modul
may
not
alway
hold
in
that
case
we
have
to
ensur
that
the
modul
view
creat
in
design
is
consist
with
the
architectur
the
design
of
a
system
is
essenti
a
blueprint
or
a
plan
for
a
solut
for
the
system
here
we
consid
a
system
to
be
a
set
of
modul
with
clearli
defin
behavior
which
interact
with
each
other
in
a
defin
manner
to
produc
some
behavior
or
servic
for
it
environ
the
design
process
for
softwar
system
often
ha
two
level
at
the
first
level
the
focu
is
on
decid
which
modul
are
need
for
the
system
the
specif
of
these
modul
and
how
the
modul
should
be
interconnect
thi
is
what
may
be
call
the
modul
design
or
the
high-level
design
in
the
second
level
the
intern
design
of
the
modul
or
how
the
specif
of
the
modul
can
be
satisfi
is
decid
thi
design
level
is
often
call
detail
design
or
logic
design
detail
design
essenti
expand
the
system
design
to
contain
a
more
detail
descript
of
the
process
logic
and
data
structur
so
that
the
design
is
suffici
complet
for
code
a
design
methodolog
is
a
systemat
approach
to
creat
a
design
by
p.
jalot
a
concis
introduct
to
softwar
engin
appli
of
a
set
of
techniqu
and
guidelin
most
design
methodolog
focu
on
the
modul
design
but
do
not
reduc
the
design
activ
to
a
sequenc
of
step
that
can
be
blindli
follow
by
the
design
the
key
design
concept
of
modular
cohes
coupl
and
open-clos
principl
the
structur
chart
notat
for
express
the
structur
of
a
function-
orient
system
the
structur
design
methodolog
for
design
the
structur
chart
of
the
system
be
develop
some
key
concept
relat
to
object-orient
and
the
unifi
model
languag
uml
that
can
be
use
to
express
an
object-ori
design
a
methodolog
of
creat
the
object-ori
design
for
a
system
util
uml
some
metric
for
quantifi
the
complex
of
a
design
the
design
of
a
system
is
correct
if
a
system
built
precis
accord
to
the
design
satisfi
the
requir
of
that
system
clearli
the
goal
dure
the
design
phase
is
to
produc
correct
design
howev
correct
is
not
the
sole
criterion
dure
the
design
phase
a
there
can
be
mani
correct
design
the
goal
of
the
design
process
is
not
simpli
to
produc
a
design
for
the
system
instead
the
goal
is
to
find
the
best
possibl
design
within
the
limit
im-
pose
by
the
requir
and
the
physic
and
social
environ
in
which
the
system
will
oper
to
evalu
a
design
we
have
to
specifi
some
evalu
criterion
we
will
focu
on
modular
of
a
system
which
is
decid
mostli
by
design
a
the
main
criterion
for
evalu
a
system
is
consid
modular
if
it
consist
of
discret
modul
so
that
each
modul
can
be
implement
separ
and
a
chang
to
one
modul
ha
minim
impact
on
other
modul
modular
is
clearli
a
desir
properti
modular
help
in
system
debugging—isol
the
system
problem
to
a
modul
is
easier
if
the
system
is
modular
in
system
repair—chang
a
part
of
the
system
is
easi
a
it
affect
few
other
part
and
in
system
building—a
modular
system
can
be
easili
built
by
put
it
modul
togeth
a
softwar
system
can
not
be
made
modular
by
simpli
chop
it
into
a
set
of
modul
for
modular
each
modul
need
to
support
a
well-defin
abstract
and
have
a
clear
interfac
through
which
it
can
interact
with
other
modul
to
produc
modular
design
some
criterion
must
be
use
to
select
modul
so
that
the
modul
support
well-defin
abstract
and
are
solv-
abl
and
modifi
separ
coupl
and
cohes
are
two
modular
criterion
which
are
often
use
togeth
we
also
discu
the
open-clos
princi-
ple
which
is
anoth
criterion
for
modular
two
modul
are
consid
independ
if
one
can
function
complet
with-
out
the
presenc
of
the
other
obvious
if
two
modul
are
independ
they
are
solvabl
and
modifi
separ
howev
all
the
modul
in
a
system
can
not
be
independ
of
each
other
a
they
must
interact
so
that
togeth
they
produc
the
desir
extern
behavior
of
the
system
the
more
connect
between
modul
the
more
depend
they
are
in
the
sens
that
more
knowl-
edg
about
one
modul
is
requir
to
understand
or
solv
the
other
modul
henc
the
fewer
and
simpler
the
connect
between
modul
the
easier
it
is
to
understand
one
without
understand
the
other
the
notion
of
coupl
79
88
attempt
to
captur
thi
concept
of
how
strongli
differ
modul
are
interconnect
coupl
between
modul
is
the
strength
of
interconnect
between
mod-
ule
or
a
measur
of
interdepend
among
modul
in
gener
the
more
we
must
know
about
modul
a
in
order
to
understand
modul
b
the
more
close
connect
a
is
to
b
highli
coupl
modul
are
join
by
strong
interconnect
while
loos
coupl
modul
have
weak
interconnect
independ
modul
have
no
interconnect
to
solv
and
modifi
a
modul
separ
we
would
like
the
modul
to
be
loos
coupl
with
other
mod-
ule
the
choic
of
modul
decid
the
coupl
between
modul
becaus
the
modul
of
the
softwar
system
are
creat
dure
system
design
the
cou-
pling
between
modul
is
larg
decid
dure
system
design
and
can
not
be
reduc
dure
implement
coupl
increas
with
the
complex
and
obscur
of
the
interfac
be-
tween
modul
to
keep
coupl
low
we
would
like
to
minim
the
number
of
interfac
per
modul
and
the
complex
of
each
interfac
an
interfac
of
a
modul
is
use
to
pa
inform
to
and
from
other
modul
coupl
is
reduc
if
onli
the
defin
entri
interfac
of
a
modul
is
use
by
other
modul
for
exampl
pass
inform
to
and
from
a
modul
exclus
through
pa-
ramet
coupl
would
increas
if
a
modul
is
use
by
other
modul
via
an
indirect
and
obscur
interfac
like
directli
use
the
intern
of
a
modul
or
use
share
variabl
complex
of
the
interfac
is
anoth
factor
affect
coupl
the
more
complex
each
interfac
is
the
higher
will
be
the
degre
of
coupl
for
exampl
complex
of
the
entri
interfac
of
a
procedur
depend
on
the
number
of
item
be
pass
a
paramet
and
on
the
complex
of
the
item
some
level
of
complex
of
interfac
is
requir
to
support
the
commun
need
be-
tween
modul
howev
often
more
than
thi
minimum
is
use
for
exampl
if
a
field
of
a
record
is
need
by
a
procedur
often
the
entir
record
is
pass
rather
than
just
pass
that
field
of
the
record
by
pass
the
record
we
are
increas
the
coupl
unnecessarili
essenti
we
should
keep
the
interfac
of
a
modul
a
simpl
and
small
a
possibl
the
type
of
inform
flow
along
the
interfac
is
the
third
major
factor
affect
coupl
there
are
two
kind
of
inform
that
can
flow
along
an
interfac
data
or
control
pass
or
receiv
control
inform
mean
that
the
action
of
the
modul
will
depend
on
thi
control
inform
which
make
it
more
difficult
to
understand
the
modul
and
provid
it
abstract
transfer
of
data
inform
mean
that
a
modul
pass
a
input
some
data
to
anoth
modul
and
get
in
return
some
data
a
output
thi
allow
a
modul
to
be
treat
a
a
simpl
input-output
function
that
perform
some
transform
on
the
input
data
to
produc
the
output
data
in
gener
interfac
with
onli
data
commun
result
in
the
lowest
degre
of
coupl
follow
by
interfac
that
onli
transfer
control
data
coupl
is
consid
highest
if
the
data
is
hybrid
that
is
some
data
item
and
some
control
item
are
pass
between
modul
the
effect
of
these
three
factor
on
coupl
is
summar
in
tabl
79
type
of
type
of
complex
connect
commun
the
manifest
of
coupl
in
oo
system
is
somewhat
differ
a
object
are
semant
richer
than
function
in
oo
system
three
differ
type
of
coupl
exist
between
modul
30
interact
coupl
occur
due
to
method
of
a
class
invok
method
of
other
class
in
mani
way
thi
situat
is
similar
to
a
function
call
an-
other
function
and
henc
thi
coupl
is
similar
to
coupl
between
function
modul
discuss
abov
like
with
function
the
worst
form
of
coupl
here
is
if
method
directli
access
intern
part
of
other
method
coupl
is
lowest
if
method
commun
directli
through
paramet
within
thi
categori
a
discuss
abov
coupl
is
lower
if
onli
data
is
pass
but
is
higher
if
control
inform
is
pass
sinc
the
invok
method
impact
the
execut
sequenc
in
the
call
method
also
coupl
is
higher
if
the
amount
of
data
be
pass
is
increas
so
if
whole
data
structur
are
pass
when
onli
some
part
are
need
coupl
is
be
unnecessarili
increas
similarli
if
an
object
is
pass
to
a
method
when
onli
some
of
it
compon
object
are
use
within
the
method
coupl
increas
unnecessarili
the
least
coupl
situat
therefor
is
when
commun
is
with
paramet
onli
with
onli
necessari
variabl
be
pass
and
these
paramet
onli
pa
data
compon
coupl
refer
to
the
interact
between
two
class
where
a
class
ha
variabl
of
the
other
class
three
clear
situat
exist
a
to
how
thi
can
happen
a
class
c
can
be
compon
coupl
with
anoth
class
c1
if
c
ha
an
instanc
variabl
of
type
c1
or
c
ha
a
method
whose
paramet
is
of
type
c1
or
if
c
ha
a
method
which
ha
a
local
variabl
of
type
c1
note
that
when
c
is
compon
coupl
with
c1
it
ha
the
potenti
of
be
compon
coupl
with
all
subclass
of
c.
it
should
be
clear
that
whenev
there
is
compon
coupl
there
is
like
to
be
interact
coupl
compon
coupl
is
consid
to
be
weakest
i.e
most
desir
if
in
a
class
c
the
variabl
of
class
c
or
are
some
attribut
of
c.
if
interact
is
through
local
variabl
then
thi
interact
is
not
visibl
from
outsid
and
therefor
increas
coupl
inherit
coupl
is
due
to
the
inherit
relationship
between
class
two
class
are
consid
inherit
coupl
if
one
class
is
a
direct
or
indirect
subclass
of
the
other
if
inherit
add
coupl
one
can
ask
the
question
whi
not
do
away
with
inherit
altogeth
the
reason
is
that
inherit
may
reduc
the
overal
coupl
in
the
system
let
u
consid
two
situat
if
a
class
a
is
coupl
with
anoth
class
b
and
if
b
is
a
hierarchi
with
b
b
then
if
a
method
m
is
factor
out
of
b
the
coupl
drop
a
a
is
now
onli
coupl
with
b
wherea
earlier
it
wa
coupl
with
both
b2
similarli
if
b
is
a
class
hierarchi
which
support
specialization-gener
relationship
then
if
new
subclass
are
ad
to
b
no
chang
need
to
be
made
to
a
class
a
which
call
method
in
b
that
is
for
chang
b
’
s
hierarchi
a
need
not
be
disturb
without
thi
hierarchi
chang
in
b
would
most
like
result
in
chang
in
a
within
inherit
coupl
there
are
some
situat
that
are
wors
than
other
the
worst
form
is
when
a
subclass
b
or
delet
the
method
thi
situat
can
easili
lead
to
a
runtim
error
besid
violat
the
true
spirit
of
the
is-a
relationship
if
the
signatur
is
preserv
but
the
implement
of
a
method
is
chang
that
also
violat
the
is-a
relationship
though
may
not
lead
to
a
runtim
error
and
should
be
avoid
the
least
coupl
scenario
is
when
a
subclass
onli
add
instanc
variabl
and
method
but
doe
not
modifi
ani
inherit
one
we
have
seen
that
coupl
is
reduc
when
the
relationship
among
element
in
differ
modul
are
minim
that
is
coupl
is
reduc
when
element
in
differ
modul
have
littl
or
no
bond
between
them
anoth
way
of
achiev
thi
effect
is
to
strengthen
the
bond
between
element
of
the
same
modul
by
maxim
the
relationship
between
element
of
the
same
modul
cohes
is
the
concept
that
tri
to
captur
thi
intramodul
79
88
with
cohes
we
are
interest
in
determin
how
close
the
element
of
a
modul
are
relat
to
each
other
cohes
of
a
modul
repres
how
tightli
bound
the
intern
element
of
the
modul
are
to
one
anoth
cohes
of
a
modul
give
the
design
an
idea
about
whether
the
differ
element
of
a
modul
belong
togeth
in
the
same
modul
cohes
and
coupl
are
clearli
relat
usual
the
greater
the
cohes
of
each
modul
in
the
system
the
lower
the
coupl
between
modul
is
thi
correl
is
not
perfect
but
it
ha
been
observ
in
practic
there
are
sever
level
of
cohes
coincident
is
the
lowest
level
and
function
is
the
highest
coincident
co-
hesion
occur
when
there
is
no
meaning
relationship
among
the
element
of
a
modul
coincident
cohes
can
occur
if
an
exist
program
is
mod-
ular
by
chop
it
into
piec
and
make
differ
piec
modul
if
a
modul
is
creat
to
save
duplic
code
by
combin
some
part
of
code
that
occur
at
mani
differ
place
that
modul
is
like
to
have
coincident
cohes
a
modul
ha
logic
cohes
if
there
is
some
logic
relationship
between
the
element
of
a
modul
and
the
element
perform
function
that
fall
in
the
same
logic
class
a
typic
exampl
of
thi
kind
of
cohes
is
a
modul
that
perform
all
the
input
or
all
the
output
in
such
a
situat
if
we
want
to
input
or
output
a
particular
record
we
have
to
somehow
convey
thi
to
the
modul
often
thi
will
be
done
by
pass
some
kind
of
special
statu
flag
which
will
be
use
to
determin
what
statement
to
execut
in
the
modul
besid
result
in
hybrid
inform
flow
between
modul
which
is
gener
the
worst
form
of
coupl
between
modul
such
a
modul
will
usual
have
tricki
and
clumsi
code
in
gener
logic
cohes
modul
should
be
avoid
if
possibl
tempor
cohes
is
the
same
a
logic
cohes
except
that
the
element
are
also
relat
in
time
and
are
execut
togeth
modul
that
perform
activ-
iti
like
initi
cleanup
and
termin
are
usual
tempor
bound
even
though
the
element
in
a
tempor
bound
modul
are
logic
relat
tempor
cohes
is
higher
than
logic
cohes
becaus
the
element
are
all
execut
togeth
thi
avoid
the
problem
of
pass
the
flag
and
the
code
is
usual
simpler
a
procedur
cohes
modul
contain
element
that
belong
to
a
common
procedur
unit
for
exampl
a
loop
or
a
sequenc
of
decis
statement
in
a
modul
may
be
combin
to
form
a
separ
modul
procedur
cohes
modul
often
occur
when
modular
structur
is
determin
from
some
form
of
flowchart
procedur
cohes
often
cut
across
function
line
a
modul
with
onli
procedur
cohes
may
contain
onli
part
of
a
complet
function
or
part
of
sever
function
a
modul
with
commun
cohes
ha
element
that
are
relat
by
a
refer
to
the
same
input
or
output
data
that
is
in
a
commun
bound
modul
the
element
are
togeth
becaus
they
oper
on
the
same
input
or
output
data
an
exampl
of
thi
could
be
a
modul
to
print
and
punch
record.
commun
cohes
modul
may
perform
more
than
one
function
howev
commun
cohes
is
suffici
high
a
to
be
gener
accept
if
altern
structur
with
higher
cohes
can
not
be
easili
identifi
when
the
element
are
togeth
in
a
modul
becaus
the
output
of
one
form
the
input
to
anoth
we
get
sequenti
cohes
if
we
have
a
sequenc
of
element
in
which
the
output
of
one
form
the
input
to
anoth
sequenti
cohes
doe
not
provid
ani
guidelin
on
how
to
combin
them
into
modul
function
cohes
is
the
strongest
cohes
in
a
function
bound
mod-
ule
all
the
element
of
the
modul
are
relat
to
perform
a
singl
function
by
function
we
do
not
mean
simpli
mathemat
function
modul
accom-
plish
a
singl
goal
are
also
includ
function
like
comput
squar
root
and
sort
the
array
are
clear
exampl
of
function
cohes
modul
how
doe
one
determin
the
cohes
level
of
a
modul
there
is
no
math-
emat
formula
that
can
be
use
we
have
to
use
our
judgment
for
thi
a
use
techniqu
for
determin
if
a
modul
ha
function
cohes
is
to
write
a
sentenc
that
describ
fulli
and
accur
the
function
or
purpos
of
the
modul
modul
with
function
cohes
can
alway
be
describ
by
a
simpl
sentenc
if
we
can
not
describ
it
use
a
simpl
sentenc
the
modul
is
not
like
to
have
function
cohes
cohes
in
object-ori
system
ha
three
aspect
30
method
cohes
is
the
same
a
cohes
in
function
modul
it
focu
on
whi
the
differ
code
element
of
a
method
are
togeth
within
the
method
the
highest
form
of
cohes
is
if
each
method
implement
a
clearli
defin
function
and
all
statement
in
the
method
contribut
to
implement
thi
function
class
cohes
focu
on
whi
differ
attribut
and
method
are
togeth
in
thi
class
the
goal
is
to
have
a
class
that
implement
a
singl
concept
or
abstract
with
all
element
contribut
toward
support
thi
concept
in
gener
whenev
there
are
multipl
concept
encapsul
within
a
class
the
cohes
of
the
class
is
not
a
high
a
it
could
be
and
a
design
should
tri
to
chang
the
design
to
have
each
class
encapsul
a
singl
concept
one
symptom
of
the
situat
where
a
class
ha
multipl
abstract
is
that
the
set
of
method
can
be
partit
into
two
or
more
group
each
access
a
distinct
subset
of
the
attribut
that
is
the
set
of
method
and
attribut
can
be
partit
into
separ
group
each
encapsul
a
differ
concept
clearli
in
such
a
situat
by
have
separ
class
encapsul
separ
concept
we
can
have
modul
with
improv
cohes
in
mani
situat
even
though
two
or
more
concept
may
be
encapsu-
late
within
a
class
there
are
some
method
that
access
attribut
of
both
the
encapsul
concept
thi
happen
when
the
class
repres
differ
entiti
which
have
a
relationship
between
them
for
cohes
it
is
best
to
repres
them
a
two
separ
class
with
relationship
among
them
that
is
we
should
have
multipl
class
with
some
method
in
these
class
access
object
of
the
other
class
in
a
way
thi
improv
in
cohes
result
in
an
increas
coupl
howev
for
modifi
and
understand
it
is
better
if
each
class
encapsul
a
singl
concept
inherit
cohes
focu
on
the
reason
whi
class
are
togeth
in
a
hierarchi
the
two
main
reason
for
inherit
are
to
model
generalization-
special
relationship
and
for
code
reus
cohes
is
consid
high
if
the
hierarchi
support
generalization-speci
of
some
concept
which
is
like
to
natur
lead
to
reus
of
some
code
it
is
consid
lower
if
the
hierarchi
is
primarili
for
share
code
with
weak
conceptu
relationship
between
superclass
and
subclass
in
other
word
it
is
desir
that
in
an
oo
system
the
class
hierarchi
should
be
such
that
they
support
clearli
identifi
generalization-speci
relationship
thi
is
a
design
concept
which
came
into
exist
more
in
the
oo
context
like
with
cohes
and
coupl
the
basic
goal
here
is
again
to
promot
build-
ing
of
system
that
are
easili
modifi
a
modif
and
chang
happen
frequent
and
a
design
that
can
not
easili
accommod
chang
will
result
in
system
that
will
die
fast
and
will
not
be
abl
to
easili
adapt
to
the
chang
world
the
basic
principl
a
state
by
bertrand
meyer
is
softwar
entiti
should
be
open
for
extens
but
close
for
modif
66
a
modul
be
open
for
extens
mean
that
it
behavior
can
be
extend
to
accommod
new
demand
place
on
thi
modul
due
to
chang
in
requir
and
sys-
tem
function
the
modul
be
close
for
modif
mean
that
the
exist
sourc
code
of
the
modul
is
not
chang
when
make
enhanc
then
how
doe
one
make
enhanc
to
a
modul
without
chang
the
exist
sourc
code
thi
principl
restrict
the
chang
to
modul
to
extens
onli
i.e
it
allow
addit
of
code
but
disallow
chang
of
exist
code
if
thi
can
be
done
clearli
the
valu
is
tremend
code
chang
involv
heavi
risk
and
to
ensur
that
a
chang
ha
not
broken
thing
that
were
work
often
requir
a
lot
of
regress
test
thi
risk
can
be
minim
if
no
chang
are
made
to
exist
code
but
if
chang
are
not
made
how
will
enhanc
be
made
thi
principl
say
that
enhanc
should
be
made
by
ad
new
code
rather
than
alter
old
code
there
is
anoth
side
benefit
of
thi
programm
typic
prefer
write
new
code
rather
than
modifi
old
code
but
the
realiti
is
that
system
that
are
be
built
today
are
be
built
on
top
of
exist
softwar
if
thi
principl
is
satisfi
then
we
can
expand
exist
system
by
mostli
ad
new
code
to
old
system
and
minim
the
need
for
chang
code
thi
principl
can
be
satisfi
in
oo
design
by
properli
use
inherit
and
polymorph
inherit
allow
creat
new
class
that
will
extend
the
behavior
of
exist
class
without
chang
the
origin
class
and
it
is
thi
properti
that
can
be
use
to
support
thi
principl
as
an
exampl
consid
an
applic
in
which
a
client
object
of
type
client
interact
with
a
printer
object
of
class
printer1
and
invok
the
necessari
method
for
complet
it
print
need
the
class
diagram
for
thi
will
be
a
shown
in
figur
in
thi
design
the
client
directli
call
the
method
on
the
printer
object
for
print
someth
now
suppos
the
system
ha
to
be
enhanc
to
allow
anoth
printer
to
be
use
by
the
client
under
thi
design
to
implement
thi
chang
a
new
class
printer
thi
design
doe
not
support
the
open-clos
principl
a
the
client
class
is
not
close
against
chang
the
design
for
thi
system
howev
can
be
done
in
anoth
manner
that
support
the
open-clos
principl
in
thi
design
instead
of
directli
imple-
ment
the
printer
we
creat
an
abstract
class
printer
that
defin
the
interfac
of
a
printer
and
specifi
all
the
method
a
printer
object
should
sup-
port
printer
in
thi
design
when
printer
it
is
ad
a
anoth
subclass
of
type
printer
the
client
doe
not
need
to
be
awar
of
thi
subtyp
a
it
interact
with
ob-
ject
of
type
printer
that
is
the
client
onli
deal
with
a
gener
printer
and
it
interact
is
the
same
whether
the
object
is
actual
of
type
printer2
the
class
diagram
for
thi
is
shown
in
figur
it
is
thi
inherit
properti
of
oo
that
is
leverag
to
support
the
open-
close
principl
the
basic
idea
is
to
have
a
class
encapsul
the
abstract
of
some
concept
if
thi
abstract
is
to
be
extend
the
extens
is
done
by
creat
new
subclass
of
the
abstract
therebi
keep
all
the
exist
code
unchang
if
inherit
hierarchi
are
built
in
thi
manner
they
are
said
to
satisfi
the
liskov
substitut
principl
65
accord
to
thi
principl
if
a
program
is
use
object
o
base
class
c
that
program
should
remain
unchang
if
o1
where
c.
if
thi
principl
is
satisfi
for
class
hierarchi
and
hierarchi
are
use
prop-
erli
then
the
open-clos
principl
can
be
support
it
should
also
be
note
that
recommend
for
both
inherit
coupl
and
inherit
cohes
support
that
thi
principl
be
follow
in
class
hierarchi
creat
the
softwar
system
design
is
the
major
concern
of
the
design
phase
mani
design
techniqu
have
been
propos
over
the
year
to
provid
some
disciplin
in
handl
the
complex
of
design
larg
system
the
aim
of
design
methodolog
is
not
to
reduc
the
process
of
design
to
a
sequenc
of
mechan
step
but
to
provid
guidelin
to
aid
the
design
dure
the
design
process
we
discu
the
structur
design
methodolog
79
88
for
develop
function-ori
system
design
the
methodolog
employ
the
structur
chart
notat
for
creat
the
design
so
befor
we
discu
the
methodolog
we
describ
thi
notat
graphic
design
notat
are
frequent
use
dure
the
design
process
to
repres
design
or
design
decis
so
the
design
can
be
commun
to
stakehold
in
a
succinct
manner
and
evalu
for
a
function-ori
design
the
design
can
be
repres
graphic
by
structur
chart
the
structur
of
a
program
is
made
up
of
the
modul
of
that
program
togeth
with
the
interconnect
between
modul
everi
comput
program
ha
a
structur
and
given
a
program
it
structur
can
be
determin
the
structur
chart
of
a
program
is
a
graphic
represent
of
it
structur
in
a
structur
chart
a
modul
is
repres
by
a
box
with
the
modul
name
written
in
the
box
an
arrow
from
modul
a
to
modul
b
repres
that
modul
a
invok
modul
b
b
is
call
the
subordin
of
a
and
a
is
call
the
superordin
of
b
the
arrow
is
label
by
the
paramet
receiv
by
b
a
input
and
the
paramet
return
by
b
a
output
with
the
direct
of
flow
of
the
input
and
output
paramet
repres
by
small
arrow
the
paramet
can
be
shown
to
be
data
unfil
circl
at
the
tail
of
the
label
or
control
fill
circl
at
the
tail
as
an
exampl
consid
the
structur
of
the
follow
program
whose
structur
is
shown
in
figur
readnum
a
&
n
sort
a
n
scanf
&
n
sum
=
add_n
a
n
printf
sum
if
a
i
>
a
t
switch
a
i
a
t
/
add
the
first
n
number
of
a
/
add_n
a
n
in
gener
procedur
inform
is
not
repres
in
a
structur
chart
and
the
focu
is
on
repres
the
hierarchi
of
modul
howev
there
are
situat
where
the
design
may
wish
to
commun
certain
procedur
inform
explicitli
like
major
loop
and
decis
such
inform
can
also
be
repres
in
a
structur
chart
for
exampl
let
u
consid
a
situat
where
modul
a
ha
subordin
b
c
and
d
and
a
repeatedli
call
the
modul
c
and
d.
thi
can
be
repres
by
a
loop
arrow
around
the
arrow
join
the
subordin
c
and
d
to
a
a
shown
in
figur
all
the
subordin
modul
activ
within
a
common
loop
are
enclos
in
the
same
loop
arrow
major
decis
can
be
repres
similarli
for
exampl
if
the
invoc
of
modul
c
and
d
in
modul
a
depend
on
the
outcom
of
some
decis
that
is
repres
by
a
small
diamond
in
the
box
for
a
with
the
arrow
join
c
and
d
come
out
of
thi
diamond
a
shown
in
figur
modul
in
a
system
can
be
categor
into
few
class
there
are
some
modul
that
obtain
inform
from
their
subordin
and
then
pa
it
to
their
superordin
thi
kind
of
modul
is
an
input
modul
similarli
there
are
output
modul
which
take
inform
from
their
superordin
and
pa
it
on
to
it
subordin
as
the
name
suggest
the
input
and
output
mod-
ule
are
typic
use
for
input
and
output
of
data
from
and
to
the
environ-
ment
the
input
modul
get
the
data
from
the
sourc
and
get
it
readi
to
be
process
and
the
output
modul
take
the
output
produc
and
prepar
it
for
proper
present
to
the
environ
then
there
are
modul
that
exist
sole
for
the
sake
of
transform
data
into
some
other
form
such
a
modul
is
call
a
transform
modul
most
of
the
comput
modul
typic
fall
in
thi
categori
final
there
are
modul
whose
primari
concern
is
manag
the
flow
of
data
to
and
from
differ
subordin
such
modul
are
call
coordin
modul
a
modul
can
perform
function
of
more
than
one
type
of
modul
a
structur
chart
is
a
nice
represent
for
a
design
that
us
function
abstract
it
show
the
modul
and
their
call
hierarchi
the
interfac
be-
tween
the
modul
and
what
inform
pass
between
modul
so
for
a
softwar
system
onc
it
structur
is
decid
the
modul
and
their
interfac
and
depend
get
fix
the
object
of
the
structur
design
methodolog
is
to
control
the
eventu
structur
of
the
system
by
fix
the
structur
dur-
ing
design
the
aim
is
to
design
a
system
so
that
program
implement
the
design
would
have
a
hierarch
structur
with
function
cohes
modul
and
a
few
interconnect
between
modul
a
possibl
no
design
methodolog
reduc
design
to
a
seri
of
step
that
can
be
mechan-
ical
execut
all
design
methodolog
are
at
best
a
set
of
guidelin
that
if
appli
will
most
like
produc
a
design
that
is
modular
and
simpl
the
basic
principl
behind
the
structur
design
methodolog
a
with
most
other
methodolog
is
problem
partit
structur
design
methodolog
partit
the
system
at
the
veri
top
level
into
variou
subsystem
one
for
manag
each
major
input
one
for
manag
each
major
output
and
one
for
each
major
transform
the
modul
perform
the
transform
deal
with
data
at
an
abstract
level
and
henc
can
focu
on
the
conceptu
problem
of
how
to
perform
the
transform
without
bother
with
how
to
obtain
clean
input
or
how
to
present
the
output
the
rational
behind
thi
partit
is
that
in
mani
system
particularli
data
process
system
a
good
part
of
the
system
code
deal
with
manag
the
input
and
output
the
modul
deal
with
input
have
to
deal
with
issu
of
screen
read
data
format
error
except
complet
of
inform
structur
of
the
inform
etc
similarli
the
modul
deal
with
output
have
to
prepar
the
output
in
present
format
make
chart
produc
report
etc
henc
for
mani
system
it
is
inde
the
case
that
a
good
part
of
the
softwar
ha
to
deal
with
input
and
output
the
actual
transfor-
mation
in
the
system
is
frequent
not
veri
complex—it
is
deal
with
data
and
get
it
in
proper
form
for
perform
the
transform
or
produc
the
output
in
the
desir
form
that
requir
consider
process
thi
partit
is
at
the
heart
of
the
structur
design
methodolog
there
are
four
major
step
in
the
methodolog
factor
of
input
output
and
transform
branch
we
will
now
discu
each
of
these
step
in
more
detail
restat
the
problem
a
a
data
flow
diagram
to
use
thi
methodolog
the
first
step
is
to
construct
the
data
flow
diagram
for
the
problem
we
studi
data
flow
diagram
in
chapter
3
howev
there
is
a
fundament
differ
between
the
dfd
drawn
dure
requir
analysi
and
those
drawn
dure
structur
design
in
the
requir
analysi
a
dfd
is
drawn
to
model
the
problem
domain
the
analyst
ha
littl
control
over
the
problem
and
henc
hi
task
is
to
extract
from
the
problem
all
the
inform
and
then
repres
it
a
a
dfd
dure
design
activ
we
are
no
longer
model
the
problem
domain
but
are
deal
with
the
solut
domain
and
develop
a
model
for
the
eventu
system
that
is
the
dfd
dure
design
repres
how
the
data
will
flow
in
the
system
when
it
is
built
in
thi
model
the
major
transform
or
function
in
the
softwar
are
decid
and
the
dfd
show
the
major
transform
that
the
softwar
will
have
and
how
the
data
will
flow
through
differ
transform
a
dfd
of
an
atm
is
shown
in
figur
there
are
two
major
stream
of
input
data
in
thi
diagram
the
first
is
the
account
number
and
the
code
and
the
second
is
the
amount
to
be
debit
notic
the
use
of
at
differ
place
in
the
dfd
for
exampl
the
trans-
form
valid
which
verifi
if
the
account
number
and
code
are
valid
need
not
onli
the
account
number
and
code
but
also
inform
from
the
sys-
tem
databas
to
do
the
valid
and
the
transform
debit
account
ha
two
output
one
use
for
record
the
transact
and
the
other
to
updat
the
account
identifi
the
most
abstract
input
and
output
data
element
most
system
have
some
basic
transform
that
perform
the
requir
oper
how-
ever
in
most
case
the
transform
can
not
be
easili
appli
to
the
actual
physic
input
and
produc
the
desir
physic
output
instead
the
input
is
first
convert
into
a
form
on
which
the
transform
can
be
appli
with
eas
similarli
the
main
transform
modul
often
produc
output
that
have
to
be
convert
into
the
desir
physic
output
the
goal
of
thi
second
step
is
to
separ
the
transform
in
the
data
flow
diagram
that
convert
the
input
or
output
to
the
desir
format
from
the
one
that
perform
the
actual
transform
for
thi
separ
onc
the
data
flow
diagram
is
readi
the
next
step
is
to
identifi
the
highest
abstract
level
of
input
and
output
the
most
abstract
input
data
element
are
those
data
element
in
the
data
flow
diagram
that
are
farthest
remov
from
the
physic
input
but
can
still
be
consid
input
to
the
system
the
most
abstract
input
data
element
often
have
littl
resem-
blanc
to
the
actual
physic
data
these
are
often
the
data
element
obtain
after
oper
like
error
check
data
valid
proper
format
and
convers
are
complet
most
abstract
input
data
element
are
recogn
by
start
from
the
phys-
ical
input
and
travel
toward
the
output
in
the
data
flow
diagram
until
the
data
element
are
reach
that
can
no
longer
be
consid
incom
the
aim
is
to
go
a
far
a
possibl
from
the
physic
input
without
lose
the
incom
natur
of
the
data
element
thi
process
is
perform
for
each
input
stream
identifi
the
most
abstract
data
item
repres
a
valu
judgment
on
the
part
of
the
design
but
often
the
choic
is
obviou
similarli
we
identifi
the
most
abstract
output
data
element
by
start
from
the
output
in
the
data
flow
diagram
and
travel
toward
the
input
these
are
the
data
element
that
are
most
remov
from
the
actual
output
but
can
still
be
consid
outgo
these
data
element
may
also
be
consid
the
logic
output
data
item
and
the
transform
in
the
data
flow
diagram
after
these
data
item
are
basic
to
convert
the
logic
output
into
a
form
in
which
the
system
is
requir
to
produc
the
output
there
will
usual
be
some
transform
left
between
the
most
abstract
input
and
output
data
item
these
central
transform
perform
the
basic
transforma-
tion
for
the
system
take
the
most
abstract
input
and
transform
it
into
the
most
abstract
output
the
purpos
of
have
central
transform
deal
with
the
most
abstract
data
item
is
that
the
modul
implement
these
transform
can
concentr
on
perform
the
transform
without
be
concern
with
convert
the
data
into
proper
format
valid
the
data
and
so
forth
consid
now
the
data
flow
diagram
of
the
autom
teller
shown
in
figur
the
two
most
abstract
input
are
the
dollar
amount
and
the
valid
account
number
the
valid
account
number
is
the
most
abstract
input
rather
than
the
account
number
read
in
a
it
is
still
the
input—but
with
a
guarante
that
the
account
number
is
valid
the
two
abstract
output
are
obviou
the
abstract
input
and
output
are
mark
in
the
data
flow
diagram
first-level
factor
have
identifi
the
central
transform
and
the
most
abstract
input
and
output
data
item
we
are
readi
to
identifi
some
modul
for
the
system
we
first
specifi
a
main
modul
whose
purpos
is
to
invok
the
subordin
the
main
modul
is
therefor
a
coordin
modul
for
each
of
the
most
abstract
input
data
item
an
immedi
subordin
modul
to
the
main
modul
is
specifi
each
of
these
modul
is
an
input
modul
whose
purpos
is
to
deliv
to
the
main
modul
the
most
abstract
data
item
for
which
it
is
creat
similarli
for
each
most
abstract
output
data
item
a
subordin
modul
that
is
an
output
modul
that
accept
data
from
the
main
modul
is
specifi
each
of
the
arrow
connect
these
input
and
output
subordin
modul
is
label
with
the
respect
abstract
data
item
flow
in
the
proper
direct
final
for
each
central
transform
a
modul
subordin
to
the
main
one
is
specifi
these
modul
will
be
transform
modul
whose
purpos
is
to
accept
data
from
the
main
modul
and
then
return
the
appropri
data
back
to
the
main
modul
the
data
item
come
to
a
transform
modul
from
the
main
modul
are
on
the
incom
arc
of
the
correspond
transform
in
the
data
flow
diagram
the
data
item
return
are
on
the
outgo
arc
of
that
transform
note
that
here
a
modul
is
creat
for
a
transform
while
input/output
modul
are
creat
for
data
item
let
u
examin
the
data
flow
diagram
of
the
atm
we
have
alreadi
seen
that
thi
ha
two
most
abstract
input
two
most
abstract
output
and
two
central
transform
draw
a
modul
for
each
of
these
we
get
the
structur
chart
shown
in
figur
as
we
can
see
the
first-level
factor
is
straightforward
after
the
most
abstract
input
and
output
data
item
are
identifi
in
the
data
flow
diagram
the
main
modul
is
the
overal
control
modul
which
will
form
the
main
program
or
procedur
in
the
implement
of
the
design
it
is
a
coordin
modul
that
invok
the
input
modul
to
get
the
most
abstract
data
item
pass
these
to
the
appropri
transform
modul
and
deliv
the
result
of
the
transform
modul
to
other
transform
modul
until
the
most
abstract
data
item
are
obtain
these
are
then
pass
to
the
output
modul
factor
the
input
output
and
transform
branch
the
first-level
factor-
ing
result
in
a
veri
high
level
structur
where
each
subordin
modul
ha
a
lot
of
process
to
do
to
simplifi
these
modul
they
must
be
factor
into
subordin
modul
that
will
distribut
the
work
of
a
modul
each
of
the
input
output
and
transform
modul
must
be
consid
for
factor
let
u
start
with
the
input
modul
the
purpos
of
an
input
modul
a
view
by
the
main
program
is
to
produc
some
data
to
factor
an
input
modul
the
transform
in
the
data
flow
diagram
that
produc
the
data
item
is
now
treat
a
a
central
transform
the
process
perform
for
the
first-level
factor
is
repeat
here
with
thi
new
central
transform
with
the
input
modul
be
consid
the
main
modul
a
subordin
input
modul
is
creat
for
each
input
data
stream
come
into
thi
new
central
transform
and
a
subordin
transform
modul
is
creat
for
the
new
central
transform
the
new
input
modul
now
creat
can
then
be
factor
again
until
the
physic
input
are
reach
factor
of
input
modul
will
usual
not
yield
ani
output
subordin
modul
the
factor
of
the
output
modul
is
symmetr
to
the
factor
of
the
input
modul
for
an
output
modul
we
look
at
the
next
transform
to
be
appli
to
the
output
to
bring
it
closer
to
the
ultim
desir
output
thi
now
becom
the
central
transform
and
an
output
modul
is
creat
for
each
data
stream
go
out
of
thi
transform
dure
the
factor
of
output
modul
there
will
usual
be
no
input
modul
if
the
data
flow
diagram
of
the
problem
is
suffici
detail
factor
of
the
input
and
output
modul
is
straightforward
howev
there
are
no
such
rule
for
factor
the
central
transform
the
goal
is
to
determin
subtrans-
form
that
will
togeth
compos
the
overal
transform
and
then
repeat
the
process
for
the
newli
found
transform
until
we
reach
the
atom
modul
factor
the
central
transform
is
essenti
an
exercis
in
function
decom-
posit
and
will
depend
on
the
design
’
experi
and
judgment
one
way
to
factor
a
transform
modul
is
to
treat
it
a
a
problem
in
it
own
right
and
start
with
a
data
flow
diagram
for
it
the
input
to
the
data
flow
diagram
are
the
data
come
into
the
modul
and
the
output
are
the
data
be
return
by
the
modul
each
transform
in
thi
data
flow
diagram
repres
a
subtransform
of
thi
transform
the
central
transform
can
be
factor
by
creat
a
subordin
transform
modul
for
each
of
the
transform
in
thi
data
flow
diagram
thi
process
can
be
repeat
for
the
new
transform
modul
that
are
creat
until
we
reach
atom
modul
as
an
exampl
consid
the
problem
of
determin
the
number
of
differ
word
in
an
input
file
the
data
flow
diagram
for
thi
problem
is
shown
in
figur
thi
problem
ha
onli
one
input
data
stream
the
input
file
while
the
desir
output
is
the
count
of
differ
word
in
the
file
to
transform
the
input
to
the
desir
output
the
first
thing
we
do
is
form
a
list
of
all
the
word
in
the
file
it
is
best
to
then
sort
the
list
a
thi
will
make
identifi
differ
word
easier
thi
sort
list
is
then
use
to
count
the
number
of
differ
word
and
the
output
of
thi
transform
is
the
desir
count
which
is
then
print
thi
sequenc
of
data
transform
is
what
we
have
in
the
data
flow
diagram
the
arc
in
the
data
flow
diagram
are
the
most
abstract
input
and
most
abstract
output
the
choic
of
the
most
abstract
input
is
obviou
we
start
follow
the
input
first
the
input
file
is
convert
into
a
word
list
which
is
essenti
the
input
in
a
differ
form
the
sort
word
list
is
still
basic
the
input
a
it
is
still
the
same
list
in
a
differ
order
thi
appear
to
be
the
most
abstract
input
becaus
the
next
data
i.e.
count
is
not
just
anoth
form
of
the
input
data
the
choic
of
the
most
abstract
output
is
even
more
obviou
count
is
the
natur
choic
a
data
that
is
a
form
of
input
will
not
usual
be
a
candid
for
the
most
abstract
output
thu
we
have
one
cen-
tral
transform
count-number-of-different-word
which
ha
one
input
and
one
output
data
item
the
structur
chart
after
the
first-level
factor
of
the
word
count
prob-
lem
is
shown
in
figur
in
thi
structur
there
is
one
input
modul
which
return
the
sort
word
list
to
the
main
modul
the
output
modul
take
from
the
main
modul
the
valu
of
the
count
there
is
onli
one
central
transform
in
thi
exampl
and
a
modul
is
drawn
for
that
note
that
the
data
item
travel
to
and
from
thi
transform
modul
are
the
same
a
the
data
item
go
in
and
out
of
the
central
transform
the
factor
of
the
input
modul
get-sorted-list
in
the
first-level
structur
is
shown
in
figur
the
transform
produc
the
input
return
by
thi
modul
i.e.
the
sort
transform
is
treat
a
a
central
transform
it
input
is
the
word
list
thu
in
the
first
factor
we
have
an
input
modul
to
get
the
list
and
a
transform
modul
to
sort
the
list
the
input
modul
can
be
factor
further
a
the
modul
need
to
perform
two
function
get
a
word
and
then
ad
it
to
the
list
note
that
the
loop
arrow
is
use
to
show
the
iter
in
thi
exampl
there
is
onli
one
transform
after
the
most
abstract
output
so
factor
for
output
need
not
be
done
the
factor
of
the
central
transform
count-the-number-of-different-word
is
shown
in
figur
thi
wa
a
rel
simpl
transform
and
we
did
not
need
to
draw
the
data
flow
diagram
to
determin
the
number
of
word
we
have
to
get
a
word
repeatedli
determin
if
it
is
the
same
a
the
previou
word
for
a
sort
list
thi
check
is
suffici
to
determin
if
the
word
is
differ
from
other
word
and
then
count
the
word
if
it
is
differ
for
each
of
the
three
differ
function
we
have
a
subordin
modul
and
we
get
the
structur
shown
in
figur
object-ori
oo
approach
for
softwar
develop
have
becom
ex-
treme
popular
in
recent
year
much
of
the
new
develop
is
now
be
done
use
oo
techniqu
and
languag
there
are
mani
advantag
that
oo
system
offer
an
oo
model
close
repres
the
problem
domain
which
make
it
easier
to
produc
and
understand
design
as
requir
chang
the
object
in
a
system
are
le
immun
to
these
chang
therebi
permit
chang
more
easili
inherit
and
close
associ
of
object
in
design
to
problem
domain
entiti
encourag
more
re-us
i.e.
new
applic
can
use
exist
modul
more
effect
therebi
reduc
develop
cost
and
cycl
time
object-ori
approach
are
believ
to
be
more
natur
and
provid
richer
structur
for
think
and
abstract
common
design
pattern
have
also
been
uncov
that
allow
reusabl
at
a
higher
level
design
pattern
is
an
advanc
topic
which
we
will
not
discu
further
interest
reader
are
refer
to
38
the
object-ori
design
approach
is
fundament
differ
from
the
function-ori
design
approach
primarili
due
to
the
differ
abstract
that
is
use
it
requir
a
differ
way
of
think
and
partit
it
can
be
said
that
think
in
object-ori
term
is
most
import
for
produc
truli
object-ori
design
in
thi
section
we
will
first
discu
some
import
concept
that
form
the
basi
of
object-orient
we
will
then
describ
the
uml
notat
that
can
be
use
while
do
an
object-ori
design
follow
by
an
oo
design
methodolog
here
we
veri
briefli
discu
the
main
concept
behind
object-orient
read-
er
familiar
with
an
oo
languag
will
be
familiar
with
these
concept
class
and
object
class
and
object
are
the
basic
build
block
of
an
oo
design
just
like
function
and
procedur
are
for
a
function-ori
design
object
are
entiti
that
encapsul
some
state
and
provid
servic
to
be
use
by
a
client
which
could
be
anoth
object
program
or
a
user
the
basic
properti
of
an
object
is
encapsul
it
encapsul
the
data
and
inform
it
contain
and
support
a
well-defin
abstract
the
set
of
servic
that
can
be
request
from
outsid
the
object
form
the
interfac
of
the
object
an
object
may
have
oper
defin
onli
for
intern
use
that
can
not
be
use
from
outsid
such
oper
do
not
form
part
of
the
interfac
a
major
advantag
of
encapsul
is
that
access
to
the
encapsul
data
is
limit
to
the
oper
defin
on
the
data
henc
it
becom
much
easier
to
ensur
that
the
integr
of
data
is
preserv
someth
veri
hard
to
do
if
ani
program
from
outsid
can
directli
manipul
the
data
structur
of
an
object
encapsul
and
separ
of
the
interfac
and
it
implement
also
allow
the
implement
to
be
chang
without
affect
the
client
a
long
a
the
interfac
is
preserv
the
encapsul
data
for
an
object
defin
the
state
of
the
object
an
import
properti
of
object
is
that
thi
state
persist
in
contrast
to
the
data
defin
in
a
function
or
procedur
which
is
gener
lost
onc
the
function
stop
be
activ
finish
it
current
execut
in
an
object
the
state
is
preserv
and
it
persist
through
the
life
of
the
object
i.e.
unless
the
object
is
activ
destroy
the
state
and
servic
of
an
object
togeth
defin
it
behavior
we
can
say
that
the
behavior
of
an
object
is
how
an
object
react
in
term
of
state
chang
when
it
is
act
on
and
how
it
act
on
other
object
by
request
servic
and
oper
gener
for
an
object
the
defin
oper
togeth
specifi
the
behavior
of
the
object
object
repres
the
basic
runtim
entiti
in
an
oo
system
they
occupi
space
in
memori
that
keep
it
state
and
is
oper
on
by
the
defin
opera-
tion
on
the
object
a
class
on
the
other
hand
defin
a
possibl
set
of
object
we
have
seen
that
object
have
some
attribut
whose
valu
constitut
much
of
the
state
of
an
object
what
attribut
an
object
ha
are
defin
by
the
class
of
the
object
similarli
the
oper
allow
on
an
object
or
the
servic
it
provid
are
defin
by
the
class
of
the
object
but
a
class
is
mere
a
definit
that
doe
not
creat
ani
object
and
can
not
hold
ani
valu
each
object
when
it
is
creat
get
a
privat
copi
of
the
instanc
variabl
and
when
an
oper
defin
on
the
class
is
perform
on
the
object
it
is
perform
on
the
state
of
the
particular
object
the
relationship
between
a
class
and
object
of
that
class
is
similar
to
the
relationship
between
a
type
and
element
of
that
type
a
class
repres
a
set
of
object
that
share
a
common
structur
and
a
common
behavior
wherea
an
object
is
an
instanc
of
a
class
relationship
among
object
an
object
a
a
stand-alon
entiti
ha
veri
limit
capabilities—it
can
onli
provid
the
servic
defin
on
it
ani
complex
system
will
be
compos
of
mani
object
of
differ
class
and
these
object
will
interact
with
each
other
so
that
the
overal
system
object
are
met
in
object-ori
system
an
object
interact
with
anoth
by
send
a
messag
to
the
object
to
perform
some
servic
it
provid
on
receiv
the
request
messag
the
object
invok
the
request
servic
or
the
method
and
send
the
result
if
need
thi
form
of
client-serv
interact
is
a
direct
fall
out
of
encapsul
and
abstract
support
by
object
if
an
object
invok
some
servic
in
other
object
we
can
say
that
the
two
object
are
relat
in
some
way
to
each
other
if
an
object
us
some
servic
of
anoth
object
there
is
an
associ
between
the
two
object
thi
associ
is
also
call
a
link—a
link
exist
from
one
object
to
anoth
if
the
object
us
some
servic
of
the
other
object
link
frequent
show
up
a
pointer
when
program
a
link
captur
the
fact
that
a
messag
is
flow
from
one
object
to
anoth
howev
when
a
link
exist
though
the
messag
flow
in
the
direct
of
the
link
inform
can
flow
in
both
direct
e.g.
the
server
may
return
some
result
with
associ
come
the
issu
of
visibl
that
is
which
object
is
visibl
to
whom
the
basic
issu
here
is
that
if
there
is
a
link
from
object
a
to
object
b
for
a
client
object
to
be
abl
to
send
a
messag
to
b
supplier
object
b
must
be
visibl
to
a
in
the
final
program
there
are
differ
way
to
provid
thi
visibl
some
of
the
import
possibl
are
15
the
supplier
object
is
a
paramet
to
some
oper
of
the
client
that
send
the
messag
the
supplier
object
is
a
part
of
the
client
object
the
supplier
object
is
local
declar
in
some
oper
link
between
object
captur
the
client/serv
type
of
relationship
an-
other
type
of
relationship
between
object
is
aggreg
which
reflect
the
whole/part-of
relationship
though
not
necessari
aggreg
gener
im-
pli
contain
that
is
if
an
object
a
is
an
aggreg
of
object
b
and
c
then
object
b
and
c
will
gener
be
within
object
a
though
there
are
situa-
tion
where
the
conceptu
relationship
of
aggreg
may
not
get
reflect
a
actual
contain
of
object
the
main
implic
of
thi
is
that
a
contain
object
can
not
surviv
without
it
contain
object
with
link
that
is
not
the
case
inherit
and
polymorph
inherit
is
a
relat
between
class
that
allow
for
definit
and
implement
of
one
class
base
on
the
definit
of
exist
class
62
when
a
class
b
inherit
from
anoth
class
a
b
is
refer
to
a
the
subclass
or
the
deriv
class
and
a
is
refer
to
a
the
superclass
or
the
base
class
in
gener
a
subclass
b
will
have
two
part
a
deriv
part
and
an
increment
part
62
the
deriv
part
is
the
part
inherit
from
a
and
the
increment
part
is
the
new
code
and
definit
that
have
been
specif
ad
for
b
thi
is
shown
in
figur
62
object
of
type
b
have
the
deriv
part
a
well
a
the
increment
part
henc
by
defin
onli
the
increment
part
and
inherit
the
deriv
part
from
an
exist
class
we
can
defin
object
that
contain
both
inherit
is
often
call
an
is
a
relat
impli
that
an
object
of
type
b
is
also
an
instanc
of
type
a
that
is
an
instanc
of
a
subclass
though
more
than
an
instanc
of
the
superclass
is
also
an
instanc
of
the
superclass
the
inherit
relat
between
class
form
a
hierarchi
as
discuss
earlier
it
is
import
that
the
hierarchi
repres
a
structur
present
in
the
applic
domain
and
is
not
creat
simpli
to
reus
some
part
of
an
exist
class
and
the
hierarchi
should
be
such
that
an
object
of
a
class
is
also
an
object
of
all
it
superclass
in
the
problem
domain
the
power
of
inherit
lie
in
the
fact
that
all
common
featur
of
the
subclass
can
be
accumul
in
the
superclass
in
other
word
a
featur
is
place
in
the
higher
level
of
abstract
onc
thi
is
done
such
featur
can
be
inherit
from
the
parent
class
and
use
in
the
subclass
directli
thi
impli
that
if
there
are
mani
abstract
class
definit
avail
when
a
new
class
is
need
it
is
possibl
that
the
new
class
is
a
special
of
one
or
more
of
the
exist
class
in
that
case
the
exist
class
can
be
tailor
through
inherit
to
defin
the
new
class
inherit
can
be
broadli
classifi
a
be
of
two
type
strict
inherit
and
nonstrict
inherit
77
in
strict
inherit
a
subclass
take
all
the
featur
from
the
parent
class
and
add
addit
featur
to
special
it
that
is
all
data
member
and
oper
avail
in
the
base
class
are
also
avail
in
the
deriv
class
thi
form
support
the
is-a
relat
and
is
the
easiest
form
of
inherit
nonstrict
inherit
occur
when
the
subclass
doe
not
have
all
the
featur
of
the
parent
class
or
some
featur
have
been
redefin
these
form
do
not
satisfi
liskov
’
s
substitut
principl
a
class
hierarchi
need
not
be
a
simpl
tree
structur
it
may
be
a
graph
which
impli
that
a
class
may
inherit
from
multipl
class
thi
type
of
in-
herit
when
a
subclass
inherit
from
mani
superclass
is
call
multipl
inherit
multipl
inherit
complic
matter
and
it
use
is
gener
discourag
we
will
assum
that
multipl
inherit
is
not
to
be
use
inherit
bring
in
polymorph
a
gener
concept
wide
use
in
type
theori
that
deal
with
the
abil
of
an
object
to
be
of
differ
type
in
oo
program
polymorph
come
in
the
form
that
a
refer
can
refer
to
object
of
differ
type
at
differ
time
in
object-ori
system
with
inherit
polymorph
can
not
be
avoided—it
must
be
support
the
rea-
son
is
the
is
a
relat
support
by
inheritance—an
object
x
declar
to
be
of
class
b
is
also
an
object
of
ani
class
a
that
is
the
superclass
of
b
henc
anywher
an
instanc
of
a
is
expect
x
can
be
use
with
polymorph
an
entiti
ha
a
static
type
and
a
dynam
type
62
the
static
type
of
an
object
is
the
type
of
which
the
object
is
declar
in
the
program
text
and
it
remain
unchang
the
dynam
type
of
an
entiti
on
the
other
hand
can
chang
from
time
to
time
and
is
known
onli
at
refer
time
onc
an
entiti
is
declar
at
compil
time
the
set
of
type
that
thi
entiti
belong
to
can
be
determin
from
the
inherit
hierarchi
that
ha
been
defin
the
dynam
type
of
the
object
will
be
one
of
thi
set
but
the
actual
dynam
type
will
be
defin
at
the
time
of
refer
of
the
object
thi
type
of
polymorph
requir
dynam
bind
of
oper
dy-
namic
bind
mean
that
the
code
associ
with
a
given
procedur
call
is
not
known
until
the
moment
of
the
call
62
let
u
illustr
with
an
exampl
suppos
x
is
a
polymorph
refer
whose
static
type
is
b
but
whose
dynam
type
could
be
either
a
or
b
suppos
that
an
oper
o
is
defin
in
the
class
a
which
is
redefin
in
the
class
b
now
when
the
oper
o
is
in-
voke
on
x
it
is
not
known
static
what
code
will
be
execut
that
is
the
code
to
be
execut
for
the
statement
x.o
is
decid
at
runtim
depend
on
the
dynam
type
of
x—if
the
dynam
type
is
a
the
code
for
the
oper
o
in
class
a
will
be
execut
if
the
dynam
type
is
b
the
code
for
opera-
tion
o
in
class
b
will
be
execut
thi
dynam
bind
can
be
use
quit
effect
dure
applic
develop
to
reduc
the
size
of
the
code
thi
featur
polymorph
which
is
essenti
overload
of
the
featur
i.e.
a
featur
can
mean
differ
thing
in
differ
context
and
it
exact
mean
is
determin
onli
at
runtim
caus
no
problem
in
strict
inheri-
tanc
becaus
all
featur
of
a
superclass
are
avail
in
the
subclass
but
in
nonstrict
inherit
it
can
caus
problem
becaus
a
child
may
lose
a
featur
becaus
the
bind
of
the
featur
is
determin
at
runtim
thi
can
caus
a
runtim
error
a
a
situat
may
aris
where
the
object
is
bound
to
the
superclass
in
which
the
featur
is
not
present
uml
is
a
graphic
notat
for
express
object-ori
design
35
it
is
call
a
model
languag
and
not
a
design
notat
a
it
allow
repres
variou
aspect
of
the
system
not
just
the
design
that
ha
to
be
implement
for
an
oo
design
a
specif
of
the
class
that
exist
in
the
system
might
suffic
howev
while
model
dure
the
design
process
the
design
also
tri
to
understand
how
the
differ
class
are
relat
and
how
they
interact
to
provid
the
desir
function
thi
aspect
of
model
help
build
design
that
are
more
like
to
satisfi
the
requir
of
the
system
due
to
the
abil
of
uml
to
creat
differ
model
it
ha
becom
an
aid
for
understand
the
system
design
the
system
a
well
a
a
notat
for
repres
design
though
uml
ha
now
evolv
into
a
fairli
comprehens
and
larg
mod-
ele
notat
we
will
focu
on
a
few
central
concept
and
notat
relat
to
class
and
their
relationship
and
interact
for
a
more
detail
discuss
on
uml
the
reader
is
refer
to
35
class
diagram
the
class
diagram
of
uml
is
the
central
piec
in
a
design
or
model
as
the
name
suggest
these
diagram
describ
the
class
that
are
there
in
the
design
as
the
final
code
of
an
oo
implement
is
mostli
class
these
diagram
have
a
veri
close
relationship
with
the
final
code
there
are
mani
tool
that
translat
the
class
diagram
to
code
skeleton
therebi
avoid
error
that
might
get
introduc
if
the
class
diagram
are
manual
translat
to
class
definit
by
programm
a
class
diagram
defin
class
that
exist
in
the
system—besid
the
class
name
the
diagram
are
capabl
of
describ
the
key
field
a
well
a
the
import
method
of
the
class
associ
between
classes—what
type
of
associ
exist
between
dif-
ferent
class
subtyp
supertyp
relationship—class
may
also
form
subtyp
give
type
hierarchi
use
polymorph
the
class
diagram
can
repres
these
hierarchi
also
a
class
itself
is
repres
a
a
rectangular
box
which
is
divid
into
three
area
the
top
part
give
the
class
name
by
convent
the
class
name
is
a
word
with
the
first
letter
in
uppercas
in
gener
if
the
class
name
is
a
combin
of
mani
word
then
the
first
letter
of
each
word
is
in
uppercas
the
middl
part
list
the
key
attribut
or
field
of
the
class
these
attribut
are
the
state
holder
for
the
object
of
the
class
by
convent
the
name
of
the
attribut
start
in
lowercas
and
if
multipl
word
are
join
then
each
new
word
start
in
uppercas
the
bottom
part
list
the
method
or
oper
of
the
class
these
repres
the
behavior
that
the
class
can
provid
name
convent
is
same
a
for
attribut
but
to
show
that
it
is
a
function
the
name
end
with
the
paramet
of
the
method
can
also
be
specifi
if
desir
if
a
class
is
an
interfac
have
specif
but
no
bodi
thi
can
be
specifi
by
mark
the
class
with
the
stereotyp
<
<
interfac
>
>
which
is
gener
written
abov
the
class
name
similarli
if
a
class/method/attribut
ha
some
properti
that
we
want
to
specifi
it
can
be
done
by
tag
the
entiti
by
specifi
the
properti
next
to
the
entiti
name
within
and
or
by
use
some
special
symbol
exampl
of
a
class
with
some
tag
valu
and
an
interfac
are
shown
in
figur
figur
6.12
class
stereotyp
and
tag
valu
the
divided-box
notat
is
to
describ
the
key
featur
of
a
class
a
a
stand-alon
entiti
howev
class
have
relationship
between
them
and
ob-
ject
of
differ
class
interact
therefor
to
model
a
system
or
an
applica-
tion
we
must
repres
relationship
between
class
one
common
relationship
is
the
generalization-speci
relationship
between
class
which
final
get
reflect
a
the
inherit
hierarchi
in
thi
hierarchi
properti
of
gen-
eral
signific
are
assign
to
a
more
gener
class—th
superclass—whil
properti
which
can
special
an
object
further
are
put
in
the
subclass
all
properti
of
the
superclass
are
inherit
by
the
subclass
so
a
subclass
contain
it
own
properti
a
well
a
those
of
the
superclass
the
generalization-speci
relationship
is
specifi
by
have
arrow
come
from
the
subclass
to
the
superclass
with
the
empti
triangle-shap
arrowhead
touch
the
superclass
often
when
there
are
multipl
subclass
of
a
class
thi
may
be
specifi
by
have
one
arrowhead
on
the
superclass
and
then
draw
line
from
thi
to
the
differ
subclass
in
thi
hierarchi
often
special
is
done
on
the
basi
of
some
discriminator—a
distinguish
properti
that
is
use
to
special
superclass
into
differ
subclass
in
other
word
by
use
the
discrimin
object
of
the
superclass
type
are
partit
into
set
of
object
of
differ
subclass
type
the
discrimin
use
for
the
generalization-speci
relationship
can
be
specifi
by
label
the
arrow
an
exampl
of
how
thi
relationship
is
model
in
uml
is
shown
in
figur
in
thi
exampl
the
iitkperson
class
repres
all
peopl
belong
to
the
iitk
these
are
broadli
divid
into
two
subclasses—stud
and
employe
a
both
these
type
have
mani
differ
properti
some
com-
mon
one
also
and
differ
behavior
similarli
student
have
two
differ
subclass
undergradu
and
postgradu
both
requir
some
differ
attribut
and
have
differ
constraint
the
employe
class
ha
subtyp
repres
the
faculti
staff
and
research
staff
thi
hierarchi
is
from
an
actual
work
system
develop
for
the
institut
besid
the
generalization-speci
relationship
anoth
common
re-
lationship
is
associ
which
allow
object
to
commun
with
each
other
an
associ
between
two
class
mean
that
an
object
of
one
class
need
some
servic
from
object
of
the
other
class
to
perform
it
own
servic
the
relationship
is
that
of
peer
in
that
object
of
both
the
class
can
use
servic
of
the
other
the
associ
is
shown
by
a
line
between
the
two
class
an
associ
may
have
a
name
which
can
be
specifi
by
label
the
associ
line
the
associ
can
also
be
assign
some
attribut
of
it
own
and
if
the
role
of
the
two
end
of
the
associ
need
to
be
name
that
can
also
be
done
in
an
associ
an
end
may
also
have
multipl
allow
rela-
tionship
like
1
etc.
to
be
model
where
there
is
a
fix
multipl
it
is
repres
by
put
a
number
at
that
end
a
zero
or
mani
multipl
is
repres
by
a
figur
6.14
aggreg
and
associ
among
class
anoth
type
of
relationship
is
the
part-whol
relationship
which
repres
the
situat
when
an
object
is
compos
of
mani
part
each
part
itself
be
an
object
thi
situat
repres
contain
or
aggreg
i.e.
object
of
a
class
is
contain
insid
the
object
of
anoth
class
contain
and
ag-
gregat
can
be
treat
separ
and
shown
differ
but
we
will
consid
them
a
the
same
for
repres
thi
aggreg
relationship
the
class
which
repres
the
whole
is
shown
at
the
top
and
a
line
eman
from
a
littl
diamond
connect
it
to
class
which
repres
the
part
often
in
an
implement
thi
relationship
is
implement
in
the
same
manner
a
an
as-
sociat
henc
thi
relationship
is
also
sometim
model
a
an
associ
the
associ
and
aggreg
are
shown
in
figur
expand
the
exampl
given
abov
an
object
of
iitkperson
type
contain
two
object
of
type
address
repres
the
perman
address
and
the
current
address
it
also
contain
an
object
of
type
biometricinfo
which
keep
inform
like
the
person
’
s
pictur
and
signatur
as
these
object
are
common
to
all
peopl
they
belong
in
the
parent
class
rather
than
a
subclass
an
iitkperson
is
allow
to
take
some
advanc
from
the
institut
to
meet
expens
for
travel
medic
etc
henc
advanc
is
a
differ
class
which
incid
ha
a
hierarchi
of
it
own
to
which
iitkperson
class
ha
a
1-to-m
associ
these
relat
class
diagram
focu
on
class
and
should
not
be
confus
with
object
diagram
object
are
specif
instanc
of
class
sometim
it
is
desir
to
model
specif
object
and
the
relationship
between
them
and
for
that
object
diagram
are
use
an
object
is
repres
like
a
class
except
that
it
name
also
specifi
the
name
of
the
class
to
which
it
belong
gener
the
object
name
start
in
lowercas
and
the
class
name
is
specifi
after
a
colon
to
further
clarifi
the
entir
name
is
underlin
an
exampl
is
mylist
list
the
attribut
of
an
object
may
have
specif
valu
these
valu
can
be
specifi
by
give
them
along
with
the
attribut
name
e.g.
name
=
john
sequenc
and
collabor
diagram
class
diagram
repres
the
static
structur
of
the
system
that
is
they
captur
the
structur
of
the
code
that
may
implement
it
and
how
the
differ
class
in
the
code
are
relat
class
diagram
howev
do
not
repres
the
dynam
behavior
of
the
system
that
is
how
the
system
behav
when
it
perform
some
of
it
function
can
not
be
repres
by
class
diagram
thi
is
done
through
sequenc
diagram
or
collabor
diagram
togeth
call
interact
diagram
an
interact
diagram
typic
captur
the
behavior
of
a
use
case
and
model
how
the
differ
object
in
the
system
collabor
to
implement
the
use
case
let
u
first
discu
sequenc
diagram
which
is
perhap
more
common
of
the
two
interact
diagram
a
sequenc
diagram
show
the
seri
of
messag
exchang
between
some
object
and
their
tempor
order
when
object
collabor
to
provid
some
desir
system
function
or
implement
a
use
case
the
sequenc
diagram
is
gener
drawn
to
model
the
interact
between
object
for
a
particular
use
case
note
that
in
a
sequenc
diagram
and
also
in
collabor
diagram
it
is
object
that
particip
and
not
class
when
captur
dynam
behavior
the
role
of
class
are
limit
a
dure
execut
it
is
object
that
exist
in
a
sequenc
diagram
all
the
object
that
particip
in
the
interact
are
shown
at
the
top
a
box
with
object
name
for
each
object
a
vertic
bar
repres
it
lifelin
is
drawn
downward
a
messag
from
one
object
to
anoth
is
repres
a
an
arrow
from
the
lifelin
of
one
to
the
lifelin
of
the
other
each
messag
is
label
with
the
messag
name
which
typic
should
be
the
name
of
a
method
in
the
class
of
the
target
object
an
object
can
also
make
a
self
call
which
is
shown
a
a
messag
start
and
end
in
the
same
object
’
s
lifelin
to
clarifi
the
sequenc
of
messag
and
rel
time
of
each
time
is
repres
a
increas
a
one
move
farther
away
downward
from
the
object
name
in
the
object
life
that
is
time
is
repres
by
the
y-axi
increas
downward
figur
6.15
sequenc
diagram
for
print
a
graduat
report
use
the
lifelin
of
object
and
arrow
one
can
model
object
’
life
and
how
messag
flow
from
one
object
to
anoth
howev
frequent
a
messag
is
sent
from
one
object
to
anoth
onli
under
some
condit
thi
condit
can
be
repres
in
the
sequenc
diagram
by
specifi
it
within
bracket
befor
the
messag
name
if
a
messag
is
sent
to
multipl
receiv
object
then
thi
multipl
is
shown
by
have
a
befor
the
messag
name
each
messag
ha
a
return
which
is
when
the
oper
finish
and
return
the
valu
if
ani
to
the
invok
object
though
often
thi
messag
can
be
impli
sometim
it
may
be
desir
to
show
the
return
messag
explicitli
thi
is
done
by
use
a
dash
arrow
an
exampl
sequenc
diagram
is
shown
in
figur
thi
exampl
concern
print
the
graduat
report
for
student
the
object
for
gradreport
which
ha
the
respons
for
print
the
report
send
a
messag
to
the
student
object
for
the
relev
inform
which
request
the
coursetaken
object
for
the
cours
the
student
ha
taken
these
object
get
inform
about
the
cours
from
the
cours
object
a
collabor
diagram
also
show
how
object
commun
instead
of
use
a
timeline-bas
represent
that
is
use
by
sequenc
diagram
a
col-
labor
diagram
look
more
like
a
state
diagram
each
object
is
repres
in
the
diagram
and
the
messag
sent
from
one
object
to
anoth
are
shown
a
number
arrow
from
one
object
to
the
other
in
other
word
the
chrono-
logic
order
of
messag
is
captur
by
messag
number
in
contrast
to
a
sequenc
diagram
where
order
of
messag
is
shown
pictori
as
should
be
clear
the
two
type
of
interact
diagram
are
semant
equival
and
have
the
same
represent
power
the
collabor
diagram
for
the
abov
exampl
is
shown
in
figur
over
the
year
howev
sequenc
diagram
have
becom
more
popular
a
peopl
find
the
visual
represent
of
sequenc-
ing
quicker
to
grasp
figur
6.16
collabor
diagram
for
print
a
graduat
report
as
we
can
see
an
interact
diagram
model
the
intern
dynam
behavior
of
the
system
when
the
system
perform
some
function
the
intern
dynam-
ic
of
the
system
is
repres
in
term
of
how
the
object
interact
with
each
other
through
an
interact
diagram
one
can
clearli
see
how
a
system
inter-
nalli
implement
an
oper
and
what
messag
are
sent
between
differ
object
if
a
convinc
interact
diagram
can
not
be
construct
for
a
system
oper
with
the
class
that
have
been
identifi
in
the
class
diagram
then
it
is
safe
to
say
that
the
system
structur
is
not
capabl
of
support
thi
oper
and
that
it
must
be
enhanc
so
it
can
be
use
to
valid
if
the
system
structur
be
design
through
class
diagram
is
capabl
of
provid
the
desir
servic
as
a
system
ha
mani
function
each
involv
differ
object
in
differ
way
there
will
be
a
dynam
model
for
each
of
these
function
or
use
case
in
other
word
wherea
one
class
diagram
can
captur
the
structur
of
the
system
’
s
code
for
the
dynam
behavior
mani
diagram
are
need
howev
it
may
not
be
feasibl
or
practic
to
draw
the
interact
diagram
for
each
use
case
scenario
typic
dure
design
an
interact
diagram
of
some
key
use
case
or
function
will
be
drawn
to
make
sure
that
the
class
that
exist
can
inde
support
the
desir
use
case
and
to
understand
their
dynam
other
diagram
and
capabl
uml
is
an
extens
and
quit
elabor
model
notat
abov
we
have
discuss
notat
relat
to
two
of
the
most
common
model
develop
while
model
a
system—class
diagram
and
interact
diagram
these
two
togeth
help
model
the
static
structur
of
the
system
a
well
a
the
dynam
behavior
there
are
howev
mani
other
aspect
that
might
need
to
be
model
for
which
extra
notat
is
requir
uml
provid
notat
for
mani
differ
type
of
model
in
model
and
build
system
a
we
have
seen
compon
may
also
be
use
compon
encapsul
larger
element
and
are
semant
simpler
than
class
compon
often
encapsul
subsystem
and
provid
clearli
defin
interfac
through
which
these
compon
can
be
use
by
other
com-
ponent
in
the
system
while
design
an
architectur
a
we
have
seen
com-
ponent
are
veri
use
uml
provid
a
notat
for
specifi
a
compon
and
a
separ
notat
for
specifi
a
subsystem
in
a
larg
system
mani
class
may
be
combin
togeth
to
form
packag
where
a
packag
is
a
collec-
tion
of
mani
element
possibl
of
differ
type
uml
also
provid
a
notat
to
specifi
packag
these
are
shown
in
figur
as
discuss
in
chapter
5
the
deploy
view
of
the
system
is
distinct
from
the
compon
or
modul
view
in
a
deploy
view
the
focu
is
on
what
softwar
element
us
which
hardwar
that
is
how
the
system
is
deploy
uml
ha
notat
for
repres
a
deploy
view
the
main
element
is
a
node
repres
a
a
name
cube
which
repres
a
comput
resourc
like
the
cpu
which
physic
exist
the
name
of
the
cube
identifi
the
resourc
a
well
a
it
type
within
the
cube
for
the
node
the
softwar
element
it
deploy
which
can
be
compon
packag
class
etc
are
shown
use
their
respect
notat
if
differ
node
commun
with
each
other
thi
is
shown
by
connect
the
node
with
line
the
notat
for
packag
deploy
view
etc.
provid
structur
view
of
the
system
from
differ
perspect
uml
also
provid
notat
to
ex-
press
differ
type
of
behavior
a
state
diagram
is
a
model
in
which
the
entiti
be
model
is
view
a
a
set
of
state
with
transit
between
the
state
take
place
when
some
event
occur
a
state
is
repres
a
a
rectangl
with
round
edg
or
a
ellipsi
or
circl
transit
are
repres
by
arrow
con-
nect
two
state
detail
can
also
be
attach
to
transit
state
diagram
are
often
use
to
model
the
behavior
of
object
of
a
class—th
state
repres
the
differ
state
of
the
object
and
transit
captur
the
perform
of
the
differ
oper
on
that
object
so
wherea
interact
diagram
captur
how
object
collabor
a
state
diagram
model
how
an
object
itself
evolv
a
oper
are
perform
on
it
thi
can
help
clearli
understand
and
specifi
the
behavior
of
a
class
activ
diagram
thi
is
anoth
diagram
for
model
dynam
behavior
it
aim
to
model
a
system
by
model
the
activ
that
take
place
in
it
when
the
system
execut
for
perform
some
function
each
activ
is
repres
a
an
oval
with
the
name
of
the
activ
within
it
from
the
activ
the
system
proce
to
other
activ
often
which
activ
to
perform
next
depend
on
some
decis
thi
decis
is
shown
a
a
diamond
lead
to
multipl
activ
which
are
the
option
for
thi
decis
repeat
execut
of
some
activ
can
also
be
shown
these
diagram
are
like
flow-chart
but
also
have
notat
to
specifi
parallel
execut
of
activ
in
a
system
by
specifi
an
activ
split
into
multipl
activ
or
mani
activ
join
synchron
after
their
complet
uml
is
an
extens
notat
allow
a
model
the
flexibl
to
repres
newer
concept
a
well
there
are
mani
situat
in
which
a
model
need
some
notat
which
is
similar
to
an
exist
one
but
is
not
exactli
the
same
for
exampl
in
some
case
one
may
want
to
specifi
if
a
class
is
an
abstract
class
or
an
interfac
instead
of
have
special
notat
for
these
concept
uml
ha
the
concept
of
a
stereotyp
through
which
exist
notat
can
be
use
to
model
differ
concept
an
exist
notat
for
exampl
of
a
class
can
be
use
to
repres
some
other
similar
concept
by
specifi
it
a
a
stereotyp
by
give
the
name
of
the
new
concept
within
<
<
and
>
>
we
have
alreadi
seen
an
exampl
earlier
a
metaclass
can
be
specifi
in
a
similar
manner
and
so
can
a
util
class
one
which
ha
some
util
function
which
are
directli
use
and
whose
object
are
not
creat
tag
valu
can
be
use
to
specifi
addit
properti
of
the
element
to
which
they
are
attach
they
can
be
attach
to
ani
name
and
are
spec-
ifi
within
though
tag
valu
can
be
anyth
a
model
want
it
is
best
to
limit
it
use
to
a
few
clearli
defin
and
pre-agre
properti
like
privat
abstract
queri
readonli
etc
note
can
also
be
attach
to
the
differ-
ent
element
in
a
model
we
have
earlier
seen
the
use
of
some
tag
valu
in
figur
use
case
diagram
are
also
a
part
of
the
uml
we
discuss
use
case
in
an
earlier
chapter
in
a
use
case
diagram
each
use
case
is
shown
a
a
node
and
the
relationship
between
actor
and
use
case
is
shown
by
arc
they
are
mostli
use
to
provid
a
high-level
summari
of
use
case
mani
design
and
analysi
methodolog
have
been
propos
as
we
state
earlier
a
methodolog
basic
us
the
concept
of
oo
in
thi
case
to
pro-
vide
guidelin
for
the
design
activ
though
methodolog
are
use
they
do
not
reduc
the
activ
of
design
to
a
sequenc
of
step
that
can
be
follow
mechan
we
briefli
discu
one
methodolog
here
even
though
it
is
one
of
the
earlier
methodolog
it
basic
concept
are
still
applic
15
we
assum
that
dure
architectur
design
the
system
ha
been
divid
into
high-level
subsystem
or
compon
the
problem
we
address
is
how
to
produc
an
object-ori
design
for
a
subsystem
as
we
discuss
earlier
the
oo
design
consist
of
specif
of
all
the
class
and
object
that
will
exist
in
the
system
implement
a
complet
oo
design
should
be
such
that
in
the
implement
phase
onli
further
detail
about
method
or
attribut
need
to
be
ad
a
few
low-level
object
may
be
ad
later
but
most
of
the
class
and
object
and
their
relationship
are
identifi
dure
design
an
approach
for
creat
an
oo
design
consist
of
the
follow
sequenc
of
step
develop
the
dynam
model
and
use
it
to
defin
oper
on
class
develop
the
function
model
and
use
it
to
defin
oper
on
class
identifi
class
and
relationship
identifi
the
class
and
their
re-
lationship
requir
identif
of
object
type
in
the
problem
domain
the
structur
between
class
both
inherit
and
aggreg
attribut
of
the
differ
class
associ
between
the
differ
class
and
the
servic
each
class
need
to
provid
to
support
the
system
basic
in
thi
step
we
are
tri
to
defin
the
initi
class
diagram
of
the
design
to
identifi
analysi
object
start
by
look
at
the
problem
and
it
descrip-
tion
in
the
descript
consid
the
phrase
that
repres
entiti
includ
an
entiti
a
an
object
if
the
system
need
to
rememb
someth
about
it
the
system
need
some
servic
from
it
to
perform
it
own
servic
or
it
ha
mul-
tipl
attribut
if
the
system
doe
not
need
to
keep
inform
about
some
real-world
entiti
or
doe
not
need
ani
servic
from
the
entiti
it
need
not
be
consid
a
an
object
for
design
care
consid
object
that
have
onli
one
attribut
such
object
can
frequent
be
includ
a
attribut
in
other
object
though
in
the
analysi
we
focu
on
identifi
object
in
model
class
for
these
object
are
repres
class
have
attribut
attribut
add
detail
about
the
class
and
are
the
repositori
of
data
for
an
object
for
exampl
for
an
object
of
class
person
the
attribut
could
be
the
name
sex
and
address
the
data
store
in
form
of
valu
of
attribut
are
hidden
from
outsid
the
object
and
are
access
and
manipul
onli
by
the
servic
function
for
that
object
which
attribut
should
be
use
to
defin
the
class
of
an
object
depend
on
the
problem
and
what
need
to
be
done
for
exampl
while
model
a
hospit
system
for
the
class
person
attribut
of
height
weight
and
date
of
birth
may
be
need
although
these
may
not
be
need
for
a
databas
for
a
counti
that
keep
track
of
popul
in
variou
neighborhood
to
identifi
attribut
consid
each
class
and
see
which
attribut
are
need
by
the
problem
domain
thi
is
frequent
a
simpl
task
then
posi-
tion
each
attribut
properli
use
the
structur
if
the
attribut
is
a
common
attribut
it
should
be
place
in
the
superclass
while
if
it
is
specif
to
a
special-
ize
object
it
should
be
place
with
the
subclass
while
identifi
attribut
new
class
may
also
get
defin
or
old
class
may
disappear
e.g.
if
you
find
that
a
class
realli
is
an
attribut
of
anoth
for
a
class
diagram
we
also
need
to
identifi
the
structur
and
associ
between
class
to
identifi
the
classif
structur
consid
the
class
that
have
been
identifi
a
a
gener
and
see
if
there
are
other
class
that
can
be
consid
a
special
of
thi
the
special
should
be
meaning
for
the
problem
domain
for
exampl
if
the
problem
domain
doe
not
care
about
the
materi
use
to
make
some
object
there
is
no
point
in
special
the
class
base
on
the
materi
they
are
made
of
similarli
consid
class
a
special
and
see
if
there
are
other
class
that
have
similar
attribut
if
so
see
if
a
gener
class
can
be
identifi
of
which
these
are
special
onc
again
the
structur
obtain
must
natur
reflect
the
hierarchi
in
the
problem
domain
it
should
not
be
extract
simpli
becaus
some
class
have
some
attribut
with
the
same
name
to
identifi
assembl
structur
a
similar
approach
is
taken
consid
each
object
of
a
class
a
an
assembl
and
identifi
it
part
see
if
the
system
need
to
keep
track
of
the
part
if
it
doe
then
the
part
must
be
reflect
a
object
if
not
then
the
part
should
not
be
model
a
separ
object
then
consid
an
object
of
a
class
a
a
part
and
see
to
which
class
’
s
object
it
can
be
consid
a
belong
onc
again
thi
separ
is
maintain
onli
if
the
system
need
it
as
befor
the
structur
identifi
should
natur
reflect
the
hierarchi
in
the
problem
domain
and
should
not
be
forc
for
associ
we
need
to
identifi
the
relationship
between
instanc
of
variou
class
for
exampl
an
instanc
of
the
class
compani
may
be
relat
to
an
instanc
of
the
class
person
by
an
employ
relationship
thi
is
similar
to
what
is
done
in
er
model
and
like
in
er
model
an
instanc
connec-
tion
may
be
of
1
or
it
could
be
1
m
indic
that
one
instanc
of
thi
class
may
be
relat
to
mani
instanc
of
the
other
class
there
are
m
m
connect
and
there
are
sometim
multiway
connect
but
these
are
not
veri
common
the
associ
between
object
are
deriv
from
the
problem
domain
directli
onc
the
object
have
been
identifi
an
associ
may
have
attribut
of
it
own
these
are
typic
attribut
that
do
not
natur
belong
to
either
object
although
in
mani
situat
they
can
be
forc
to
belong
to
one
of
the
two
object
without
lose
ani
inform
it
should
not
be
done
unless
the
attribut
natur
belong
to
the
object
dynam
model
the
class
diagram
obtain
give
the
initi
module-level
design
thi
design
will
be
further
shape
by
the
event
in
the
system
a
the
design
ha
to
ensur
that
the
expect
behavior
for
the
event
can
be
support
model
the
dynam
behavior
of
the
system
will
help
in
further
refin
the
design
the
dynam
model
of
a
system
aim
to
specifi
how
the
state
of
variou
object
chang
when
event
occur
an
event
is
someth
that
happen
at
some
time
instanc
for
an
object
an
event
is
essenti
a
request
for
an
oper
an
event
typic
is
an
occurr
of
someth
and
ha
no
time
durat
associ
with
it
each
event
ha
an
initi
and
a
respond
event
can
be
intern
to
the
system
in
which
case
the
event
initi
and
the
event
respond
are
both
within
the
system
an
event
can
be
an
extern
event
in
which
case
the
event
initi
is
outsid
the
system
e.g.
the
user
or
a
sensor
a
scenario
is
a
sequenc
of
event
that
occur
in
a
particular
execut
of
the
system
a
we
have
seen
while
discuss
use
case
in
chapter
3
from
the
scenario
the
differ
event
be
perform
on
differ
object
can
be
identifi
which
are
then
use
to
identifi
servic
on
object
the
differ
scenario
togeth
can
complet
character
the
behavior
of
the
system
if
the
design
is
such
that
it
can
support
all
the
scenario
we
can
be
sure
that
the
desir
dynam
behavior
of
the
system
can
be
support
by
the
design
thi
is
the
basic
reason
for
perform
dynam
model
with
use
case
dynam
model
involv
prepar
interact
diagram
for
the
import
scenario
it
is
best
to
start
by
model
scenario
be
trigger
by
extern
event
the
scenario
should
not
necessarili
cover
all
possibl
but
the
major
one
should
be
consid
first
the
main
success
scenario
should
be
model
then
scenario
for
except
case
should
be
model
for
exampl
in
a
restau-
rant
the
main
success
scenario
for
place
an
order
could
be
the
follow
sequenc
of
action
custom
read
the
menu
custom
place
the
order
order
is
sent
to
the
kitchen
for
prepar
order
item
are
serv
custom
re-
quest
a
bill
for
the
order
bill
is
prepar
for
thi
order
custom
is
given
the
bill
custom
pay
the
bill
an
except
scenario
could
be
if
the
order
item
wa
not
avail
or
if
the
custom
cancel
hi
order
from
each
scenario
event
have
to
be
identifi
event
are
interact
with
the
outsid
world
and
object-to-object
interact
all
the
event
that
have
the
same
effect
on
the
flow
of
control
in
the
system
are
group
a
a
singl
event
type
each
event
type
is
then
alloc
to
the
object
class
that
initi
it
and
that
servic
the
event
with
thi
done
a
scenario
can
be
repres
a
a
sequenc
or
collabor
diagram
show
the
event
that
will
take
place
on
the
differ
object
in
the
execut
correspond
to
the
scenario
a
possibl
sequenc
diagram
of
the
main
success
scenario
of
the
restaur
is
given
in
figur
figur
6.18
a
sequenc
diagram
for
the
restaur
onc
the
main
scenario
are
model
variou
event
on
object
that
are
need
to
support
execut
correspond
to
the
variou
scenario
are
known
thi
inform
is
then
use
to
expand
our
view
of
the
class
in
the
design
gener
speak
for
each
event
in
the
sequenc
diagram
there
will
be
an
oper
on
the
object
on
which
the
event
is
invok
so
by
use
the
scenario
and
sequenc
diagram
we
can
further
refin
our
view
of
the
object
and
add
oper
that
are
need
to
support
some
scenario
but
may
not
have
been
identifi
dure
initi
model
for
exampl
from
the
event
trace
diagram
in
figur
we
can
see
that
place
order
and
getbil
will
be
two
oper
requir
on
the
object
of
type
order
if
thi
interact
is
to
be
support
the
effect
of
these
differ
event
on
a
class
itself
can
be
model
use
the
state
diagram
we
believ
that
the
state
transit
diagram
is
of
limit
use
dure
system
design
but
may
be
more
use
dure
detail
design
henc
we
will
discu
state
model
of
class
later
function
model
a
function
model
of
a
system
specifi
how
the
output
valu
are
comput
in
the
system
from
the
input
valu
without
consid
the
control
aspect
of
the
comput
thi
repres
the
function
view
of
the
system—th
map
from
input
to
output
and
the
variou
step
involv
in
the
map
gener
when
the
transform
from
the
input
to
output
is
complex
consist
of
mani
step
the
function
model
is
like
to
be
use
in
system
where
the
transform
of
input
to
output
is
not
complex
function
model
is
like
to
be
straightforward
as
we
have
seen
the
function
model
of
a
system
can
be
repres
by
a
data
flow
diagram
dfd
we
have
use
dfd
in
problem
model
and
the
structur
design
methodolog
discuss
earlier
just
a
with
dynam
model
the
basic
purpos
of
do
function
model
is
to
use
the
model
to
make
sure
that
the
object
model
can
perform
the
transform
requir
from
the
system
as
process
repres
oper
and
in
an
object-ori
system
most
of
the
process
is
done
by
oper
on
class
all
process
should
show
up
a
oper
on
class
some
oper
might
appear
a
singl
oper
on
an
object
other
might
appear
a
multipl
oper
on
differ
class
depend
on
the
level
of
abstract
of
the
dfd
if
the
dfd
is
suffici
detail
most
process
will
occur
a
oper
on
class
the
dfd
also
specifi
the
abstract
signatur
of
the
oper
by
identifi
the
input
and
output
defin
intern
class
and
oper
the
class
identifi
so
far
are
the
one
that
come
from
the
problem
domain
the
method
identifi
on
the
object
are
the
one
need
to
satisfi
all
the
interact
with
the
environ
and
the
user
and
to
support
the
desir
function
howev
the
final
design
is
a
blueprint
for
implement
henc
implement
issu
have
to
be
con-
sider
while
consid
implement
issu
algorithm
and
optim
issu
aris
these
issu
are
handl
in
thi
step
first
each
class
is
critic
evalu
to
see
if
it
is
need
in
it
present
form
in
the
final
implement
some
of
the
class
might
be
discard
if
the
design
feel
they
are
not
need
dure
implement
then
the
implement
of
oper
on
the
class
is
consid
for
thi
rough
algorithm
for
implement
might
be
consid
while
do
thi
a
complex
oper
may
get
defin
in
term
of
lower-level
oper
on
simpler
class
in
other
word
effect
implement
of
oper
may
requir
heavi
interact
with
some
data
structur
and
the
data
structur
to
be
consid
an
object
in
it
own
right
these
class
that
are
identifi
while
consid
implement
concern
are
larg
support
class
that
may
be
need
to
store
intermedi
result
or
to
model
some
aspect
of
the
object
whose
oper
is
to
be
implement
onc
the
implement
of
each
class
and
each
oper
on
the
class
ha
been
consid
and
it
ha
been
satisfi
that
they
can
be
implement
the
system
design
is
complet
the
detail
design
might
also
uncov
some
veri
low-level
object
but
most
such
object
should
be
identifi
dure
system
optim
and
packag
dure
design
some
ineffici
may
have
crept
in
in
thi
final
step
the
issu
of
effici
is
consid
keep
in
mind
that
the
final
structur
should
not
deviat
too
much
from
the
logic
structur
produc
variou
optim
are
possibl
and
a
design
can
exercis
hi
judgment
keep
in
mind
the
modular
aspect
also
befor
we
appli
the
methodolog
on
some
exampl
it
should
be
rememb
again
that
no
design
methodolog
reduc
the
activ
of
produc
a
design
to
a
seri
of
step
that
can
be
mechan
execut
each
step
requir
some
amount
of
engin
judgment
methodolog
are
essenti
guidelin
to
help
the
design
in
the
design
activ
they
are
not
hard-and-fast
rule
the
exampl
we
present
here
are
rel
small
and
all
aspect
of
the
methodol-
ogi
do
not
get
reflect
in
them
the
word
count
problem
let
u
first
consid
the
word
count
problem
discuss
earlier
a
an
exampl
for
structur
design
methodolog
the
initi
analysi
clearli
show
that
there
is
a
file
object
which
is
an
aggreg
of
mani
word
object
further
one
can
consid
that
there
is
a
counter
object
which
keep
track
of
the
number
of
differ
word
it
is
a
matter
of
prefer
and
opinion
whether
counter
should
be
an
object
or
count
should
be
im-
plement
a
an
oper
if
count
is
treat
a
an
oper
the
question
will
be
to
which
object
it
belong
as
it
doe
not
belong
natur
to
either
the
class
word
or
the
class
file
it
will
have
to
be
forc
into
one
of
the
class
for
thi
reason
we
have
kept
counter
a
a
separ
object
the
basic
problem
statement
find
onli
these
three
object
howev
further
analysi
for
servic
reveal
that
some
histori
mechan
is
need
to
check
if
the
word
is
uniqu
the
class
diagram
obtain
after
do
the
initi
model
is
shown
in
figur
now
let
u
consid
the
dynam
model
for
thi
problem
thi
is
essen-
tialli
a
batch
process
problem
where
a
file
is
given
a
input
and
some
output
is
given
by
the
system
henc
the
use
case
and
scenario
for
thi
problem
are
straightforward
for
exampl
the
scenario
for
the
normal
case
can
be
system
prompt
for
the
file
name
user
enter
the
file
name
figur
6.19
class
diagram
for
the
word
count
problem
from
thi
simpl
scenario
no
new
oper
are
uncov
and
our
class
diagram
stay
unchang
now
we
consid
the
function
model
one
possibl
function
model
is
shown
in
figur
the
model
reinforc
the
need
for
some
object
where
the
histori
of
what
word
have
been
seen
is
record
thi
object
is
use
to
check
the
uniqu
of
the
word
it
also
show
that
variou
oper
like
increment
isuniqu
and
addtohistori
are
need
these
oper
should
appear
a
oper
in
class
or
should
be
support
by
a
combin
of
oper
in
thi
exampl
most
of
these
process
are
reflect
a
oper
on
class
and
are
alreadi
incorpor
in
the
design
now
we
are
at
the
last
two
step
of
design
methodolog
where
implemen-
tation
and
optim
concern
are
use
to
enhanc
the
object
model
first
decis
we
take
is
that
the
histori
mechan
will
be
implement
by
a
bi-
nari
search
tree
henc
instead
of
the
class
histori
we
have
a
differ
class
btree
then
for
the
class
word
variou
oper
are
need
to
compar
dif-
ferent
word
oper
are
also
need
to
set
the
string
valu
for
a
word
and
retriev
it
the
final
class
diagram
is
similar
in
structur
to
the
one
shown
in
figur
except
for
these
chang
the
final
step
of
the
design
activ
is
to
specifi
thi
design
thi
is
not
a
part
of
the
design
methodolog
but
it
is
an
essenti
step
a
the
design
specif
is
what
form
the
major
part
of
the
design
document
the
design
specif
a
mention
earlier
should
specifi
all
the
class
that
are
in
the
design
all
method
of
the
class
along
with
their
interfac
we
use
c++
class
figur
6.20
function
model
for
the
word
count
problem
structur
for
our
specif
the
final
specif
of
thi
design
is
given
below
thi
specif
can
be
use
a
a
basi
of
implement
the
design
char
string
//
string
repres
the
word
public
bool
oper
==
word
//
check
for
equal
bool
oper
<
word
word
oper
=
word
//
the
assign
oper
void
setword
char
//
set
the
string
for
the
word
char
getword
//
get
the
string
for
the
word
word
getword
//
get
a
word
invok
oper
of
word
bool
iseof
//
check
for
end
of
file
class
btree
gener
in
<
element_typ
>
privat
btree
<
element_typ
>
left
btree
<
element_typ
>
right
void
insert
element_typ
//
to
insert
an
element
bool
lookup
element_typ
//
to
check
if
an
element
exist
as
we
can
see
all
the
class
definit
complet
with
data
member
and
oper
and
all
the
major
declar
are
given
in
the
design
specif
onli
the
implement
of
the
method
is
not
provid
thi
design
wa
later
implement
in
c++
the
convers
to
code
requir
onli
minor
addit
and
modif
to
the
design
the
final
code
wa
about
240
line
of
c++
code
count
noncom
and
nonblank
line
onli
rate
of
return
problem
let
u
consid
a
slightli
larger
problem
of
deter-
mine
the
rate
of
return
on
invest
an
investor
ha
made
invest
in
some
compani
for
each
invest
in
a
file
the
name
of
the
compani
all
the
money
he
ha
invest
in
the
initi
purchas
a
well
a
in
subsequ
purchas
and
all
the
money
he
ha
withdrawn
through
sale
of
share
or
div-
idend
are
given
along
with
the
date
of
each
transact
the
current
valu
of
the
invest
is
given
at
the
end
along
with
the
date
the
goal
is
to
find
the
rate
of
return
the
investor
is
get
for
each
invest
a
well
a
the
rate
of
return
for
the
entir
portfolio
in
addit
the
amount
he
ha
invest
initi
amount
he
ha
invest
subsequ
amount
he
ha
withdrawn
and
the
current
valu
of
the
portfolio
also
is
to
be
output
thi
is
a
practic
problem
that
is
frequent
need
by
investor
and
a
rate
of
return
calcul
can
easili
form
an
import
compon
of
a
larger
financi
manag
system
the
comput
of
rate
of
return
is
not
straight-
forward
and
can
not
be
easili
done
through
spreadsheet
henc
such
a
softwar
can
be
of
practic
use
initi
problem
analysi
easili
throw
up
a
few
object
class
of
interest—
portfolio
invest
and
transact
a
portfolio
consist
of
mani
in-
vestment
and
an
invest
consist
of
mani
transact
henc
the
class
portfolio
is
an
aggreg
of
mani
invest
and
an
invest
is
an
aggreg
of
mani
transact
a
transact
can
be
of
withdraw
type
or
deposit
type
result
in
a
class
hierarchi
with
invest
be
the
superclass
and
withdraw
and
deposit
subclass
for
an
object
of
class
invest
the
major
oper
we
need
to
perform
is
to
find
the
rate
of
return
for
the
class
portfolio
we
need
to
have
oper
to
comput
rate
of
return
total
initi
invest
total
withdraw
and
total
current
valu
of
the
portfolio
henc
we
need
oper
for
these
the
class
diagram
obtain
from
analysi
of
the
problem
is
shown
in
figur
figur
6.21
class
diagram
for
rate
of
return
problem
in
thi
problem
a
the
interact
with
the
environ
is
not
much
the
dynam
model
is
not
signific
henc
we
omit
the
dynam
model
for
thi
problem
a
possibl
function
model
is
given
in
figur
the
class
are
then
enhanc
to
make
sure
that
each
of
the
process
of
the
function
model
is
reflect
a
oper
on
variou
object
as
we
can
see
most
of
the
process
alreadi
exist
a
oper
now
we
have
to
perform
the
last
two
step
of
the
design
methodolog
where
implement
and
optim
concern
are
use
to
enhanc
the
class
while
consid
the
implement
of
comput
of
total
initi
invest-
ment
comput
of
overal
return
rate
overal
withdraw
and
so
on
we
notic
that
for
all
of
these
appropri
data
from
each
invest
is
need
figur
6.22
function
model
for
the
rate
of
return
problem
henc
to
the
class
invest
appropri
oper
need
to
be
ad
further
we
note
that
all
the
comput
for
total
initi
invest
total
current
valu
and
so
on
are
all
done
togeth
and
each
of
these
is
essenti
ad
valu
from
variou
invest
henc
we
combin
them
in
a
singl
oper
in
portfolio
and
a
correspond
singl
oper
in
invest
studi
the
class
hierarchi
we
observ
that
the
onli
differ
in
the
two
sub-
class
withdraw
and
deposit
is
that
in
one
case
the
amount
is
subtract
and
in
the
other
it
is
ad
in
such
a
situat
the
two
type
can
be
easili
consid
a
singl
type
by
keep
the
amount
a
neg
for
a
withdraw
and
posit
for
a
deposit
so
we
remov
the
subclass
therebi
simplifi
the
design
and
implement
instead
of
give
the
class
diagram
for
the
final
design
we
provid
the
specif
of
the
class
int
amount
//
money
amount
for
the
transact
int
month
//
month
of
the
transact
char
investmentnam
//
name
of
the
compani
transact
transactarray
//
list
of
transact
int
nooftransact
//
total
number
of
transact
float
rateofreturn
//
rate
of
return
gettransactdetail
//
set
detail
of
transact
computer
float
getrat
//
return
the
rate
of
the
return
comput
initv
totwithdrawl
totcurv
totdeposit
int
noofinvest
//
total
number
of
invest
int
totalinitinvest
int
totaldeposit
int
totalcurv
int
totalwithdrawl
float
rateofreturn
//
overal
rate
of
return
public
getinvestdetail
char
fname
//
pars
the
input
file
computer
//
comput
rate
of
return
printresult
//
print
return
rate
total
valu
etc
the
design
is
self-explanatori
thi
design
wa
later
implement
in
c++
code
and
we
found
that
onli
minor
implement
detail
got
ad
dure
the
implement
show
the
correct
and
complet
of
the
design
the
final
size
of
the
program
wa
about
470
line
of
c++
code
count
noncom
and
nonblank
line
onli
in
the
previou
two
section
we
discuss
two
differ
approach
for
system
design—on
base
on
function
abstract
and
one
base
on
object
in
sys-
tem
design
we
concentr
on
the
modul
in
a
system
and
how
they
interact
with
each
other
onc
the
modul
are
identifi
and
specifi
dure
the
high-
level
design
the
intern
logic
that
will
implement
the
given
specif
can
be
design
and
is
the
focu
of
thi
section
the
detail
design
activ
is
often
not
perform
formal
and
archiv
a
it
is
almost
imposs
to
keep
the
detail
design
document
consist
with
the
code
due
to
thi
develop
the
detail
design
is
use
for
the
more
complex
and
import
modul
and
is
often
done
inform
by
the
programm
a
part
of
the
person
process
of
develop
code
the
basic
goal
in
detail
design
is
to
specifi
the
logic
for
the
differ
modul
that
have
been
specifi
dure
system
design
specifi
the
logic
will
requir
develop
an
algorithm
that
will
implement
the
given
specif
here
we
consid
some
principl
for
design
algorithm
or
logic
that
will
implement
the
given
specif
the
term
algorithm
is
quit
gener
and
is
applic
to
a
wide
varieti
of
area
for
softwar
we
can
consid
an
algorithm
to
be
an
unambigu
proce-
dure
for
solv
a
problem
42
a
procedur
is
a
finit
sequenc
of
well-defin
step
or
oper
each
of
which
requir
a
finit
amount
of
memori
and
time
to
complet
in
thi
definit
we
assum
that
termin
is
an
essenti
prop-
erti
of
procedur
from
now
on
we
will
use
procedur
algorithm
and
logic
interchang
there
are
a
number
of
step
that
one
ha
to
perform
while
develop
an
algorithm
42
the
start
step
in
the
design
of
algorithm
is
statement
of
the
problem
the
problem
for
which
an
algorithm
is
be
devis
ha
to
be
precis
and
clearli
state
and
properli
understood
by
the
person
respons
for
design
the
algorithm
for
detail
design
the
problem
statement
come
from
the
system
design
that
is
the
problem
statement
is
alreadi
avail
when
the
detail
design
of
a
modul
commenc
the
next
step
is
develop-
ment
of
a
mathemat
model
for
the
problem
in
model
one
ha
to
select
the
mathemat
structur
that
are
best
suit
for
the
problem
it
can
help
to
look
at
other
similar
problem
that
have
been
solv
in
most
case
model
are
construct
by
take
model
of
similar
problem
and
modifi
the
model
to
suit
the
current
problem
the
next
step
is
the
design
of
the
algorithm
dur-
ing
thi
step
the
data
structur
and
program
structur
are
decid
onc
the
algorithm
is
design
it
correct
should
be
verifi
no
clear
procedur
can
be
given
for
design
algorithm
have
such
a
pro-
cedur
amount
to
autom
the
problem
of
algorithm
develop
which
is
not
possibl
with
the
current
method
howev
some
heurist
or
method
can
be
provid
to
help
the
design
design
algorithm
for
modul
the
most
common
method
for
design
algorithm
or
the
logic
for
a
modul
is
to
use
the
stepwis
refin
techniqu
84
the
stepwis
refin
techniqu
break
the
logic
design
problem
into
a
seri
of
step
so
that
the
develop
can
be
done
gradual
the
process
start
by
convert
the
specif
of
the
modul
into
an
abstract
descrip-
tion
of
an
algorithm
contain
a
few
abstract
statement
in
each
step
one
or
sever
statement
in
the
algorithm
develop
so
far
are
decompos
into
more
detail
instruct
the
success
refin
termin
when
all
in-
struction
are
suffici
precis
that
they
can
easili
be
convert
into
pro-
gram
languag
statement
dure
refin
both
data
and
instruct
have
to
be
refin
a
guidelin
for
refin
is
that
in
each
step
the
amount
of
decomposit
should
be
such
that
it
can
be
easili
handl
and
that
rep-
resent
one
or
two
design
decis
gener
detail
design
is
not
specifi
use
formal
program
languag
but
use
languag
that
have
formal
program
languag
like
outer
structur
like
loop
condit
etc
but
a
freer
format
for
intern
descript
thi
allow
the
design
to
focu
on
the
logic
and
not
it
represent
in
the
program
languag
for
object-ori
design
the
approach
just
discuss
for
obtain
the
de-
tail
design
can
be
use
for
design
the
logic
of
method
but
a
class
is
not
a
function
abstract
and
can
not
be
view
a
mere
a
collect
of
function
method
the
techniqu
for
get
a
more
detail
understand
of
the
class
a
a
whole
without
talk
about
the
logic
of
differ
method
ha
to
be
differ
from
the
refinement-bas
approach
an
object
of
a
class
ha
some
state
and
mani
oper
on
it
to
better
understand
a
class
the
relationship
between
the
state
and
variou
oper
and
the
effect
of
interact
of
variou
opera-
tion
have
to
be
understood
thi
can
be
view
a
one
of
the
object
of
the
detail
design
activ
for
object-ori
develop
onc
the
overal
class
is
better
understood
the
algorithm
for
it
variou
method
can
be
develop
a
method
to
understand
the
behavior
of
a
class
is
to
view
it
a
a
finit
state
automaton
which
consist
of
state
and
transit
between
state
when
model
an
object
the
state
is
the
valu
of
it
attribut
and
an
event
is
the
perform
of
an
oper
on
the
object
a
state
diagram
relat
event
and
state
by
show
how
the
state
chang
when
an
event
is
perform
a
state
diagram
for
an
object
will
gener
have
an
initi
state
from
which
all
state
are
reachabl
i.e.
there
is
a
path
from
the
initi
state
to
all
other
state
a
state
diagram
for
an
object
doe
not
repres
all
the
actual
state
of
the
object
a
there
are
mani
possibl
state
a
state
diagram
attempt
to
repres
onli
the
logic
state
of
the
object
a
logic
state
of
an
object
is
a
combin
of
all
those
state
from
which
the
behavior
of
the
object
is
similar
for
all
possibl
event
two
logic
state
will
have
differ
behavior
for
at
least
one
event
for
exampl
for
an
object
that
repres
a
stack
all
state
that
repres
a
stack
of
size
more
than
0
and
le
than
some
defin
maximum
are
similar
a
the
behavior
of
all
oper
defin
on
the
stack
will
be
similar
in
all
such
state
e.g.
push
will
add
an
element
pop
will
remov
one
etc.
howev
the
state
repres
an
empti
stack
is
differ
a
the
behavior
of
top
and
pop
oper
are
differ
now
an
error
messag
may
be
return
similarli
the
state
repres
a
full
stack
is
differ
the
state
model
for
thi
bound
size
stack
is
shown
in
figur
the
finit
state
model
of
object
is
an
aid
to
understand
the
effect
of
variou
oper
defin
on
the
class
on
the
state
of
the
object
a
good
un-
derstand
of
thi
can
aid
in
develop
the
logic
for
each
of
the
oper
to
develop
the
logic
of
oper
regular
approach
for
algorithm
develop
can
be
use
the
model
can
also
be
use
to
valid
if
the
logic
for
an
oper
is
correct
as
we
will
see
later
a
state
model
can
be
use
for
gener
test
case
for
valid
the
output
of
the
design
activ
should
be
verifi
befor
proceed
with
the
activ
of
the
next
phase
if
the
design
is
express
in
some
formal
notat
for
which
analysi
tool
are
avail
then
through
tool
it
can
be
check
for
intern
consist
e.g.
those
modul
use
by
anoth
are
defin
the
interfac
of
a
modul
is
consist
with
the
way
other
use
it
data
usag
is
consist
with
declar
etc
if
the
design
is
not
specifi
in
a
formal
execut
languag
it
can
not
be
process
through
tool
and
other
mean
for
verif
have
to
be
use
the
most
common
approach
for
verif
is
the
purpos
of
design
review
is
to
ensur
that
the
design
satisfi
the
re-
quirement
and
is
of
good
qualiti
if
error
are
made
dure
the
design
process
they
will
ultim
reflect
themselv
in
the
code
and
the
final
system
as
the
cost
of
remov
fault
caus
by
error
that
occur
dure
design
increas
with
the
delay
in
detect
the
error
it
is
best
if
design
error
are
detect
earli
befor
they
manifest
themselv
in
the
system
detect
error
in
design
is
the
purpos
of
design
review
the
system
design
review
process
is
similar
to
the
inspect
process
in
that
a
group
of
peopl
get
togeth
to
discu
the
design
with
the
aim
of
reveal
design
error
or
undesir
properti
the
review
group
must
includ
a
member
of
both
the
system
design
team
and
the
detail
design
team
the
author
of
the
requir
document
the
author
respons
for
maintain
the
design
document
and
an
independ
softwar
qualiti
engin
as
with
ani
review
it
should
be
kept
in
mind
that
the
aim
of
the
meet
is
to
uncov
design
error
not
to
tri
to
fix
them
fix
is
done
later
the
number
of
way
in
which
error
can
enter
a
design
is
limit
onli
by
the
creativ
of
the
design
the
most
import
design
error
howev
is
that
the
design
doe
not
fulli
support
some
requir
for
exampl
some
except
case
scenario
can
not
be
handl
or
some
design
constraint
ha
not
been
satisfi
for
design
qualiti
modular
is
the
main
criterion
howev
sinc
there
is
a
need
to
valid
whether
perform
requir
can
be
met
by
a
design
effici
is
anoth
key
properti
for
which
a
design
is
evalu
here
we
discu
some
of
the
metric
that
can
be
extract
from
a
design
and
that
could
be
use
for
evalu
the
design
we
do
not
discu
the
standard
metric
of
effort
or
defect
that
are
collect
a
per
the
project
plan
for
project
monitor
size
is
alway
a
product
metric
of
interest
for
size
of
a
design
the
total
number
of
modul
is
a
commonli
use
metric
by
use
an
averag
size
of
a
modul
from
thi
metric
the
final
size
in
loc
can
be
estim
and
compar
with
project
estim
anoth
metric
of
interest
is
complex
a
possibl
use
of
complex
met-
ric
at
design
time
is
to
improv
the
design
by
reduc
the
complex
of
the
modul
that
have
been
found
to
be
most
complex
thi
will
directli
improv
the
testabl
and
maintain
we
describ
some
of
the
metric
that
have
been
propos
to
quantifi
the
complex
of
design
we
first
discu
metric
for
function-ori
design
and
then
for
oo
design
network
metric
network
metric
is
a
complex
metric
that
tri
to
captur
how
good
the
structur
chart
is
as
coupl
of
a
modul
increas
if
it
is
call
by
more
modul
a
good
structur
is
consid
one
that
ha
exactli
one
caller
that
is
the
call
graph
structur
is
simplest
if
it
is
a
pure
tree
the
more
the
structur
chart
deviat
from
a
tree
the
more
complex
the
system
deviat
of
the
tree
is
then
defin
a
the
graph
impur
of
the
design
87
graph
impur
can
be
defin
a
where
n
is
the
number
of
node
in
the
structur
chart
and
e
is
the
number
of
edg
as
in
a
pure
tree
the
total
number
of
node
is
one
more
than
the
number
of
edg
the
graph
impur
for
a
tree
is
0
each
time
a
modul
ha
a
fan-in
of
more
than
one
the
graph
impur
increas
the
major
drawback
of
thi
approach
is
that
it
ignor
the
common
use
of
some
routin
like
librari
or
support
routin
an
approach
to
handl
thi
is
not
to
consid
the
lowest-level
node
for
graph
impur
becaus
most
often
the
lowest-level
modul
are
the
one
that
are
use
by
mani
differ
modul
particularli
if
the
structur
chart
wa
factor
librari
routin
are
also
at
the
lowest
level
of
the
structur
chart
even
if
they
have
a
structur
of
their
own
it
doe
not
show
in
the
structur
chart
of
the
applic
use
the
routin
other
network
metric
have
also
been
defin
for
most
of
these
metric
signific
correl
with
properti
of
interest
have
not
been
establish
henc
their
use
is
limit
to
get
some
idea
about
the
structur
of
the
design
inform
flow
metric
the
network
metric
of
graph
impur
had
the
basi
that
a
the
graph
impur
increas
the
coupl
increas
howev
it
is
not
a
veri
good
approxim
for
coupl
a
coupl
of
a
modul
increas
with
the
complex
of
the
interfac
and
the
total
number
of
modul
a
modul
is
coupl
with
whether
it
is
the
caller
or
the
calle
so
if
we
want
a
metric
that
is
better
at
quantifi
coupl
between
modul
it
should
handl
these
the
inform
flow
metric
attempt
to
defin
the
complex
in
term
of
the
total
inform
flow
through
a
modul
in
one
of
the
earliest
work
on
inform
flow
metric
48
49
the
com-
plexiti
of
a
modul
is
consid
a
depend
on
the
intramodul
complex
and
the
intermodul
complex
the
intramodul
complex
is
approxim
by
the
size
of
the
modul
in
line
of
code
the
intermodul
complex
of
a
modul
depend
on
the
total
inform
flow
in
the
modul
inflow
and
the
total
inform
flow
out
of
the
modul
outflow
the
inflow
of
a
mod-
ule
is
the
total
number
of
abstract
data
element
flow
in
the
modul
i.e.
whose
valu
are
use
by
the
modul
and
the
outflow
is
the
total
number
of
abstract
data
element
that
are
flow
out
of
the
modul
i.e.
whose
valu
are
defin
by
thi
modul
and
use
by
other
modul
the
modul
design
complex
dc
is
defin
a
the
term
inflow
outflow
refer
to
the
total
number
of
combin
of
input
sourc
and
output
destin
thi
term
is
squar
a
the
interconnect
between
the
modul
is
consid
a
more
import
factor
compar
to
the
intern
complex
determin
the
complex
of
a
modul
thi
is
base
on
the
common
experi
that
the
modul
with
more
interconnect
are
harder
to
test
or
modifi
compar
to
other
similar-s
modul
with
fewer
interconnect
the
metric
defin
earlier
defin
the
complex
of
a
modul
pure
in
term
of
the
total
amount
of
data
flow
in
and
out
of
the
modul
and
the
modul
size
a
variant
of
thi
wa
propos
base
on
the
hypothesi
that
the
modul
complex
depend
not
onli
on
the
inform
flow
in
and
out
but
also
on
the
number
of
modul
to
or
from
which
it
is
flow
the
modul
size
is
consid
an
insignific
factor
and
complex
dc
for
a
modul
is
defin
a
89
where
fan
in
repres
the
number
of
modul
that
call
thi
modul
and
fan
out
is
the
number
of
modul
thi
modul
call
how
can
thi
metric
be
use
in
design
one
method
for
highlight
the
modul
wa
suggest
in
89
let
avg
complex
be
the
averag
complex
of
the
modul
in
the
design
be
evalu
and
let
std
deviat
be
the
standard
deviat
in
the
design
complex
of
the
modul
of
the
system
the
propos
method
classifi
the
modul
in
three
categori
error-pron
complex
and
normal
if
dc
is
the
complex
of
a
modul
it
can
be
classifi
a
follow
note
that
thi
definit
of
error-pron
and
complex
is
independ
of
the
met-
ric
definit
use
to
comput
the
complex
of
modul
with
thi
approach
a
design
can
be
evalu
by
itself
not
for
overal
design
qualiti
but
to
draw
at-
tention
to
the
error-pron
and
complex
modul
thi
inform
can
then
be
use
to
redesign
the
system
to
reduc
the
complex
of
these
modul
which
also
result
in
overal
complex
reduct
thi
approach
ha
been
found
to
be
veri
effect
in
identifi
error-pron
modul
89
a
few
attempt
have
been
made
to
propos
metric
for
object-ori
softwar
1
21
64
here
we
present
some
metric
that
have
been
propos
for
evalu
the
complex
of
an
ood
as
design
of
class
is
the
central
issu
in
ood
and
the
major
output
of
ani
ood
methodolog
is
the
class
definit
these
metric
focu
on
evalu
class
the
metric
discuss
here
were
propos
in
21
we
discu
some
of
these
metric
that
were
experiment
found
to
be
most
use
in
predict
fault-pron
3
weight
method
per
class
wmc
the
effort
in
develop
a
class
will
in
some
sens
will
be
determin
by
the
number
of
method
the
class
ha
and
the
complex
of
the
method
henc
a
complex
metric
that
combin
the
number
of
method
and
the
complex
of
method
can
be
use
in
estim
the
overal
complex
of
the
class
the
weight
method
per
class
wmc
metric
doe
precis
thi
suppos
a
class
c
ha
method
m1
m2
...
mn
defin
on
it
let
the
com-
plexiti
of
the
method
mi
be
ci
as
a
method
is
like
a
regular
function
or
pro-
cedur
ani
complex
metric
that
is
applic
for
function
can
be
use
to
defin
ci
e.g.
estim
size
interfac
complex
and
data
flow
complex
the
wmc
is
defin
a
if
the
complex
of
each
method
is
consid
to
be
1
wmc
give
the
total
number
of
method
in
the
class
depth
of
inherit
tree
dit
inherit
is
a
we
have
mention
one
of
the
uniqu
featur
of
the
object-ori
paradigm
as
we
have
said
befor
inherit
is
one
of
the
main
mechan
for
reus
in
ood—th
deeper
a
particular
class
is
in
a
class
hierarchi
the
more
method
it
ha
avail
for
reus
therebi
provid
a
larger
reus
potenti
at
the
same
time
a
we
have
mention
inherit
increas
coupl
which
make
chang
a
class
harder
in
other
word
a
class
deep
in
the
hierarchi
ha
a
lot
of
method
it
can
inherit
which
make
it
difficult
to
predict
it
behavior
for
both
these
reason
it
is
use
to
have
some
metric
to
quantifi
inherit
the
depth
of
inherit
tree
dit
is
one
such
metric
the
dit
of
a
class
c
in
an
inherit
hierarchi
is
the
depth
from
the
root
class
in
the
inherit
tree
in
other
word
it
is
the
length
of
the
shortest
path
from
the
root
of
the
tree
to
the
node
repres
c
or
the
number
of
ancestor
c
ha
in
case
of
multipl
inherit
the
dit
metric
is
the
maximum
length
from
a
root
to
c
coupl
between
class
cbc
coupl
between
class
cbc
is
a
metric
that
tri
to
quantifi
coupl
that
exist
between
class
the
cbc
valu
for
a
class
c
is
the
total
number
of
other
class
to
which
the
class
is
coupl
two
class
are
consid
coupl
if
method
of
one
class
use
method
or
instanc
variabl
defin
in
the
other
class
in
gener
whether
two
class
are
coupl
can
easili
be
determin
by
look
at
the
code
and
the
definit
of
all
the
method
of
the
two
class
howev
note
that
there
are
indirect
form
of
coupl
through
pointer
etc
that
are
hard
to
identifi
by
evalu
the
code
respons
for
a
class
rfc
although
the
cbc
for
a
class
captur
the
number
of
other
class
to
which
thi
class
is
coupl
it
doe
not
quantifi
the
strength
of
interconnect
in
other
word
it
doe
not
explain
the
degre
of
connect
of
method
of
a
class
with
other
class
respons
for
a
class
rfc
tri
to
quantifi
thi
by
captur
the
total
number
of
method
that
can
be
invok
from
an
object
of
thi
class
the
rfc
valu
for
a
class
c
is
the
cardin
of
the
respons
set
for
a
class
the
respons
set
of
a
class
c
is
the
set
of
all
method
that
can
be
invok
if
a
messag
is
sent
to
an
object
of
thi
class
thi
includ
all
the
method
of
c
and
of
other
class
to
which
ani
method
of
c
send
a
messag
it
is
clear
that
even
if
the
cbc
valu
of
a
class
is
1
that
is
it
is
coupl
with
onli
one
class
the
rfc
valu
may
be
quit
high
indic
that
the
volum
of
interact
between
the
two
class
is
veri
high
it
should
be
clear
that
it
is
like
to
be
harder
to
test
class
that
have
higher
rfc
valu
the
design
of
a
system
is
a
plan
for
a
solut
such
that
if
the
plan
is
implement
the
implement
system
will
satisfi
the
requir
of
the
system
and
will
preserv
it
architectur
the
module-level
design
specifi
the
modul
that
should
be
there
in
the
system
to
implement
the
architectur
and
the
detail
design
the
process
logic
of
modul
a
system
is
consid
modular
if
each
modul
ha
a
well-defin
abstrac-
tion
and
if
chang
in
one
modul
ha
minim
impact
on
other
modul
two
criterion
use
for
evalu
the
modular
of
a
design
are
coupl
and
cohe-
sion
coupl
reflect
how
interdepend
are
modul
on
each
other
while
cohes
is
a
measur
of
the
strength
with
which
the
differ
element
of
a
modul
are
relat
in
gener
in
a
design
coupl
should
be
minim
and
cohes
maxim
a
design
should
also
support
the
open-clos
principl
that
is
the
modul
are
such
that
they
are
open
for
extens
but
close
for
modif
a
structur
chart
for
a
procedur
system
repres
the
modul
in
the
system
and
the
call
relationship
between
them
the
structur
design
methodolog
give
guidelin
on
how
to
creat
a
design
repres
a
a
structur
chart
such
that
the
modul
have
minimum
depend
on
each
other
low
coupl
and
a
high
level
of
cohes
for
thi
the
methodolog
partit
the
system
at
the
veri
top
level
into
variou
subsystem
one
for
manag
each
major
input
one
for
manag
each
major
output
and
one
for
each
major
transform
thi
cleanli
partit
the
system
into
part
each
independ
deal
with
differ
concern
the
univers
model
languag
uml
ha
variou
type
of
diagram
to
model
differ
properti
which
allow
both
static
structur
a
well
a
dynam
behavior
to
be
model
for
repres
the
static
structur
the
main
diagram
is
the
class
diagram
which
repres
the
class
in
the
system
and
relationship
between
the
class
for
model
the
dynam
behavior
sequenc
or
collabor
diagram
may
be
use
to
show
how
a
scenario
is
implement
by
involv
differ
object
use
the
uml
notat
oo
design
of
a
system
can
be
creat
the
oo
design
methodolog
focu
on
identifi
class
and
relationship
between
them
and
valid
the
class
definit
use
dynam
and
function
mod-
ele
in
detail
design
of
procedur
the
logic
for
implement
the
procedur
is
specifi
in
a
semiform
notat
for
class
state
diagram
can
be
use
to
model
the
relationship
between
method
the
most
common
method
for
verifi
a
design
is
design
review
in
which
a
team
of
peopl
review
the
design
for
the
purpos
of
find
defect
there
are
a
number
of
metric
that
can
be
use
to
evalu
the
complex-
iti
of
a
design
network
metric
evalu
the
structur
chart
and
consid
deviat
from
the
tree
a
the
metric
signifi
the
qualiti
of
design
the
inform
flow
complex
metric
defin
design
complex
base
on
the
intern
complex
of
the
modul
and
the
number
of
connect
between
modul
these
can
be
use
to
identifi
error-pron
modul
and
improv
the
design
by
reduc
their
complex
for
the
complex
of
an
object-ori
design
metric
like
weight
method
per
class
the
depth
of
inherit
tree
of
a
class
and
maximum
depth
in
the
class
hierarchi
of
thi
class
can
be
use
what
is
the
relationship
between
an
architectur
and
module-level
design
given
a
design
that
implement
the
sr
what
criterion
will
you
use
to
evalu
the
qualiti
of
thi
design
consid
a
program
contain
mani
modul
if
a
global
variabl
x
must
be
use
to
share
data
between
two
modul
a
and
b
how
would
you
design
the
interfac
of
these
modul
to
minim
coupl
what
is
the
cohes
of
the
follow
modul
how
would
you
chang
the
modul
to
increas
cohes
procedur
file
file
ptr
file
name
op
name
begin
open
perform
activ
for
open
the
file
close
perform
activ
for
open
the
file
print
print
the
file
draw
the
structur
chart
for
the
follow
program
how
would
you
modifi
thi
program
to
improv
the
modular
list
some
practic
that
you
will
follow
while
develop
a
softwar
system
use
an
object-ori
approach
to
increas
cohes
and
reduc
coupl
final
in
an
object-ori
implement
mostli
class
are
code
then
dure
design
what
is
the
role
of
dynam
model
use
uml
how
will
you
measur
the
inform
flow
complex
of
a
full
design
specifi
a
a
structur
chart
describ
two
metric
for
quantifi
complex
of
an
object-ori
design
how
will
you
use
one
of
them
to
identifi
highly-complex
or
error-pron
modul
the
goal
of
the
code
or
program
activ
is
to
implement
the
design
in
the
best
possibl
manner
the
code
activ
affect
both
test
and
main-
tenanc
profoundli
as
we
saw
earlier
the
time
spent
in
code
is
a
small
percentag
of
the
total
softwar
cost
while
test
and
mainten
consum
the
major
portion
thu
it
should
be
clear
that
the
goal
dure
code
should
not
be
just
to
reduc
the
implement
cost
but
help
reduc
the
cost
of
later
phase
dure
code
it
should
be
kept
in
mind
that
the
program
should
not
be
construct
so
that
they
are
easi
to
write
but
in
a
manner
that
they
are
easi
to
read
and
understand
a
program
is
read
a
lot
more
often
and
by
a
lot
more
peopl
dure
the
later
phase
have
readabl
and
understand
a
a
clear
object
of
the
cod-
ing
activ
can
itself
help
in
achiev
it
a
famou
experi
by
weinberg
show
that
if
programm
are
specifi
a
clear
object
for
the
program
they
usual
satisfi
it
82
in
the
experi
five
differ
team
were
given
the
same
problem
for
which
they
had
to
develop
program
howev
each
of
the
team
wa
specifi
a
differ
object
which
it
had
to
satisfi
the
differ
object
given
were
minim
the
effort
requir
to
complet
the
program
minim
the
number
of
statement
minim
the
memori
requir
maxim
the
program
clariti
and
maxim
the
output
clariti
it
wa
found
that
in
most
case
each
team
did
the
best
for
the
object
that
wa
specifi
to
it
the
rank
of
the
differ
team
for
the
differ
object
is
shown
in
tabl
the
experi
clearli
show
that
if
object
are
clear
programm
tend
to
achiev
that
object
henc
if
readabl
is
an
object
of
the
code
activ
then
it
is
like
that
programm
will
develop
easili
understand
p.
jalot
a
concis
introduct
to
softwar
engin
program
it
also
show
that
if
the
focu
is
on
minim
code
effort
program
clariti
take
a
big
hit
for
our
purpos
eas
of
understand
and
modif
are
the
basic
goal
of
the
program
activ
some
principl
like
structur
program
inform
hide
use
of
cod-
ing
standard
which
can
help
develop
more
readabl
program
some
programmer-level
process
like
increment
develop
and
test-
driven
develop
for
effici
develop
high-qual
code
how
to
manag
evolv
code
by
use
proper
sourc
code
control
and
refac-
tore
how
to
unit
test
modul
use
unit
test
framework
a
structur
code
inspect
process
that
can
be
use
effect
to
improv
the
qualiti
of
the
code
the
main
task
befor
a
programm
is
to
write
readabl
code
with
few
bug
in
it
an
addit
goal
is
to
write
code
quickli
write
solid
code
is
a
skill
that
can
onli
be
acquir
by
practic
howev
base
on
experi
some
gener
rule
and
guidelin
can
be
given
for
the
programm
good
program
produc
correct
and
simpl
program
is
a
practic
independ
of
the
target
program
languag
although
well-structur
program
languag
make
the
programm
’
s
job
simpler
in
thi
section
we
will
discu
some
concept
and
practic
that
can
help
a
programm
write
higher-qu
code
that
is
also
easier
to
understand
as
state
earlier
the
basic
object
of
the
code
activ
is
to
produc
pro-
gram
that
are
easi
to
understand
it
ha
been
argu
by
mani
that
structur
program
practic
help
develop
program
that
are
easier
to
understand
the
structur
program
movement
start
in
the
1970
and
much
ha
been
said
and
written
about
it
now
the
concept
pervad
so
much
that
it
is
gener
accepted—even
implied—that
program
should
be
structur
though
a
lot
of
emphasi
ha
been
place
on
structur
program
the
con-
cept
and
motiv
behind
structur
program
are
often
not
well
under-
stood
structur
program
is
often
regard
a
goto-less
program
although
extens
use
of
goto
is
certainli
not
desir
structur
program
can
be
written
with
the
use
of
goto
here
we
provid
a
brief
discuss
on
what
structur
program
is
a
program
ha
a
static
structur
a
well
a
a
dynam
structur
the
static
structur
is
the
structur
of
the
text
of
the
program
which
is
just
a
linear
orga-
nizat
of
statement
of
the
program
the
dynam
structur
of
the
program
is
the
sequenc
of
statement
execut
dure
the
execut
of
the
program
in
other
word
both
the
static
structur
and
the
dynam
behavior
are
sequenc
of
statement
while
the
sequenc
repres
the
static
structur
of
a
program
is
fix
the
sequenc
of
statement
it
execut
can
chang
from
execut
to
execut
it
will
clearli
be
easier
to
understand
the
dynam
behavior
if
the
structur
in
the
dynam
behavior
resembl
the
static
structur
the
closer
the
corre-
spondenc
between
execut
and
text
structur
the
easier
the
program
is
to
understand
and
the
more
differ
the
structur
dure
execut
the
harder
it
will
be
to
argu
about
the
behavior
from
the
program
text
the
goal
of
structur
program
is
to
ensur
that
the
static
structur
and
the
dynam
structur
are
the
same
that
is
the
object
of
structur
program
is
to
write
program
so
that
the
sequenc
of
statement
execut
dure
the
ex-
ecut
of
a
program
is
the
same
a
the
sequenc
of
statement
in
the
text
of
that
program
as
the
statement
in
a
program
text
are
linearli
organ
the
object
of
structur
program
becom
develop
program
whose
control
flow
dure
execut
is
linear
and
follow
the
linear
organ
of
the
program
text
the
real
motiv
for
structur
program
howev
wa
formal
ver-
ific
of
program
to
show
that
a
program
is
correct
we
need
to
show
that
when
the
program
execut
it
behavior
is
what
is
expect
for
specifi
the
behavior
we
need
to
specifi
the
condit
the
output
of
the
program
should
satisfi
as
a
program
will
usual
not
oper
on
an
arbitrari
set
of
input
data
and
may
produc
valid
result
onli
for
some
rang
of
input
we
gener
need
to
also
state
the
input
condit
in
which
the
program
is
to
be
invok
and
for
which
the
program
is
expect
to
produc
valid
result
the
assert
about
the
expect
final
state
of
a
program
is
call
the
post-condit
of
that
pro-
gram
and
the
assert
about
the
input
condit
is
call
the
pre-condit
of
the
program
often
in
program
verif
determin
the
pre-condit
for
which
the
post-condit
will
be
satisfi
is
the
goal
of
proof
use
hoar
’
s
notat
50
for
verifi
a
program
the
basic
assert
about
a
program
segment
is
of
the
form
the
interpret
of
thi
is
that
if
assert
p
is
true
befor
execut
s
then
assert
q
will
be
true
after
execut
s
if
the
execut
of
s
termin
assert
p
is
the
pre-condit
of
the
program
and
q
is
the
post-condit
these
assert
are
about
the
valu
taken
by
the
variabl
in
the
program
befor
and
after
it
execut
the
assert
gener
do
not
specifi
a
par-
ticular
valu
for
the
variabl
but
they
specifi
the
gener
properti
of
the
valu
and
the
relationship
among
them
for
verif
of
larger
program
we
would
like
to
make
assert
about
the
program
from
assert
about
it
compon
or
statement
if
the
program
is
a
sequenc
of
statement
then
determin
the
semant
of
a
composit
program
becom
easier
if
a
statement
s
is
compos
of
two
statement
s2
which
are
to
be
execut
in
sequenc
then
from
the
semant
of
s2
we
can
easili
determin
the
semant
of
s
thi
rule
is
call
rule
of
composit
in
50
a
follow
the
explan
of
thi
notat
is
that
if
what
is
state
in
the
numer
can
be
prove
the
denomin
can
be
infer
use
thi
rule
if
we
have
prove
p2
then
to
determin
the
semant
of
s1
s2
all
we
need
to
show
is
that
q2
and
then
we
can
claim
that
if
befor
execut
the
pre-condit
p
then
after
execut
of
s1
s-condit
q
in
other
word
to
prove
p
s1
s
onc
we
have
determin
the
behavior
of
s2
we
just
need
one
addit
step
thi
allow
build
proof
of
larger
program
from
proof
of
it
element
note
that
the
rule
handl
a
strict
sequenc
of
statement
onli
so
if
we
want
to
appli
thi
we
need
to
construct
the
program
a
a
sequenc
of
statement
and
that
is
the
verif
motiv
of
want
to
linear
the
control
flow
in
a
program
clearli
no
meaning
program
can
be
written
a
a
sequenc
of
simpl
statement
without
ani
branch
or
repetit
which
also
involv
branch
so
how
is
the
object
of
linear
the
control
flow
to
be
achiev
by
make
use
of
structur
construct
in
structur
program
a
statement
is
not
a
simpl
assign
statement
it
is
a
structur
statement
the
key
properti
of
a
structur
statement
is
that
it
ha
a
single-entri
and
a
single-exit
that
is
dure
execut
the
execut
of
the
structur
statement
start
from
one
defin
point
and
the
execut
termin
at
one
defin
point
with
single-entri
and
single-exit
statement
we
can
view
a
program
a
a
sequenc
of
structur
statement
and
if
all
statement
are
structur
statement
then
dure
execut
the
sequenc
of
execut
of
these
statement
will
be
the
same
a
the
sequenc
in
the
program
text
henc
by
use
single-entri
and
single-exit
statement
the
correspond
between
the
static
and
dynam
structur
can
be
obtain
the
most
commonli
use
single-entri
and
single-exit
statement
are
it
can
be
shown
that
these
three
basic
construct
are
suffici
to
program
ani
conceiv
algorithm
modern
languag
have
other
such
construct
that
help
linear
the
control
flow
of
a
program
which
gener
speak
make
it
easier
to
understand
a
program
henc
program
should
be
written
so
that
a
far
a
possibl
single-entri
single-exit
control
construct
are
use
the
basic
goal
a
we
have
tri
to
emphas
is
to
make
the
logic
of
the
program
simpl
to
understand
no
hard-and-fast
rule
can
be
formul
that
will
be
applic
under
all
circumst
structur
program
practic
form
a
good
basi
and
guidelin
for
write
program
clearli
a
final
note
about
the
structur
construct
ani
piec
of
code
with
a
single-
entri
and
single-exit
can
not
be
consid
a
structur
construct
if
that
is
the
case
one
could
alway
defin
appropri
unit
in
ani
program
to
make
it
ap-
pear
a
a
sequenc
of
these
unit
in
the
worst
case
the
whole
program
could
be
defin
to
be
a
unit
the
basic
object
of
use
structur
construct
is
to
linear
the
control
flow
so
that
the
execut
behavior
is
easier
to
under-
stand
and
argu
about
in
linear
control
flow
if
we
understand
the
behavior
of
each
of
the
basic
construct
properli
the
behavior
of
the
program
can
be
consid
a
composit
of
the
behavior
of
the
differ
statement
for
thi
approach
to
work
it
is
impli
that
we
can
clearli
understand
and
specifi
the
behavior
of
each
construct
thi
requir
that
we
be
abl
to
succinctli
captur
or
describ
the
behavior
of
each
construct
unless
we
can
do
thi
it
will
not
be
possibl
to
compos
them
clearli
for
an
arbitrari
structur
we
can
not
do
thi
mere
becaus
it
ha
a
single-entri
and
single-exit
it
is
from
thi
view-
point
that
the
structur
mention
earlier
are
chosen
a
structur
statement
there
are
well-defin
rule
that
specifi
how
these
statement
behav
dure
execut
which
allow
u
to
argu
about
larger
program
overal
it
can
be
said
that
structur
program
lead
to
program
that
are
easier
to
understand
than
unstructur
program
and
that
such
program
are
easier
to
formal
prove
howev
it
should
be
kept
in
mind
that
structur
program
is
not
an
end
in
itself
our
basic
object
is
that
the
program
be
easi
to
understand
and
structur
program
is
a
safe
approach
for
achiev
thi
object
still
there
are
some
common
program
practic
that
are
now
well
understood
that
make
use
of
unstructur
construct
e.g.
break
statement
continu
statement
although
effort
should
be
made
to
avoid
use
statement
that
effect
violat
the
single-entri
single-exit
properti
if
the
use
of
such
statement
is
the
simplest
way
to
organ
the
program
then
from
the
point
of
view
of
readabl
the
construct
should
be
use
the
main
point
is
that
ani
unstructur
construct
should
be
use
onli
if
the
structur
altern
is
harder
to
understand
thi
view
can
be
taken
onli
becaus
we
are
focus
on
readabl
if
the
object
wa
formal
verifi
structur
program
will
probabl
be
necessari
a
softwar
solut
to
a
problem
alway
contain
data
structur
that
are
meant
to
repres
inform
in
the
problem
domain
that
is
when
softwar
is
develop
to
solv
a
problem
the
softwar
us
some
data
structur
to
captur
the
inform
in
the
problem
domain
in
gener
onli
certain
oper
are
perform
on
some
inform
that
is
a
piec
of
inform
in
the
problem
domain
is
use
onli
in
a
limit
number
of
way
in
the
problem
domain
for
exampl
a
ledger
in
an
account
’
s
offic
ha
some
veri
defin
us
debit
credit
check
the
current
balanc
etc
an
oper
where
all
debit
are
multipli
togeth
and
then
divid
by
the
sum
of
all
credit
is
typic
not
perform
so
ani
inform
in
the
problem
domain
typic
ha
a
small
number
of
defin
oper
perform
on
it
when
the
inform
is
repres
a
data
structur
the
same
principl
should
be
appli
and
onli
some
defin
oper
should
be
perform
on
the
data
structur
thi
essenti
is
the
principl
of
inform
hide
the
inform
captur
in
the
data
structur
should
be
hidden
from
the
rest
of
the
system
and
onli
the
access
function
on
the
data
structur
that
repres
the
oper
perform
on
the
inform
should
be
visibl
in
other
word
when
the
inform
is
captur
in
data
structur
and
then
on
the
data
structur
that
repres
some
inform
for
each
oper
on
the
inform
an
access
function
should
be
provid
and
a
the
rest
of
the
system
in
the
problem
domain
onli
perform
these
defin
oper
on
the
inform
the
rest
of
the
modul
in
the
softwar
should
onli
use
these
access
function
to
access
and
manipul
the
data
structur
inform
hide
can
reduc
the
coupl
between
modul
and
make
the
system
more
maintain
inform
hide
is
also
an
effect
tool
for
manag
the
complex
of
develop
software—bi
use
inform
hide
we
have
separ
the
concern
of
manag
the
data
from
the
concern
of
use
the
data
to
produc
some
desir
result
mani
of
the
older
languag
like
pascal
c
and
fortran
do
not
pro-
vide
mechan
to
support
data
abstract
with
such
languag
informa-
tion
hide
can
be
support
onli
by
a
disciplin
use
of
the
languag
that
is
the
access
restrict
will
have
to
be
impos
by
the
programm
the
lan-
guag
doe
not
provid
them
most
modern
oo
languag
provid
linguist
mechan
to
implement
inform
hide
the
concept
discuss
abov
can
help
in
write
simpl
and
clear
code
with
few
bug
there
are
mani
program
practic
that
can
also
help
toward
that
object
we
discu
here
a
few
rule
that
have
been
found
to
make
code
easier
to
read
a
well
a
avoid
some
of
the
error
control
construct
as
discuss
earlier
it
is
desir
that
a
much
a
possibl
single-entri
single-exit
construct
be
use
it
is
also
desir
to
use
a
few
standard
control
construct
rather
than
use
a
wide
varieti
of
construct
just
becaus
they
are
avail
in
the
languag
goto
goto
should
be
use
sparingli
and
in
a
disciplin
manner
onli
when
the
altern
to
use
goto
is
more
complex
should
the
goto
be
use
in
ani
case
altern
must
be
thought
of
befor
final
use
a
goto
if
a
goto
must
be
use
forward
transfer
or
a
jump
to
a
later
statement
is
more
accept
than
a
backward
jump
inform
hide
as
discuss
earlier
inform
hide
should
be
support
where
possibl
onli
the
access
function
for
the
data
structur
should
be
made
visibl
while
hide
the
data
structur
behind
these
function
user-defin
type
modern
languag
allow
user
to
defin
type
like
the
enumer
type
when
such
facil
are
avail
they
should
be
ex-
ploit
where
applic
for
exampl
when
work
with
date
a
type
can
be
defin
for
the
day
of
the
week
use
such
a
type
make
the
program
much
clearer
than
defin
code
for
each
day
and
then
work
with
code
nest
if
nest
of
if-then-els
construct
becom
too
deep
then
the
logic
becom
harder
to
understand
in
case
of
deepli
nest
if-then-els
it
is
often
difficult
to
determin
the
if
statement
to
which
a
particular
els
claus
is
associ
where
possibl
deep
nest
should
be
avoid
even
if
it
mean
a
littl
ineffici
for
exampl
consid
the
follow
construct
of
nest
if-then-els
if
the
differ
condit
are
disjoint
a
they
often
are
thi
structur
can
be
convert
into
the
follow
structur
thi
sequenc
of
statement
will
produc
the
same
result
a
the
earlier
sequenc
if
the
condit
are
disjoint
but
it
is
much
easier
to
understand
the
price
is
a
littl
ineffici
modul
size
we
discuss
thi
issu
dure
system
design
a
programm
should
care
examin
ani
function
with
too
mani
statement
say
more
than
100
larg
modul
often
will
not
be
function
cohes
there
can
be
no
hard-and-fast
rule
about
modul
size
the
guid
principl
should
be
cohes
and
coupl
modul
interfac
a
modul
with
a
complex
interfac
should
be
care
examin
as
a
rule
of
thumb
ani
modul
whose
interfac
ha
more
than
five
paramet
should
be
care
examin
and
broken
into
multipl
modul
with
a
simpler
interfac
if
possibl
side
effect
when
a
modul
is
invok
it
sometim
ha
side
effect
of
modifi
the
program
state
beyond
the
modif
of
paramet
list
in
the
modul
interfac
definit
for
exampl
modifi
global
variabl
such
side
effect
should
be
avoid
where
possibl
and
if
a
modul
ha
side
effect
they
should
be
properli
document
robust
a
program
is
robust
if
it
doe
someth
plan
even
for
except
condit
a
program
might
encount
except
condit
in
such
form
a
incorrect
input
the
incorrect
valu
of
some
variabl
and
overflow
if
such
situat
do
aris
the
program
should
not
just
crash
or
core
dump
it
should
produc
some
meaning
messag
and
exit
grace
switch
case
with
default
if
there
is
no
default
case
in
a
switch
statement
the
behavior
can
be
unpredict
if
that
case
aris
at
some
point
of
time
which
wa
not
predict
at
develop
stage
such
a
practic
can
result
in
a
bug
like
null
derefer
memori
leak
a
well
a
other
type
of
seriou
bug
it
is
a
good
practic
to
alway
includ
a
default
case
s
0
=
y
/
null
derefer
if
default
occur
/
empti
catch
block
an
except
is
caught
but
if
there
is
no
action
it
may
repres
a
scenario
where
some
of
the
oper
to
be
done
are
not
perform
whenev
except
are
caught
it
is
a
good
practic
to
take
some
default
action
even
if
it
is
just
print
an
error
messag
file
inputstream
fi
=
new
file
inputstream
``
inputfil
``
empti
if
while
statement
a
condit
is
check
but
noth
is
done
base
on
the
check
thi
often
occur
due
to
some
mistak
and
should
be
caught
other
similar
error
includ
empti
final
tri
synchron
empti
static
method
etc
such
useless
check
should
be
avoid
if
x
==
0
/
noth
is
done
after
check
x
/
els
read
return
to
be
check
often
the
return
valu
from
read
is
not
check
assum
that
the
read
return
the
desir
valu
sometim
the
result
from
a
read
can
be
differ
from
what
is
expect
and
thi
can
caus
failur
later
there
may
be
some
case
where
neglect
thi
condit
may
result
in
some
seriou
error
for
exampl
if
read
from
scanf
is
more
than
expect
then
it
may
caus
a
buffer
overflow
henc
the
valu
of
read
should
be
check
befor
access
the
data
read
thi
is
the
reason
whi
most
languag
provid
a
return
valu
for
the
read
oper
return
from
final
block
one
should
not
return
from
final
block
a
it
can
creat
fals
belief
for
exampl
consid
the
code
throw
new
except
``
an
except
``
in
thi
exampl
a
valu
is
return
both
in
except
and
nonexcept
sce-
nario
henc
at
the
caller
site
the
user
will
not
be
abl
to
distinguish
between
the
two
anoth
interest
case
aris
when
we
have
a
return
from
tri
block
in
thi
case
if
there
is
a
return
in
final
also
then
the
valu
from
final
is
return
instead
of
the
valu
from
tri
correl
paramet
often
there
is
an
implicit
correl
between
the
paramet
for
exampl
in
the
code
segment
given
below
length
rep-
resent
the
size
of
buffer
if
the
correl
doe
not
hold
we
can
run
into
a
seriou
problem
like
buffer
overflow
illustr
in
the
code
fragment
below
henc
it
is
a
good
practic
to
valid
thi
correl
rather
than
assum
that
it
hold
in
gener
it
is
desir
to
do
some
counter
check
on
implicit
assumpt
about
paramet
void
char
src
int
length
char
destn
strcpi
destn
src
/
can
caus
buffer
overflow
trust
data
sourc
counter
check
should
be
made
befor
access
the
input
data
particularli
if
the
input
data
is
be
provid
by
the
user
or
is
be
obtain
over
the
network
for
exampl
while
do
the
string
copi
oper
we
should
check
that
the
sourc
string
is
null
termin
or
that
it
size
is
a
we
expect
similar
is
the
case
with
some
network
data
which
may
be
snif
and
prone
to
some
modif
or
corrupt
to
avoid
problem
due
to
these
chang
we
should
put
some
check
like
pariti
check
hash
etc.
to
ensur
the
valid
of
the
incom
data
give
import
to
except
most
programm
tend
to
give
le
attent
to
the
possibl
except
case
and
tend
to
work
with
the
main
flow
of
event
control
and
data
though
the
main
work
is
done
in
the
main
path
it
is
the
except
path
that
often
caus
softwar
system
to
fail
to
make
a
softwar
system
more
reliabl
a
programm
should
consid
all
possibl
and
write
suitabl
except
handler
to
prevent
failur
or
loss
when
such
programm
spend
far
more
time
read
code
than
write
code
over
the
life
of
the
code
the
author
spend
a
consider
time
read
it
dure
debug
and
enhanc
peopl
other
than
the
author
also
spend
consider
effort
in
read
code
becaus
the
code
is
often
maintain
by
someon
other
than
the
author
in
short
it
is
of
prime
import
to
write
code
in
a
manner
that
is
easi
to
read
and
understand
code
standard
provid
rule
and
guidelin
for
some
aspect
of
program
in
order
to
make
code
easier
to
read
most
organ
who
develop
softwar
regularli
develop
their
own
standard
in
gener
code
standard
provid
guidelin
for
programm
regard
name
file
organ
statement
and
declar
and
layout
and
com-
ment
to
give
an
idea
of
code
standard
often
call
convent
or
style
guidelin
we
discu
some
guidelin
for
java
base
on
publicli
avail
standard
from
or
java.sun.com/doc
name
convent
some
of
the
standard
name
convent
that
are
fol-
low
often
are
packag
name
should
be
in
lowercas
e.g.
mypackag
edu.iitk.math
type
name
should
be
noun
and
should
start
with
uppercas
e.g.
day
dateofbirth
eventhandl
variabl
name
should
be
noun
start
with
lowercas
e.g.
name
amount
constant
name
should
be
all
uppercas
e.g.
pi
max
iter
method
name
should
be
verb
start
with
lowercas
e.g.
getvalu
privat
class
variabl
should
have
the
suffix
e.g.
privat
int
valu
some
standard
will
requir
thi
to
be
a
prefix
variabl
with
a
larg
scope
should
have
long
name
variabl
with
a
small
scope
can
have
short
name
loop
iter
should
be
name
i
j
k
etc
the
prefix
is
should
be
use
for
boolean
variabl
and
method
to
avoid
confus
e.g.
isstatu
should
be
use
instead
of
statu
neg
boolean
variabl
name
e.g.
isnotcorrect
should
be
avoid
the
term
comput
can
be
use
for
method
where
someth
is
be
com-
pute
the
term
find
can
be
use
where
someth
is
be
look
up
e.g.
computemean
findmin
except
class
should
be
suffix
with
except
e.g.
outofboundex-
ception
file
there
are
convent
on
how
file
should
be
name
and
what
file
should
contain
such
that
a
reader
can
get
some
idea
about
what
the
file
con-
tain
some
exampl
of
these
convent
are
java
sourc
file
should
have
the
extens
.java—thi
is
enforc
by
most
compil
and
tool
each
file
should
contain
one
outer
class
and
the
class
name
should
be
the
same
a
the
file
name
line
length
should
be
limit
to
le
than
80
column
and
special
charac-
ter
should
be
avoid
if
the
line
is
longer
it
should
be
continu
and
the
continu
should
be
made
veri
clear
statement
these
guidelin
are
for
the
declar
and
execut
state-
ment
in
the
sourc
code
some
exampl
are
given
below
note
howev
that
not
everyon
will
agre
on
these
that
is
whi
organ
gener
develop
their
own
guidelin
that
can
be
follow
without
restrict
the
flexibl
of
programm
for
the
type
of
work
the
organ
doe
variabl
should
be
initi
where
declar
and
they
should
be
declar
in
the
smallest
possibl
scope
declar
relat
variabl
togeth
in
a
common
statement
unrel
vari-
abl
should
not
be
declar
in
the
same
statement
loop
variabl
should
be
initi
immedi
befor
the
loop
avoid
complex
condit
expressions—introduc
temporari
boolean
vari-
abl
instead
comment
and
layout
comment
are
textual
statement
that
are
meant
for
the
program
reader
to
aid
the
understand
of
code
the
purpos
of
com-
ment
is
not
to
explain
in
english
the
logic
of
the
program—if
the
logic
is
so
complex
that
it
requir
comment
to
explain
it
it
is
better
to
rewrit
and
simplifi
the
code
instead
in
gener
comment
should
explain
what
the
code
is
do
or
whi
the
code
is
there
so
that
the
code
can
becom
almost
stan-
dalon
for
understand
the
system
comment
should
gener
be
provid
for
block
of
code
and
in
mani
case
onli
comment
for
the
modul
need
to
be
provid
provid
comment
for
modul
is
most
use
a
modul
form
the
unit
of
test
compil
verif
and
modif
comment
for
a
modul
are
often
call
prologu
for
the
modul
which
describ
the
function
and
the
purpos
of
the
modul
it
public
interfac
and
how
the
modul
is
to
be
use
paramet
of
the
interfac
assumpt
it
make
about
the
paramet
and
ani
side
effect
it
ha
other
featur
may
also
be
includ
it
should
be
note
that
prologu
are
use
onli
if
they
are
kept
consist
with
the
logic
of
the
modul
if
the
modul
is
modifi
then
the
prologu
should
also
be
modifi
if
necessari
java
provid
document
comment
that
are
delimit
by
/
...
/
and
which
could
be
extract
to
html
file
these
comment
are
mostli
use
a
prologu
for
class
and
it
method
and
field
and
are
meant
to
provid
document
to
user
of
the
class
who
may
not
have
access
to
the
sourc
code
in
addit
to
prologu
for
modul
code
standard
may
specifi
how
and
where
comment
should
be
locat
some
such
guidelin
are
singl
line
comment
for
a
block
of
code
should
be
align
with
the
code
they
are
meant
for
there
should
be
comment
for
all
major
variabl
explain
what
they
rep-
resent
a
block
of
comment
should
be
preced
by
a
blank
comment
line
with
just
/
and
end
with
a
line
contain
just
/
trail
comment
after
statement
should
be
short
on
the
same
line
and
shift
far
enough
to
separ
them
from
statement
layout
guidelin
focu
on
how
a
program
should
be
indent
how
it
should
use
blank
line
white
space
etc.
to
make
it
more
easili
readabl
indent
guidelin
are
sometim
provid
for
each
type
of
program
construct
howev
most
programm
learn
these
by
see
the
code
of
other
and
the
code
fragment
in
book
and
document
and
mani
of
these
have
becom
fairli
standard
over
the
year
we
will
not
discu
them
further
except
to
say
that
a
programm
should
use
some
convent
and
use
them
consist
the
code
activ
start
when
some
form
of
design
ha
been
done
and
the
specif
of
the
modul
to
be
develop
are
avail
with
the
design
modul
are
assign
to
develop
for
code
when
modul
are
assign
to
develop
they
use
some
process
for
develop
the
code
clearli
a
wide
rang
of
process
are
possibl
for
achiev
thi
goal
here
we
discu
some
effect
process
that
develop
use
for
increment
develop
code
the
process
follow
by
mani
develop
is
to
write
the
code
for
the
current
assign
modul
and
when
done
perform
unit
test
on
it
and
fix
the
bug
found
then
the
code
is
check
in
the
project
repositori
to
make
it
avail
to
other
in
the
project
we
will
explain
the
process
of
check
in
later
a
better
process
for
code
which
is
often
follow
by
experienc
develop
is
to
develop
the
code
increment
that
is
write
code
for
im-
plement
onli
part
of
the
function
of
the
modul
thi
code
is
compil
and
test
with
some
quick
test
to
check
the
code
that
ha
been
written
so
far
when
the
code
pass
these
test
the
develop
proce
to
add
further
function
to
the
code
which
is
then
test
again
in
other
word
the
code
is
develop
increment
test
it
a
it
is
built
thi
code
process
is
shown
in
figur
the
basic
advantag
of
develop
code
increment
with
test
be
done
after
everi
round
of
code
is
to
facilit
debugging—an
error
found
in
some
test
can
be
safe
attribut
to
code
that
wa
ad
sinc
the
last
success
test
howev
for
follow
thi
process
it
is
essenti
that
test
be
done
through
test
script
that
can
be
run
easili
with
these
test
script
test
can
be
done
a
frequent
a
desir
and
new
test
case
can
be
ad
easili
these
test
script
are
also
a
tremend
aid
when
code
is
enhanc
in
the
future—through
the
test
script
it
can
be
quickli
check
that
the
earlier
function
is
still
work
these
test
script
can
also
be
use
with
some
enhanc
for
the
final
unit
test
that
is
often
done
befor
check
in
the
modul
test-driven
develop
tdd
8
is
a
code
process
that
turn
around
the
common
approach
to
code
instead
of
write
code
and
then
develop
test
case
to
check
the
code
in
tdd
it
is
the
other
way
around—a
programm
first
write
the
test
script
and
then
write
the
code
to
pa
the
test
the
whole
process
is
done
increment
with
test
be
written
base
on
the
specif
and
code
be
written
to
pa
the
test
the
tdd
process
is
shown
in
figur
thi
is
a
rel
new
approach
which
ha
been
adopt
in
the
extrem
program
xp
methodolog
7
the
concept
of
tdd
is
howev
gener
and
not
tie
to
ani
particular
methodolog
a
few
point
are
worth
note
about
tdd
first
the
approach
say
that
you
write
just
enough
code
to
pa
the
test
by
follow
thi
the
code
is
alway
in
sync
with
the
test
thi
is
not
alway
the
case
with
the
code-first
approach
in
which
it
is
all
too
common
to
write
a
long
piec
of
code
but
then
onli
write
a
few
test
which
cover
onli
some
part
of
the
code
by
encourag
that
code
is
written
onli
to
pa
the
test
the
respons
of
ensur
that
requir
function
is
built
is
shift
to
the
activ
of
design
the
test
case
that
is
it
is
the
task
of
test
case
to
check
that
the
code
that
will
be
develop
ha
all
the
function
need
thi
write
of
test
case
befor
the
code
is
written
make
the
develop
usage-driven
sinc
test
case
have
to
be
written
first
from
the
specif
how
the
code
is
to
be
use
get
the
attent
first
thi
help
ensur
that
the
interfac
are
from
the
perspect
of
the
user
of
the
code
and
that
key
usag
scenario
thi
can
help
reduc
interfac
error
in
tdd
some
type
of
priorit
for
code
develop
natur
hap-
pen
it
is
most
like
that
the
first
few
test
are
like
to
focu
on
use
the
main
function
gener
the
test
case
for
lower-prior
featur
or
func-
tional
will
be
develop
later
consequ
code
for
high-prior
featur
will
be
develop
first
and
lower-prior
item
will
be
develop
later
thi
ha
the
benefit
that
higher-prior
item
get
done
first
but
ha
the
drawback
that
some
of
the
lower-prior
featur
or
some
special
case
for
which
test
case
are
not
written
may
not
get
handl
in
the
code
as
the
code
is
written
to
satisfi
the
test
case
the
complet
of
the
code
depend
on
the
thorough
of
the
test
case
often
it
is
hard
and
tediou
to
write
test
case
for
all
the
scenario
or
special
condit
and
it
is
highli
unlik
that
a
develop
will
write
test
case
for
all
the
special
case
in
tdd
a
the
goal
is
to
write
enough
code
to
pa
the
test
case
such
special
case
may
not
get
handl
also
a
at
each
step
code
is
be
written
primarili
to
pa
the
test
it
may
later
be
found
that
earlier
algorithm
were
not
well
suit
in
that
case
the
code
should
be
improv
befor
new
function
is
ad
a
shown
in
figur
pair
program
is
also
a
code
process
that
ha
been
propos
a
a
key
tech-
niqu
in
extrem
program
xp
methodolog
7
in
pair
program
code
is
not
written
by
individu
programm
but
by
a
pair
of
programm
that
is
the
code
work
is
assign
not
to
an
individu
but
to
a
pair
of
individu
thi
pair
togeth
write
the
code
the
process
envisag
is
that
one
person
will
type
the
program
while
the
other
will
activ
particip
and
constantli
review
what
is
be
type
when
error
are
notic
they
are
point
out
and
correct
when
need
the
pair
discu
the
algorithm
data
structur
or
strategi
to
be
use
in
the
code
to
be
written
the
role
are
rotat
frequent
make
both
equal
partner
and
have
similar
role
the
basic
motiv
for
pair
program
is
that
a
code
read
and
code
review
have
been
found
to
be
veri
effect
in
detect
defect
by
have
a
pair
do
the
program
we
have
the
situat
where
the
code
is
get
review
a
it
is
be
type
that
is
instead
of
write
code
and
then
get
it
review
by
anoth
programm
we
have
a
programm
who
is
constantli
review
the
code
be
written
like
increment
develop
and
test
we
now
have
increment
review
take
place
besid
ongo
code
review
have
two
programm
appli
themselv
to
the
program
task
at
hand
is
like
to
result
in
better
decis
be
taken
about
the
data
structur
algorithm
interfac
logic
etc
special
condit
which
frequent
result
in
error
are
also
more
like
to
be
dealt
with
in
a
better
manner
the
potenti
drawback
of
pair
program
is
that
it
may
result
in
loss
of
product
by
assign
two
peopl
for
a
program
task
it
is
clear
that
a
pair
will
produc
better
code
a
compar
to
code
be
develop
by
a
singl
programm
the
open
question
is
whether
thi
increas
in
product
due
to
improv
code
qualiti
offset
the
loss
incur
by
put
two
peopl
on
a
task
there
are
also
issu
of
account
and
code
ownership
particularli
when
the
pair
are
not
fix
and
rotat
a
ha
been
propos
in
xp
impact
of
pair
program
is
an
activ
area
of
research
particularli
for
experiment
softwar
engin
dure
the
code
process
the
code
be
written
by
a
programm
or
a
pair
evolves—start
from
noth
to
eventu
have
a
well-test
modul
dure
thi
process
the
code
undergo
chang
besid
the
chang
due
to
the
develop
process
code
chang
are
also
need
due
to
chang
in
modul
specif
which
may
come
about
due
to
requir
chang
in
such
a
dynam
scenario
manag
evolv
code
is
a
challeng
here
we
discu
two
aspect
of
this—how
to
manag
the
differ
version
that
get
creat
and
how
to
maintain
code
qualiti
under
chang
in
a
project
mani
differ
peopl
develop
sourc
code
each
programm
cre-
ate
differ
sourc
file
which
are
eventu
combin
togeth
to
creat
execut
programm
keep
chang
their
sourc
file
a
the
code
evolv
a
we
have
seen
in
the
process
discuss
abov
and
often
make
chang
in
other
sourc
file
a
well
in
order
to
keep
control
over
the
sourc
and
their
evolut
sourc
code
control
is
almost
alway
use
in
project
use
tool
like
the
cv
on
unix
www.cvshome.org
or
visual
sourc
safe
vss
on
window
msdn.microsoft.com/vstudio/previous/ssaf
here
we
give
a
brief
descript
of
how
these
tool
are
use
in
the
code
process
our
discuss
is
base
on
cv
a
modern
sourc
code
control
system
contain
a
repositori
which
is
essen-
tialli
a
control
directori
structur
which
keep
the
full
revis
histori
of
all
the
file
produc
by
the
differ
programm
in
the
project
team
for
effici
a
file
histori
is
gener
kept
a
delta
or
increment
from
the
base
file
thi
allow
ani
older
version
of
the
file
to
be
re-creat
therebi
give
the
flexibl
to
easili
discard
a
chang
should
the
need
aris
the
repositori
is
also
the
offici
sourc
for
all
the
file
for
a
project
a
repositori
ha
to
be
set
up
with
permiss
for
differ
peopl
in
the
project
the
file
the
repositori
will
contain
are
also
specified—
these
are
the
file
whose
evolut
the
repositori
maintain
programm
use
the
repositori
to
make
their
sourc
file
chang
avail
a
well
a
obtain
other
sourc
file
some
of
the
type
of
command
that
are
gener
perform
by
a
programm
are
get
a
local
copi
a
programm
in
a
project
work
on
a
local
copi
of
the
file
command
are
provid
to
make
a
local
copi
from
the
repositori
make
a
local
copi
is
gener
call
a
checkout
an
exampl
command
is
cv
checkout
<
modul
>
which
copi
a
set
of
file
that
belong
to
the
<
modul
>
on
the
local
machin
a
user
will
get
the
latest
copi
of
the
file
howev
if
a
user
want
ani
older
version
of
a
file
can
be
obtain
from
the
repositori
a
the
complet
histori
is
maintain
mani
user
can
check
out
a
file
make
chang
to
file
s
the
chang
made
to
the
local
file
by
a
programm
remain
local
until
the
chang
are
commit
back
on
the
repositori
by
commit
e.g.
by
cv
commit
<
file
>
the
chang
made
to
the
local
file
are
made
to
the
repositori
and
are
henc
avail
to
other
thi
oper
is
also
refer
to
a
check
in
updat
a
local
copi
chang
commit
by
project
member
to
the
repositori
are
not
reflect
in
the
local
copi
that
were
made
befor
the
chang
were
commit
for
get
the
chang
the
local
copi
of
the
file
have
to
be
updat
e.g.
by
cv
updat
command
by
an
updat
all
the
chang
made
to
the
file
are
reflect
in
the
local
copi
get
report
sourc
control
tool
provid
a
host
of
command
to
provid
dif-
ferent
report
on
the
evolut
of
the
file
these
includ
report
like
the
differ
between
the
local
file
and
the
latest
version
of
the
file
all
chang
made
to
a
file
along
with
the
date
and
reason
for
chang
which
are
typ-
ical
provid
while
commit
a
chang
note
that
onc
the
chang
are
commit
they
becom
avail
to
all
member
of
the
team
who
are
suppos
to
use
the
sourc
file
from
the
reposi-
tori
henc
it
is
essenti
that
a
programm
commit
a
sourc
file
onli
when
it
is
in
a
state
that
is
usabl
by
other
the
normal
behavior
of
a
project
member
will
be
a
follow
check
out
the
latest
version
of
the
file
to
be
chang
make
the
plan
chang
to
them
valid
that
the
chang
have
the
desir
effect
for
which
all
the
file
may
be
copi
and
the
system
tri
out
local
commit
the
chang
back
to
the
repositori
it
should
be
clear
that
if
two
peopl
check
out
some
file
and
then
make
chang
there
is
a
possibl
of
a
conflict—differ
chang
are
made
to
the
same
part
of
the
file
all
tool
will
detect
the
conflict
when
the
second
person
tri
to
commit
the
chang
and
will
inform
the
user
the
user
ha
to
manual
resolv
the
conflit
i.e.
make
the
file
such
that
the
chang
do
not
conflict
with
exist
chang
and
then
commit
the
file
conflict
are
usual
rare
a
they
occur
onli
if
differ
chang
are
made
to
the
same
line
in
a
file
with
a
sourc
code
control
system
a
programm
doe
not
need
to
maintain
all
the
versions—at
ani
time
if
some
chang
need
to
be
undon
older
version
can
be
easili
recov
the
repositori
are
alway
back
up
so
they
also
provid
protect
against
accident
loss
furthermor
a
record
of
chang
is
maintained—who
made
the
chang
and
when
whi
wa
the
chang
made
what
were
the
actual
chang
etc
most
importantli
the
repositori
provid
a
central
place
for
the
latest
and
authorit
file
of
the
project
thi
is
invalu
for
product
that
have
a
long
life
and
that
evolv
over
mani
year
besid
use
the
repositori
for
maintain
the
differ
version
it
is
also
use
for
construct
the
softwar
system
from
the
sources—an
activ
often
call
build
the
build
get
the
latest
version
or
the
desir
version
number
of
the
sourc
from
the
repositori
and
creat
the
execut
from
the
sourc
build
the
final
execut
from
the
sourc
file
is
often
done
through
tool
like
the
makefil
34
which
specifi
the
depend
between
file
and
how
the
final
execut
are
construct
from
the
sourc
file
these
tool
are
capabl
of
recogn
that
file
have
chang
and
will
recompil
whenev
file
are
chang
for
creat
the
execut
with
sourc
code
control
these
tool
will
gener
get
the
latest
copi
from
the
repositori
then
use
it
for
creat
what
we
discuss
here
is
one
of
the
simplest
approach
to
sourc
code
control
and
build
often
when
larg
system
are
be
built
more
elabor
method
for
sourc
code
control
may
be
need
we
have
seen
that
code
often
involv
make
chang
to
some
exist
code
code
also
chang
when
requir
chang
or
when
new
function
is
ad
due
to
the
chang
be
done
to
modul
even
if
we
start
with
a
good
design
with
time
we
often
end
up
with
code
whose
design
is
not
a
good
a
it
could
be
and
onc
the
design
embodi
in
the
code
becom
complex
then
enhanc
the
code
to
accommod
requir
chang
becom
more
complex
time
consum
and
error
prone
in
other
word
the
product
and
qualiti
start
decreas
refactor
is
the
techniqu
to
improv
exist
code
and
prevent
thi
design
decay
with
time
refactor
is
part
of
code
in
that
it
is
perform
dure
the
code
activ
but
is
not
regular
code
refactor
ha
been
practic
in
the
past
by
programm
but
recent
it
ha
taken
a
more
concret
shape
and
ha
been
propos
a
a
key
step
in
the
xp
practic
7
refactor
also
play
an
import
role
in
test-driven
development—cod
improv
step
in
the
tdd
process
is
realli
do
refactor
here
we
discu
some
key
concept
and
some
method
for
do
refactor
36
more
detail
are
avail
on
refactor
is
defin
a
a
chang
made
to
the
intern
structur
of
softwar
to
make
it
easier
to
understand
and
cheaper
to
modifi
without
chang
it
observ
behavior
36
a
key
point
here
is
that
the
chang
is
be
made
to
the
design
embodi
in
the
sourc
code
i.e.
the
intern
structur
exclus
for
improv
purpos
the
basic
object
of
refactor
is
to
improv
the
design
howev
note
that
thi
is
not
about
improv
a
design
dure
the
design
stage
for
creat
a
design
which
is
to
be
later
implement
which
is
the
focu
of
design
method-
olog
but
about
improv
the
design
of
code
that
alreadi
exist
in
other
word
refactor
though
done
on
sourc
code
ha
the
object
of
improv
the
design
that
the
code
implement
therefor
the
basic
principl
of
design
guid
the
refactor
process
consequ
a
refactor
gener
result
in
one
or
more
of
the
follow
refactor
involv
chang
the
code
to
improv
one
of
the
design
proper-
tie
while
keep
the
extern
behavior
the
same
refactor
is
often
trigger
by
some
code
chang
that
have
to
be
done
if
some
enhanc
are
to
be
made
to
the
exist
code
and
it
is
felt
that
if
the
code
structur
wa
differ
better
then
the
chang
could
have
been
done
easier
that
is
the
time
to
do
refactor
to
improv
the
code
structur
even
though
refactor
is
trigger
by
the
need
to
chang
the
softwar
and
it
extern
behavior
it
should
not
be
confus
or
mix
with
the
chang
for
enhanc
it
is
best
to
keep
these
two
type
of
chang
separ
so
while
develop
code
if
refactor
is
need
the
programm
should
ceas
to
write
new
function
and
first
do
the
refactor
and
then
add
new
code
the
main
risk
of
refactor
is
that
exist
work
code
may
break
due
to
the
chang
be
made
thi
is
the
main
reason
whi
often
refactor
is
not
done
the
other
reason
is
that
it
may
be
view
a
an
addit
and
unnecessari
cost
to
mitig
thi
risk
the
two
golden
rule
are
have
test
script
avail
to
test
exist
function
if
a
good
test
suit
is
avail
then
whether
refactor
preserv
exist
function
can
be
check
easili
refactor
can
not
be
done
effect
with-
out
an
autom
test
suit
a
without
such
a
suit
determin
if
the
extern
behavior
ha
chang
or
not
will
becom
a
costli
affair
by
do
refactor
in
a
seri
of
small
step
and
test
after
each
step
mistak
in
refactor
can
be
easili
identifi
and
rectifi
with
thi
each
refactor
make
onli
a
small
chang
but
a
seri
of
refactor
can
significantli
transform
the
program
structur
with
refactor
code
becom
continu
improv
that
is
the
design
rather
than
decay
with
time
evolv
and
improv
with
time
with
refac-
tore
the
qualiti
of
the
design
improv
make
it
easier
to
make
chang
to
the
code
a
well
a
find
bug
the
extra
cost
of
refactor
is
paid
for
by
the
save
achiev
later
in
reduc
test
and
debug
cost
higher
qualiti
and
reduc
effort
in
make
chang
if
refactor
is
to
be
practic
it
usag
can
also
eas
the
design
task
in
the
design
stage
often
the
design
spend
consider
effort
in
tri
to
make
the
design
a
good
a
possibl
tri
to
think
of
futur
chang
and
tri
to
make
the
design
flexibl
enough
to
accommod
all
type
of
futur
chang
they
can
envisag
thi
make
the
design
activ
veri
complex
and
often
result
in
complex
design
with
refactor
the
design
doe
not
have
to
be
terribl
worri
about
make
the
best
or
most
flexibl
design—th
goal
is
to
tri
to
come
up
with
a
good
and
simpl
design
and
later
if
new
chang
are
requir
that
were
not
thought
of
befor
or
if
shortcom
are
found
in
the
design
the
design
is
chang
through
refactor
more
often
than
not
the
extra
flexibl
envisag
and
design
is
never
need
result
in
a
system
that
is
unduli
complex
note
that
refactor
is
not
a
techniqu
for
bug
fix
or
for
improv
code
that
is
in
veri
bad
shape
it
is
done
to
code
that
is
mostli
working—th
basic
purpos
is
to
make
the
code
live
longer
by
make
it
structur
healthier
it
start
with
healthi
code
and
instead
of
let
it
becom
weak
it
continu
to
keep
it
healthi
when
is
refactor
need
there
are
some
easy-to-spot
sign
in
the
code
which
are
sometim
call
bad
smell
36
that
often
indic
that
some
of
the
desir
design
properti
may
be
get
violat
or
that
there
is
potenti
of
improv
the
design
in
other
word
if
you
smell
one
of
these
bad
smell
it
may
be
a
sign
that
refactor
is
need
some
of
these
bad
smell
from
36
are
given
here
duplic
code
thi
is
quit
common
one
reason
for
thi
is
that
some
small
function
is
be
execut
at
multipl
place
e.g.
the
age
from
date
of
birth
may
be
comput
in
each
place
that
need
the
date
anoth
common
reason
is
that
when
there
are
multipl
subclass
of
a
class
then
each
subclass
may
end
up
do
a
similar
thing
duplic
code
mean
that
if
thi
logic
or
function
ha
to
be
chang
it
will
have
to
be
chang
in
all
the
place
it
exist
make
chang
much
harder
and
costlier
long
method
if
a
method
is
larg
it
often
repres
the
situat
where
it
is
tri
to
do
too
mani
thing
and
therefor
is
not
cohes
long
class
similarli
a
larg
class
may
indic
that
it
is
encapsul
multipl
concept
make
the
class
not
cohes
long
paramet
list
complex
interfac
are
clearli
not
desirable—they
make
the
code
harder
to
understand
often
the
complex
is
not
intrins
but
a
sign
of
improp
design
switch
statement
in
object-ori
program
if
the
polymorph
is
not
be
use
properli
it
is
like
to
result
in
a
switch
statement
everywher
the
behavior
is
to
be
differ
depend
on
the
properti
presenc
of
simi-
lar
switch
statement
in
differ
place
is
a
sign
that
instead
of
use
class
hierarchi
switch
statement
is
be
use
presenc
of
switch
statement
make
it
much
harder
to
extend
code—if
a
new
categori
is
to
be
ad
all
the
switch
statement
will
have
to
be
modifi
specul
gener
some
class
hierarchi
may
exist
becaus
the
object
in
subclass
seem
to
be
differ
howev
if
the
behavior
of
object
of
the
differ
subclass
is
the
same
and
there
is
no
immedi
reason
to
think
that
behavior
might
chang
then
it
is
a
case
of
unnecessari
complex
too
much
commun
between
object
if
method
in
one
class
are
make
mani
call
to
method
of
anoth
object
to
find
out
about
it
state
thi
is
a
sign
of
strong
coupl
it
is
possibl
that
thi
may
be
unnecessari
and
henc
such
situat
should
be
examin
for
refactor
messag
chain
one
method
call
anoth
method
which
simpli
pass
thi
call
to
anoth
object
and
so
on
thi
chain
potenti
result
in
unnecessari
coupl
these
bad
smell
in
gener
are
indic
of
a
poor
design
clearli
there
are
unlimit
possibl
of
how
code
can
be
refactor
to
improv
it
design
there
are
howev
some
standard
refactor
that
can
be
appli
in
mani
of
the
situat
for
a
catalog
of
common
refactor
and
step
for
perform
each
of
them
the
reader
is
refer
to
36
onc
a
programm
ha
written
the
code
for
a
modul
it
ha
to
be
verifi
befor
it
is
use
by
other
test
remain
the
most
common
method
of
thi
verif
at
the
programm
level
the
test
done
for
check
the
code
the
programm
ha
develop
a
compar
to
check
the
entir
softwar
system
is
call
unit
test
unit
test
is
like
regular
test
where
program
are
execut
with
some
test
case
except
that
the
focu
is
on
test
smaller
program
or
modul
which
are
typic
assign
to
one
programm
or
a
pair
for
code
in
the
program
process
we
discuss
earlier
the
test
wa
essenti
unit
test
a
unit
may
be
a
function
or
a
small
collect
of
function
for
proce-
dural
languag
or
a
class
or
a
small
collect
of
class
for
object-ori
languag
test
of
modul
or
softwar
system
is
a
difficult
and
challeng
task
select
of
test
case
is
a
key
issu
in
ani
form
of
test
we
will
discu
the
problem
of
test
case
select
in
detail
in
the
next
chapter
when
we
discu
test
for
now
it
suffic
that
dure
unit
test
the
tester
who
is
gener
the
programm
will
execut
the
unit
with
a
varieti
of
test
case
and
studi
the
actual
behavior
of
the
unit
be
test
for
these
test
case
base
on
the
behavior
the
tester
decid
whether
the
unit
is
work
correctli
or
not
if
the
behavior
is
not
a
expect
for
some
test
case
then
the
programm
find
the
defect
in
the
program
an
activ
call
debug
and
fix
it
after
remov
the
defect
the
programm
will
gener
execut
the
test
case
that
caus
the
unit
to
fail
again
to
ensur
that
the
fix
ha
inde
made
the
unit
behav
correctli
an
issu
with
unit
test
is
that
a
the
unit
be
test
is
not
a
com-
plete
system
but
just
a
part
it
is
not
execut
by
itself
furthermor
in
it
execut
it
may
use
other
modul
that
have
not
been
develop
yet
due
to
thi
unit
test
often
requir
driver
or
stub
to
be
written
driver
play
the
role
of
the
call
modul
and
are
often
respons
for
get
the
test
data
execut
the
unit
with
the
test
data
and
then
report
the
result
stub
are
essenti
dummi
modul
that
are
use
in
place
of
the
actual
modul
to
facilit
unit
test
so
if
a
modul
m
us
servic
from
anoth
modul
n
that
ha
not
yet
been
develop
then
for
unit
test
m
some
stub
for
n
will
have
to
be
written
so
m
can
invok
the
servic
in
some
manner
on
n
so
that
unit
test
can
proceed
the
need
for
stub
can
be
avoid
if
code
and
test
proce
in
a
bottom-up
manner—th
modul
at
lower
level
are
code
and
test
first
such
that
when
modul
at
higher
level
of
hierarchi
are
test
the
code
for
lower-level
modul
is
alreadi
avail
if
increment
code
is
practic
a
discuss
abov
then
unit
test
need
to
be
perform
everi
time
the
programm
add
some
code
clearli
it
will
be
much
more
effici
if
instead
of
execut
the
unit
and
give
the
input
manual
the
execut
of
test
case
is
autom
then
test
case
can
be
execut
easili
everi
time
test
need
to
be
done
some
tool
are
avail
to
facilit
thi
here
we
discu
some
approach
for
unit
test
use
test
framework
in
the
previou
chapter
we
have
seen
that
when
use
procedur
unit
for
modul
a
program
can
be
view
a
a
structur
chart
in
which
node
are
function
and
edg
repres
a
call
relationship
in
unit
test
one
or
a
small
collect
of
these
modul
is
to
be
test
with
a
set
of
test
case
as
the
behavior
of
a
modul
depend
on
the
valu
of
it
paramet
a
well
a
the
overal
state
of
the
system
of
which
it
is
a
part
e.g.
state
of
global
variabl
a
test
case
for
a
modul
f
will
involv
set
both
the
state
of
the
system
on
which
the
behavior
of
f
depend
a
well
a
the
valu
of
paramet
the
actual
valu
and
the
state
of
the
system
for
a
test
case
depend
on
the
purpos
for
which
the
tester
ha
design
thi
test
case
in
addit
if
a
modul
f
ha
other
modul
below
it
in
the
structur
chart
that
is
the
modul
call
other
modul
say
g
and
h
then
for
execut
f
we
must
have
code
for
g
and
h
also
avail
thi
is
handl
in
two
way
first
is
to
test
in
a
bottom-up
manner
i.e.
test
the
modul
at
the
bottom
of
the
structur
chart
first
and
then
move
up
in
thi
approach
when
test
f
the
test
code
for
g
and
h
will
be
avail
and
will
be
use
dure
test
the
other
approach
is
to
write
stub
for
g
and
h
stub
are
throwaway
code
written
for
the
call
function
onli
to
facilit
test
of
the
caller
function
often
the
stub
for
a
function
will
just
print
some
statement
if
no
valu
is
to
be
return
if
some
valu
is
to
be
return
for
the
caller
to
proceed
then
often
a
few
valu
will
be
hard
code
in
the
stub
and
then
the
caller
will
ensur
that
the
stub
is
call
with
the
valu
for
which
it
ha
been
code
we
will
assum
that
the
former
approach
is
be
follow
that
is
for
test
f
test
code
for
g
and
h
is
alreadi
avail
test
of
a
modul
f
by
a
test
case
will
then
involv
the
follow
step
declar
whether
the
test
case
ha
succeed
or
fail
the
simplest
and
commonli
use
approach
for
execut
thi
sequenc
of
step
is
to
write
a
main
program
which
execut
the
first
three
step
with
the
valu
be
given
a
input
by
the
tester
or
read
from
a
file
or
hard
code
in
the
program
and
then
print
out
the
import
valu
the
programm
then
execut
the
last
two
step
name
compar
the
result
with
expect
and
decid
whether
the
test
ha
succeed
or
fail
due
to
the
need
of
programm
intervent
for
evalu
the
output
and
possibl
also
for
give
input
thi
approach
is
not
easi
to
scale
onc
a
test
case
is
design
thi
sequenc
of
step
remain
fix
and
henc
is
ideal
for
complet
autom
in
a
test
framework
often
a
test
case
will
be
declar
a
a
function
in
which
thi
sequenc
of
step
is
execut
for
that
test
case
includ
the
check
of
the
outcom
and
declar
the
result—thi
be
done
often
with
the
help
of
assert
statement
provid
by
the
framework
a
test
suit
is
then
a
collect
of
these
function
and
execut
of
a
test
suit
mean
each
of
the
function
is
execut
the
test
suit
succe
if
all
the
test
case
succeed
if
a
test
case
fail
then
the
test
framework
will
decid
whether
to
continu
execut
or
stop
a
function
for
a
test
case
can
be
easili
defined—it
will
execut
the
sequenc
of
step
given
abov
howev
execut
the
modul
under
test
with
the
test
case
is
not
straightforward
a
a
suitabl
execut
will
have
to
be
form
which
can
execut
the
function
repres
the
test
case
and
report
the
result
about
success
or
failur
and
one
would
like
to
do
thi
without
chang
the
modul
be
test
or
the
file
in
which
thi
modul
is
contain
if
the
sourc
code
file
remain
unchang
dure
unit
test
then
the
integr
process
remain
unaffect
by
unit
test
otherwis
after
unit
test
ani
chang
made
to
the
file
will
have
to
be
remov
thi
type
of
unit
test
is
facilit
by
test
framework
for
a
procedur
languag
like
c
some
common
unit
test
framework
are
cutest
cunit
cutest
check
etc
with
these
test
framework
each
test
case
is
defin
a
a
function
the
function
end
with
some
assert
provid
by
the
framework
which
test
for
some
condit
to
declar
whether
the
test
ha
fail
or
succeed
each
function
repres
a
unit
test
is
ad
to
an
array
or
a
structur
which
is
the
test
suit
multipl
test
suit
can
also
be
creat
often
there
is
one
driver
function
to
which
these
suit
are
pass
and
which
then
execut
all
the
test
case
in
object-ori
program
the
unit
to
be
test
is
usual
an
object
of
a
class
test
of
object
can
be
defin
a
the
process
of
exercis
the
routin
provid
by
an
object
with
the
goal
of
uncov
error
in
the
implement
of
the
routin
or
state
of
the
object
or
both
78
to
test
a
class
the
programm
need
to
creat
an
object
of
that
class
take
the
object
to
a
particular
state
invok
a
method
on
it
and
then
check
whether
the
state
of
the
object
is
a
expect
thi
sequenc
ha
to
be
execut
mani
time
for
a
method
and
ha
to
be
perform
for
all
the
method
all
thi
is
facilit
if
we
use
framework
like
the
junit
www.junit.org
though
junit
itself
is
for
java
similar
framework
have
been
develop
for
other
languag
like
c++
and
c
#
here
we
briefli
describ
how
junit
can
be
use
for
test
a
class
and
give
an
exampl
for
test
of
a
class
cut
class
under
test
with
junit
the
tester
ha
to
creat
anoth
class
which
inherit
from
junit
e.g.
class
cuttest
extend
junit
the
junit
framework
ha
to
be
import
by
thi
class
thi
class
is
the
driver
for
test
cut
it
must
have
a
constructor
in
which
the
object
that
are
need
for
the
test
case
are
creat
a
setup
method
which
is
typic
use
for
creat
ani
object
and
set
up
valu
befor
execut
a
test
case
a
suit
and
a
main
that
execut
the
suit
use
a
testrunn
provid
by
junit
besid
these
method
all
other
method
are
actual
test
case
most
of
these
method
are
often
name
testxxxx
such
a
method
typ-
ical
focu
on
test
a
method
under
some
state
typic
the
name
of
the
method
and/or
the
state
is
contain
in
xxx
thi
method
first
set
up
the
state
if
not
alreadi
setup
by
setup
and
then
execut
the
method
to
be
test
to
check
the
result
junit
provid
two
special
method
assert-
true
boolean
express
and
assertfals
boolean
express
by
use
func-
tion
and
have
a
logic
express
on
the
state
of
the
object
the
tester
can
test
if
the
state
is
correct
or
not
if
all
the
assert
in
all
the
method
succeed
then
junit
declar
that
the
test
ha
pass
if
ani
assert
statement
fail
junit
declar
that
test
ha
fail
and
specifi
the
assert
that
ha
fail
to
get
an
idea
of
how
it
work
consid
the
test
of
a
class
matrix.java
which
provid
standard
oper
on
matrix
the
main
attribut
of
the
class
and
the
main
method
are
given
in
figur
for
unit
test
the
matrix
class
clearli
we
need
to
test
standard
oper
like
creation
of
a
matrix
set
of
valu
etc
we
also
need
to
test
whether
the
oper
like
add
subtract
multipli
determin
are
perform
a
expect
each
test
case
we
want
to
execut
is
program
by
set
the
valu
and
then
perform
the
oper
the
result
of
the
oper
is
check
through
the
assert
statement
for
exampl
for
test
add
we
creat
a
method
testadd
privat
doubl
matrix
//matrix
element
privat
int
row
col
//order
of
matrix
public
matrix
int
i
int
j
//
set
#
row
and
#
col
public
matrix
int
i
int
j
doubl
a
//
set
from
2d
array
public
matrix
matrix
a
//construct
matrix
from
anoth
public
void
read
//read
elt
from
consol
and
set
up
matrix
public
void
setel
int
i
int
j
doubl
valu
//
set
elt
i
j
public
int
noofrow
//
return
no
of
row
public
int
noofcol
//
return
no
of
col
public
matrix
add
matrix
a
//
add
a
to
matrix
public
matrix
sub
matrix
a
//
subtract
a
from
matrix
public
matrix
mul
matrix
b
//
multipli
b
to
matrix
public
matrix
transpos
//
transpos
the
matrix
public
matrix
minor
int
a
int
b
//
return
a
x
b
sub-matrix
public
doubl
determin
//
determin
of
the
matrix
public
matrix
invers
throw
except
//
invers
of
the
matrix
public
void
print
//
print
matrix
on
consol
public
boolean
equal
matrix
m
//
check
for
equal
with
m
in
which
a
matrix
is
ad
to
anoth
the
correct
result
is
store
a
priori
in
anoth
matrix
after
addit
it
is
check
if
the
result
obtain
by
perform
add
is
equal
to
the
correct
result
the
method
for
thi
is
shown
in
figur
the
programm
may
want
to
perform
more
test
for
add
for
which
more
test
method
will
be
need
similarli
method
are
written
for
test
other
method
some
of
these
test
are
also
shown
in
figur
as
we
can
see
junit
encourag
autom
test
not
onli
is
the
execu-
tion
of
test
case
autom
the
check
of
the
result
is
also
autom
thi
make
run
test
fulli
automat
by
build
test
script
and
continu-
ousli
updat
them
a
the
class
evolv
we
alway
have
a
test
script
which
can
be
run
quickli
so
whenev
we
make
ani
chang
to
the
code
we
can
quickli
check
if
the
past
test
case
are
run
on
the
click
of
a
button
thi
becom
almost
essenti
if
increment
code
or
test-driven
develop
discuss
earlier
in
the
chapter
is
to
be
practic
public
class
matrixtest
extend
testcas
matrix
a
b
c
d
e
re
/
test
matrix
/
public
matrixtest
string
testcas
doubl
a
=
new
doubl
9
,6
7
,5
a
=
new
matrix
2
,2
a
doubl
b
=
new
doubl
16
,21
3
,12
b
=
new
matrix
2
,2
b
doubl
d
=
new
doubl
2
,2
,3
4
,8
,6
7
,8
,9
res=new
matrix
doubl
c
=
new
doubl
25
,27
10
,17
c
=
new
matrix
2
,2
c
res=a
add
b
asserttru
re
=
null
asserttru
c.
equal
re
c=new
matrix
2
,2
for
int
i=0
i
<
2
i++
for
int
j=0
j
<
2
j++
c.
setel
i
j
a.
getel
i
j
doubl
c
=
new
doubl
162
,261
127
,207
c
=
new
matrix
2
,2
c
res=a
mul
b
asserttru
re
=
null
asserttru
c.
equal
re
res=a
transpos
res=r
transpos
asserttru
re
equal
a
doubl
dd
=
new
doubl
1
,0
0
,1
matrix
dd=new
matrix
2
,2
dd
asserttru
re
equal
dd
code
inspect
is
anoth
techniqu
that
is
often
appli
at
the
unit
level
it
can
be
view
a
static
test
in
which
defect
are
detect
in
the
code
not
by
execut
the
code
but
through
a
manual
process
code
inspect
unlik
test
is
appli
almost
entir
at
the
unit
level
i.e.
onli
program
unit
are
subject
to
inspect
henc
we
consid
it
a
anoth
form
of
unit
test
howev
in
practic
often
both
are
employ
particularli
for
critic
modul
it
should
be
point
out
that
inspect
is
a
gener
verif
approach
that
can
be
appli
for
detect
defect
in
ani
document
howev
it
wa
first
util
for
detect
defect
in
the
code
and
code
inspect
remain
even
today
an
industri
best
practic
which
is
wide
employ
inspect
have
been
found
to
help
in
improv
not
onli
qualiti
but
also
product
see
report
in
39
44
83
code
inspect
were
first
propos
by
fagan
31
32
now
there
are
book
on
the
topic
which
describ
in
great
detail
how
code
inspect
is
a
review
of
code
by
a
group
of
peer
follow
a
clearli
defin
process
the
basic
goal
of
inspect
is
to
improv
the
qualiti
of
code
by
find
defect
some
of
the
key
characterist
of
inspect
are
code
inspect
is
conduct
by
programm
and
for
programm
it
is
a
structur
process
with
defin
role
for
the
particip
the
focu
is
on
identifi
defect
not
fix
them
inspect
data
is
record
and
use
for
monitor
the
effect
of
the
inspect
process
inspect
are
perform
by
a
team
of
review
or
inspector
includ
the
author
with
one
of
them
be
the
moder
the
moder
ha
the
overal
respons
to
ensur
that
the
review
is
done
in
a
proper
manner
and
all
step
in
the
review
process
are
follow
most
method
for
inspect
are
similar
with
minor
variat
here
we
discu
the
inspect
process
employ
by
a
commerci
organ
58
the
differ
stage
in
thi
process
are
plan
self-review
group
review
meet
and
rework
and
follow-up
these
stage
are
gener
execut
in
a
linear
order
we
discu
each
of
these
phase
now
the
object
of
the
plan
phase
is
to
prepar
for
inspect
an
inspect
team
is
form
which
should
includ
the
programm
whose
code
is
to
be
review
the
team
should
consist
of
at
least
three
peopl
though
sometim
four-or-f
member
team
are
also
form
a
moder
is
appoint
the
author
of
the
code
ensur
that
the
code
is
readi
for
inspect
and
that
the
entri
criterion
are
satisfi
commonli
use
entri
criterion
are
that
the
code
compil
correctli
and
the
avail
static
analysi
tool
have
been
appli
the
moder
check
that
the
entri
criterion
are
satisfi
by
the
code
a
packag
is
prepar
that
is
to
be
distribut
to
the
inspect
team
the
packag
typic
consist
of
code
to
be
inspect
the
specif
for
which
the
code
wa
develop
and
the
checklist
that
should
be
use
for
inspect
the
packag
for
review
is
given
to
the
review
the
moder
may
ar-
rang
an
open
meet
if
need
in
which
the
author
may
provid
a
brief
overview
of
the
product
and
ani
special
area
that
need
to
be
look
at
care-
fulli
a
checklist
that
should
be
use
dure
the
inspect
may
be
prepar
or
some
readi
checklist
may
be
use
as
the
aim
of
code
inspect
is
to
improv
qualiti
in
addit
to
code
defect
there
are
other
qualiti
issu
which
code
inspect
usual
look
for
like
effici
complianc
to
code
standard
etc
the
type
of
defect
the
code
inspect
should
focu
on
is
contain
in
a
checklist
that
is
provid
to
the
inspector
in
thi
phase
each
review
doe
a
self-review
of
the
code
dure
the
self-
review
a
review
go
through
the
entir
code
and
log
all
the
potenti
defect
he
or
she
find
in
the
self-prepar
log
often
the
review
will
mark
the
defect
on
the
work
product
itself
and
may
provid
a
summari
of
the
self-review
in
the
log
the
review
also
record
the
time
they
spent
in
the
self-review
a
standard
form
may
be
use
for
the
self-prepar
log
an
exampl
form
is
shown
in
figur
58
ideal
the
self-review
should
be
done
in
one
continu
time
span
the
recommend
time
is
le
than
two
hours—that
is
the
work
product
is
small
enough
that
it
can
be
fulli
examin
in
le
than
two
hour
thi
phase
of
the
review
process
end
when
all
review
have
properli
perform
their
self-
review
and
fill
the
self-review
log
the
basic
purpos
of
the
group
review
meet
is
to
come
up
with
the
final
defect
list
base
on
the
initi
list
of
defect
report
by
the
review
and
the
new
one
found
dure
the
discuss
in
the
meet
the
entri
criterion
for
thi
step
is
that
the
moder
is
satisfi
that
all
the
review
are
readi
for
the
meet
the
main
output
of
thi
phase
are
the
defect
log
and
the
defect
summari
report
the
moder
first
check
to
see
if
all
the
review
are
prepar
thi
is
done
by
a
brief
examin
of
the
effort
and
defect
data
in
the
self-review
log
to
confirm
that
suffici
time
and
attent
ha
gone
into
the
prepara-
tion
when
prepar
is
not
adequ
the
group
review
is
defer
until
all
particip
are
fulli
prepar
if
everyth
is
readi
the
group
review
meet
is
held
the
moder
is
in
charg
of
the
meet
and
ha
to
make
sure
that
the
meet
stay
focus
on
it
basic
purpos
of
defect
identif
and
doe
not
degener
into
a
gener
brainstorm
session
or
person
attack
on
the
author
the
meet
is
conduct
a
follow
a
team
member
call
the
reader
go
over
the
code
line
by
line
or
ani
other
conveni
small
unit
and
para-
phrase
each
line
to
the
team
sometim
no
paraphras
is
done
and
the
team
just
go
over
the
code
line
by
line
at
ani
line
if
ani
review
ha
ani
issu
from
befor
or
find
ani
new
issu
in
the
meet
while
listen
to
other
the
review
rais
the
issu
there
could
be
a
discuss
on
the
issu
rais
the
author
accept
the
issu
a
a
defect
or
clarifi
whi
it
is
not
a
defect
after
discuss
an
agreement
is
reach
and
one
member
of
the
review
team
call
the
scribe
record
the
identifi
defect
in
the
defect
log
at
the
end
of
the
meet
the
scribe
read
out
the
defect
record
in
the
defect
log
for
a
final
review
by
the
team
member
note
that
dure
the
entir
process
of
review
defect
are
onli
identifi
it
is
not
the
purpos
of
the
group
to
identifi
solutions—that
is
done
later
by
the
author
the
final
defect
log
is
the
offici
record
of
the
defect
identifi
in
the
inspect
and
may
also
be
use
to
track
the
defect
to
closur
for
analyz
the
effect
of
an
inspect
howev
onli
summary-level
inform
is
need
for
which
a
summari
report
is
prepar
the
summari
report
describ
the
code
the
total
effort
spent
and
it
breakup
in
the
differ
review
process
activ
total
number
of
defect
found
for
each
categori
and
size
if
type
of
defect
were
also
record
then
the
number
of
defect
in
each
categori
can
also
be
record
in
the
summari
a
partial
fill
summari
report
is
shown
in
figur
58
the
summari
report
is
self-explanatori
total
number
of
minor
defect
found
wa
8
and
the
total
number
of
major
defect
found
wa
3
that
is
the
defect
densiti
found
is
8/0.250
=
3
and
3/0.25
=
1
from
experi
both
of
these
rate
are
within
the
rang
seen
in
the
past
henc
it
can
be
assum
that
the
review
wa
conduct
properli
the
review
team
had
and
each
had
spent
about
1
..
thi
mean
that
the
prepar
rate
wa
about
180
loc
per
hour
and
the
group
review
rate
wa
250
loc
per
hour
both
of
which
from
past
experi
also
seem
accept
if
the
modif
requir
for
fix
the
defect
and
address
the
is-
sue
are
few
then
the
group
review
statu
is
accepted.
if
the
modif
requir
are
mani
a
follow-up
meet
by
the
moder
or
a
re-review
might
be
necessari
to
verifi
whether
the
chang
have
been
incorpor
correctli
the
moder
recommend
what
is
to
be
done
in
addit
recommend
regard
review
in
the
next
stage
may
also
be
made
e.g.
in
a
detailed-
design
review
it
may
be
recommend
code
of
which
modul
should
undergo
tradit
work
on
metric
ha
focus
on
the
final
product
name
the
code
in
a
sens
all
metric
for
intermedi
product
of
requir
and
design
are
basic
use
to
ensur
that
the
final
product
ha
a
high
qualiti
and
the
product
of
the
project
stay
high
that
is
the
basic
goal
of
metric
for
intermedi
product
is
to
predict
or
get
some
idea
about
the
metric
of
the
final
product
for
the
code
the
most
commonli
use
metric
are
size
and
complex
here
we
discu
a
few
size
and
complex
measur
size
of
a
product
is
a
simpl
measur
which
can
be
easi
to
calcul
the
main
reason
for
interest
in
size
measur
is
that
size
is
the
major
factor
that
affect
the
cost
of
a
project
size
in
itself
is
of
littl
use
it
is
the
relationship
of
size
with
the
cost
and
qualiti
that
make
size
an
import
metric
it
is
also
use
to
measur
product
dure
the
project
e.g.
kloc
per
person-month
final
qualiti
deliv
by
a
process
is
also
frequent
normal
with
respect
to
size
number
of
defect
per
kloc
for
these
reason
size
is
one
of
the
most
import
and
frequent
use
metric
the
most
common
measur
of
size
is
deliv
line
of
sourc
code
or
the
number
of
line
of
code
loc
final
deliv
the
troubl
with
loc
is
that
the
number
of
line
of
code
for
a
project
depend
heavili
on
the
languag
use
for
exampl
a
program
written
in
assembl
languag
will
be
larg
compar
to
the
same
program
written
in
a
higher-level
languag
if
loc
is
use
a
a
size
measur
even
for
the
same
languag
the
size
can
vari
consider
depend
on
how
line
are
count
despit
these
defici
loc
remain
a
handi
and
reason
size
measur
that
is
use
extens
current
perhap
the
most
wide
use
count
method
for
determin
the
size
is
to
count
noncom
nonblank
line
onli
halstead
46
ha
propos
metric
for
length
and
volum
of
a
program
base
on
the
number
of
oper
and
operand
in
a
program
we
defin
the
follow
measur
quantiti
f1
j
is
the
number
of
occurr
of
the
jth
most
frequent
oper
f2
j
is
the
number
of
occurr
of
the
jth
most
frequent
operand
then
the
vocabulari
n
of
a
program
is
defin
a
with
the
measur
paramet
list
earlier
two
new
paramet
are
defin
from
the
length
and
the
vocabulari
the
volum
v
of
the
program
is
defin
a
thi
definit
of
the
volum
of
a
program
repres
the
minimum
number
of
bit
necessari
to
repres
the
program
log2
n
is
the
number
of
bit
need
to
repres
everi
element
in
the
program
uniqu
and
n
is
the
total
occur-
renc
of
the
differ
element
volum
is
use
a
a
size
metric
for
a
program
experi
have
shown
that
the
volum
of
a
program
is
highli
correl
with
the
size
in
loc
the
product
if
measur
onli
in
term
of
line
of
code
per
unit
time
can
vari
a
lot
depend
on
the
complex
of
the
system
to
be
develop
clearli
a
programm
will
produc
a
lesser
amount
of
code
for
highli
complex
system
program
a
compar
to
a
simpl
applic
program
similarli
complex
ha
great
impact
on
the
cost
of
maintain
a
program
to
quantifi
complex
beyond
the
fuzzi
notion
of
the
eas
with
which
a
program
can
be
construct
or
comprehend
some
metric
to
measur
the
complex
of
a
program
are
need
a
number
of
metric
have
been
propos
for
quantifi
the
complex
of
a
program
47
and
studi
have
been
done
to
correl
the
complex
with
mainten
effort
here
we
discu
a
few
of
the
complex
measur
that
have
been
propos
cyclomat
complex
base
on
the
capabl
of
the
human
mind
and
the
experi
of
peopl
it
is
gener
recogn
that
condit
and
control
statement
add
complex
to
a
program
given
two
program
with
the
same
size
the
program
with
the
larger
number
of
decis
statement
is
like
to
be
more
complex
the
simplest
measur
of
complex
then
is
the
number
of
construct
that
repres
branch
in
the
control
flow
of
the
program
like
if
then
els
while
do
repeat
until
and
goto
statement
a
more
refin
measur
is
the
cyclomat
complex
measur
propos
by
mccabe
which
is
a
graph-theoretic–bas
concept
for
a
graph
g
with
n
node
e
edg
and
p
connect
compon
the
cyclomat
number
v
g
is
defin
a
to
use
thi
to
defin
the
cyclomat
complex
of
a
modul
the
control
flow
graph
g
of
the
modul
is
first
drawn
to
construct
a
control
flow
graph
of
a
program
modul
break
the
modul
into
block
delimit
by
statement
that
affect
the
control
flow
like
if
while
repeat
and
goto
these
block
form
the
node
of
the
graph
if
the
control
from
a
block
i
can
branch
to
a
block
j
then
draw
an
arc
from
node
i
to
node
j
in
the
graph
the
control
flow
of
a
program
can
be
construct
mechan
as
an
exampl
consid
the
c-like
function
for
bubbl
sort
given
next
the
control
flow
graph
for
thi
is
given
in
figur
the
graph
of
a
modul
ha
an
entri
node
and
an
exit
node
correspond
to
the
first
and
last
block
of
statement
or
we
can
creat
artifici
node
for
simplic
a
in
the
exampl
in
such
graph
there
will
be
a
path
from
the
entri
node
to
ani
node
and
a
path
from
ani
node
to
the
exit
node
assum
the
program
ha
no
anomali
like
unreach
code
for
such
a
graph
the
cyclomat
number
can
be
0
if
the
code
is
a
linear
sequenc
of
statement
without
ani
control
statement
if
we
draw
an
arc
from
the
exit
node
to
the
entri
node
the
graph
will
be
strongli
connect
becaus
there
is
a
path
between
ani
two
node
the
cyclomat
number
of
a
graph
for
ani
program
will
then
be
nonzero
and
it
is
desir
to
have
a
nonzero
complex
for
a
simpl
program
without
ani
condit
after
all
there
is
some
complex
in
such
a
program
henc
for
comput
the
cyclomat
complex
of
a
program
an
arc
is
ad
from
the
exit
node
to
the
start
node
which
make
it
a
strongli
connect
graph
for
a
modul
the
cyclomat
complex
is
defin
to
be
the
cyclomat
number
of
such
a
graph
for
the
modul
as
it
turn
out
the
cyclomat
complex
of
a
modul
or
cyclomat
num-
ber
of
it
graph
is
equal
to
the
maximum
number
of
linearli
independ
circuit
in
the
graph
a
set
of
circuit
is
linearli
independ
if
no
circuit
is
total
contain
in
anoth
circuit
or
is
a
combin
of
other
circuit
so
for
calcul
the
cyclomat
number
of
a
modul
we
can
draw
the
graph
make
it
connect
by
draw
an
arc
from
the
exit
node
to
the
entri
node
and
then
either
count
the
number
of
circuit
or
comput
it
by
count
the
number
of
edg
and
node
in
the
graph
shown
in
figur
the
cyclomat
complex
is
ckt
1
b
c
e
b
ckt
2
b
c
d
e
b
ckt
3
a
b
f
a
ckt
4
a
g
a
it
can
also
be
shown
that
the
cyclomat
complex
of
a
modul
is
the
number
of
decis
in
the
modul
plu
one
where
a
decis
is
effect
ani
condi-
tional
statement
in
the
modul
26
henc
we
can
also
comput
the
cyclomat
complex
simpli
by
count
the
number
of
decis
in
the
modul
for
thi
exampl
a
we
can
see
we
get
the
same
cyclomat
complex
for
the
modul
if
we
add
the
modul
ha
three
decis
two
in
the
two
while
statement
and
one
in
the
if
statement
the
cyclomat
number
is
one
quantit
measur
of
modul
complex
it
can
be
extend
to
comput
the
complex
of
the
whole
program
though
it
is
more
suitabl
at
the
modul
level
mccabe
propos
that
the
cyclomat
complex
of
modul
should
in
gener
be
kept
below
10
the
cyclomat
number
can
also
be
use
a
a
number
of
path
that
should
be
test
dure
test
cyclomat
complex
is
one
of
the
most
wide
use
complex
mea-
sure
experi
indic
that
the
cyclomat
complex
is
highli
correl
to
the
size
of
the
modul
in
loc
after
all
the
more
line
of
code
the
greater
the
number
of
decis
it
ha
also
been
found
to
be
correl
to
the
number
of
fault
found
in
modul
halstead
’
s
measur
halstead
also
propos
a
number
of
other
measur
base
on
hi
softwar
scienc
46
some
of
these
can
be
consid
complex
mea-
sure
as
given
earlier
a
number
of
variabl
are
defin
in
softwar
scienc
these
are
n1
number
of
uniqu
oper
n2
number
of
uniqu
operand
n1
total
frequenc
of
oper
and
n2
total
frequenc
of
operand
as
ani
program
must
have
at
least
two
operators—on
for
function
call
and
one
for
end
of
statement—th
ratio
n1/-
ficulti
due
to
the
larger
number
of
oper
in
the
program
the
ratio
n2/n
in
a
program
in
which
variabl
are
chang
more
frequent
thi
ratio
will
be
larger
as
such
program
are
harder
to
understand
eas
of
read
or
write
is
defin
a
halstead
’
s
complex
measur
focus
on
the
intern
complex
of
a
modul
a
doe
mccabe
’
s
complex
measur
thu
the
complex
of
the
modul
’
s
connect
with
it
environ
is
not
given
much
import
in
halstead
’
s
measur
a
modul
’
s
connect
with
it
environ
is
reflect
in
term
of
operand
and
oper
a
call
to
anoth
modul
is
consid
an
oper
and
all
the
paramet
are
consid
operand
of
thi
oper
live
variabl
in
a
comput
program
a
typic
assign
statement
us
and
modifi
onli
a
few
variabl
howev
in
gener
the
statement
have
a
much
larger
context
that
is
to
construct
or
understand
a
statement
a
programm
must
keep
track
of
a
number
of
variabl
other
than
those
directli
use
in
the
statement
for
a
statement
such
data
item
are
call
live
variabl
intuit
the
more
live
variabl
for
statement
the
harder
it
will
be
to
understand
a
program
henc
the
concept
of
live
variabl
can
be
use
a
a
metric
for
program
complex
first
let
u
defin
live
variabl
more
precis
a
variabl
is
consid
live
from
it
first
to
it
last
refer
within
a
modul
includ
all
statement
between
the
first
and
last
statement
where
the
variabl
is
referenc
use
thi
definit
the
set
of
live
variabl
for
each
statement
can
be
comput
easili
by
analysi
of
the
modul
’
s
code
the
procedur
of
determin
the
live
variabl
can
easili
be
autom
for
a
statement
the
number
of
live
variabl
repres
the
degre
of
dif-
ficulti
of
the
statement
thi
notion
can
be
extend
to
the
entir
modul
by
defin
the
averag
number
of
live
variabl
the
averag
number
of
live
vari-
abl
is
the
sum
of
the
count
of
live
variabl
for
all
execut
statement
divid
by
the
number
of
execut
statement
thi
is
a
complex
measur
for
the
modul
live
variabl
are
defin
from
the
point
of
view
of
data
usag
the
logic
of
a
modul
is
not
explicitli
includ
the
logic
is
use
onli
to
determin
the
first
and
last
statement
of
refer
for
a
variabl
henc
thi
concept
of
complex
is
quit
differ
from
cyclomat
complex
which
is
base
entir
on
the
logic
and
consid
data
a
secondari
anoth
data
usage-ori
concept
is
span
the
number
of
statement
between
two
success
us
of
a
variabl
if
a
variabl
is
referenc
at
n
differ
place
in
a
modul
then
for
that
variabl
there
are
n
1
span
the
averag
span
size
is
the
averag
number
of
execut
statement
between
two
success
refer
of
a
variabl
a
larg
span
impli
that
the
reader
of
the
program
ha
to
rememb
a
definit
of
a
variabl
for
a
larger
period
of
time
or
for
more
statement
in
other
word
span
can
be
consid
a
complex
measur
the
larger
the
span
the
more
complex
the
modul
knot
count
a
method
for
quantifi
complex
base
on
the
locat
of
the
control
transfer
of
the
program
ha
been
propos
in
85
it
wa
design
larg
for
fortran
program
where
explicit
transfer
of
control
is
shown
by
the
use
of
goto
statement
a
programm
to
understand
a
given
program
typic
draw
arrow
from
the
point
of
control
transfer
to
it
destin
help
to
creat
a
mental
pictur
of
the
program
and
the
control
transfer
in
it
accord
to
thi
metric
the
more
intertwin
these
arrow
becom
the
more
complex
the
program
thi
notion
is
captur
in
the
concept
of
a
knot.
a
knot
is
essenti
the
intersect
of
two
such
control
transfer
arrow
if
each
statement
in
the
program
is
written
on
a
separ
line
thi
notion
can
be
formal
a
follow
a
jump
from
line
a
to
line
b
is
repres
by
the
pair
a
b
two
jump
a
b
and
p
q
give
rise
to
a
knot
if
either
min
a
b
<
min
p
q
<
max
a
b
and
max
p
q
>
max
a
b
or
min
a
b
<
max
p
problem
can
aris
while
determin
the
knot
count
of
program
use
structur
construct
one
method
is
to
convert
such
a
program
into
one
that
explicitli
show
control
transfer
and
then
comput
the
knot
count
the
basic
scheme
can
be
gener
to
flow
graph
though
with
flow
graph
onli
bound
can
be
obtain
topolog
complex
a
complex
measur
that
is
sensit
to
the
nest
of
structur
ha
been
propos
in
20
like
cyclomat
complex
it
is
base
on
the
flow
graph
of
a
modul
or
program
the
complex
of
a
program
is
consid
it
maxim
intersect
number
min
to
comput
the
maxim
intersect
a
flow
graph
is
convert
into
a
strongli
connect
graph
by
draw
an
arrow
from
the
termin
node
to
the
initi
node
a
strongli
connect
graph
divid
the
graph
into
a
finit
number
of
region
the
number
of
region
is
edg
node
+
2
if
we
draw
a
line
that
enter
each
region
exactli
onc
then
the
number
of
time
thi
line
intersect
the
arc
in
the
graph
is
the
maxim
intersect
min
which
is
taken
to
be
the
complex
of
the
program
as
read
program
is
a
much
more
common
activ
than
write
program
the
goal
of
the
code
activ
is
to
produc
program
that
are
besid
be
free
of
defect
easi
to
understand
and
modifi
use
of
structur
program
in
which
the
program
is
a
sequenc
of
suitabl
single-entri
single-exit
construct
make
program
easi
to
understand
and
verifi
other
practic
like
use
inform
hide
suitabl
code
stan-
dard
and
good
program
practic
also
help
improv
code
readabl
and
qualiti
for
a
develop
it
is
most
effect
to
develop
code
increment
thi
can
be
done
by
write
code
in
small
increment
and
test
and
debug
each
increment
befor
write
more
code
altern
test-driven
develop
may
be
follow
in
which
test
case
are
written
first
and
then
code
is
written
to
pa
these
test
case
though
code
of
a
modul
is
gener
done
by
individu
programm
an
altern
is
pair
program
in
which
code
is
done
by
a
pair
of
programmers—both
togeth
evolv
strategi
data
structur
algorithm
etc
evolv
code
need
to
be
properli
manag
thi
can
be
done
through
proper
sourc
code
control
tool
which
allow
easi
manag
of
the
differ
version
that
get
creat
a
well
a
easi
undo
of
chang
that
need
to
be
roll
back
as
code
chang
with
time
to
ensur
that
the
code
qualiti
doe
not
continu
to
degrad
due
to
evolut
refactor
may
be
done
dure
refactor
no
new
function
is
added—onli
improv
is
done
so
that
the
design
of
the
code
improv
by
reduct
of
coupl
increas
in
cohes
and
better
use
of
hierarchi
unit
test
is
a
veri
popular
and
most
often
use
practic
by
programm
for
verifi
the
code
they
have
written
in
unit
test
the
programm
test
his/her
code
in
isol
for
procedur
languag
thi
is
often
a
small
set
of
procedur
or
function
and
for
object-ori
languag
thi
is
gener
a
class
or
a
small
set
of
class
unit
test
requir
driver
and
stub
and
can
be
facilit
by
the
use
of
framework
which
allow
autom
test
script
execut
good
framework
like
cunit
and
junit
exist
for
both
procedur
languag
and
object-ori
languag
a
number
of
metric
exist
for
quantifi
differ
qualiti
of
code
the
most
commonli
use
are
size
metric
becaus
they
are
use
to
ass
the
produc-
tiviti
of
peopl
and
are
often
use
in
cost
estim
the
most
common
size
measur
is
line
of
code
loc
which
is
also
use
in
most
cost
model
the
goal
of
complex
metric
is
to
quantifi
the
complex
of
softwar
a
com-
plexiti
is
an
import
factor
affect
the
product
of
project
and
is
a
factor
in
cost
estim
a
number
of
differ
metric
exist
most
common
be
the
cyclomat
complex
which
is
base
on
the
intern
logic
of
the
program
and
defin
complex
a
the
number
of
independ
cycl
in
the
flow
graph
of
the
program
what
is
structur
program
and
how
doe
it
help
improv
code
readabl
how
doe
the
use
of
inform
hide
and
code
standard
help
improv
the
readabl
suggest
some
possibl
on
how
tdd
will
function
if
program
is
be
done
in
pair
write
a
class/procedur
use
tdd
and
some
test
framework
have
anoth
programm
do
the
same
use
the
increment
code
first
approach
then
com-
pare
the
code
for
the
class/procedur
with
respect
to
size
of
the
code
effort
requir
and
the
number
of
test
case
use
consid
the
code
for
a
class
describ
two
situat
for
thi
code
which
will
suggest
to
you
that
refactor
may
be
desir
for
each
of
these
suggest
the
natur
of
refactor
that
you
will
perform
what
is
the
role
of
test
framework
and
autom
script
in
refactor
use
your
favorit
unit
test
framework
and
use
it
to
unit
test
a
procedure/class
which
requir
at
least
one
other
procedure/class
give
a
flowchart
describ
the
code
inspect
process
write
some
rule
for
evalu
the
summari
report
of
a
code
review
consid
the
follow
two
algorithm
for
search
an
element
e
in
a
sort
array
a
which
contain
n
integ
the
first
procedur
implement
a
simpl
linear
search
algorithm
the
second
perform
a
binari
search
binari
search
is
gener
much
more
effici
in
term
of
execut
time
compar
to
the
linear
search
while
not
found
and
i
≤
n
do
begin
if
a
i
=
e
then
found
=
true
determin
the
cyclomat
complex
and
live
variabl
complex
for
these
two
function
is
the
ratio
of
the
two
complex
measur
similar
for
the
two
func-
tion
what
is
halstead
’
s
size
measur
for
these
two
modul
compar
thi
size
with
the
size
measur
in
loc
in
a
softwar
develop
project
error
can
be
introduc
at
ani
stage
dur-
ing
develop
though
error
are
detect
after
each
phase
by
techniqu
like
inspect
some
error
remain
undetect
ultim
these
remain
error
are
reflect
in
the
code
henc
the
final
code
is
like
to
have
some
re-
quirement
error
and
design
error
in
addit
to
error
introduc
dure
the
code
activ
to
ensur
qualiti
of
the
final
deliv
softwar
these
defect
will
have
to
be
remov
there
are
two
type
of
approach
for
identifi
defect
in
the
software—
static
and
dynam
in
static
analysi
the
code
is
not
execut
but
is
evalu
through
some
process
or
some
tool
for
locat
defect
code
inspect
which
we
discuss
in
the
previou
chapter
is
one
static
approach
anoth
is
static
analysi
of
code
through
the
use
of
tool
in
dynam
analysi
code
is
execut
and
the
execut
is
use
for
determin
defect
test
is
the
most
common
dynam
techniqu
that
is
employ
inde
test
is
the
most
commonli
use
techniqu
for
detect
defect
and
perform
a
veri
critic
role
for
ensur
qualiti
dure
test
the
softwar
under
test
sut
is
execut
with
a
finit
set
of
test
case
and
the
behavior
of
the
system
for
these
test
case
is
evalu
to
determin
if
the
system
is
perform
a
expect
the
basic
purpos
of
test
is
to
increas
the
confid
in
the
function
of
sut
and
a
test
is
extrem
expens
and
can
consum
unlimit
amount
of
effort
an
addit
practic
goal
is
to
achiev
the
desir
confid
a
effici
a
possibl
clearli
the
effect
and
effici
of
test
depend
critic
on
the
test
case
select
much
of
thi
chapter
therefor
is
devot
to
test
case
select
p.
jalot
a
concis
introduct
to
softwar
engin
basic
concept
and
definit
relat
to
test
like
error
fault
failur
test
case
test
suit
test
har
etc
the
test
process—how
test
is
plan
and
how
test
of
a
unit
is
done
test
case
select
use
black-box
test
approach
some
metric
like
coverag
and
reliabl
that
can
be
employ
dure
test-
ing
in
thi
section
we
will
first
defin
some
of
the
term
that
are
commonli
use
when
discuss
test
then
we
will
discu
some
basic
issu
relat
to
how
test
is
perform
and
the
import
of
psycholog
of
the
tester
while
discuss
test
we
commonli
use
term
like
error
fault
failur
etc
let
u
start
by
defin
these
concept
clearli
52
the
term
error
is
use
in
two
differ
way
it
refer
to
the
discrep
between
a
comput
observ
or
measur
valu
and
the
true
specifi
or
theoret
correct
valu
that
is
error
refer
to
the
differ
between
the
actual
output
of
a
softwar
and
the
correct
output
in
thi
interpret
error
is
essenti
a
measur
of
the
differ
between
the
actual
and
the
ideal
error
is
also
use
to
refer
to
human
action
that
result
in
softwar
contain
a
defect
or
fault
thi
definit
is
quit
gener
and
encompass
all
the
phase
fault
is
a
condit
that
caus
a
system
to
fail
in
perform
it
requir
function
a
fault
is
the
basic
reason
for
softwar
malfunct
and
is
practic
synonym
with
the
commonli
use
term
bug
or
the
somewhat
more
gener
term
defect
the
term
error
is
also
often
use
to
refer
to
defect
take
a
variat
of
the
second
definit
of
error
in
thi
book
we
will
continu
to
use
the
term
in
the
manner
commonli
use
and
no
explicit
distinct
will
be
made
between
error
and
fault
unless
necessari
failur
is
the
inabl
of
a
system
or
compon
to
perform
a
requir
function
accord
to
it
specif
a
softwar
failur
occur
if
the
behavior
of
the
softwar
is
differ
from
the
specifi
behavior
failur
may
be
caus
by
function
or
perform
factor
note
that
the
definit
doe
not
impli
that
a
failur
must
be
observ
it
is
possibl
that
a
failur
may
occur
but
not
be
detect
there
are
some
implic
of
these
definit
presenc
of
an
error
in
the
state
impli
that
a
failur
must
have
occur
and
the
observ
of
a
failur
impli
that
a
fault
must
be
present
in
the
system
howev
the
presenc
of
a
fault
doe
not
impli
that
a
failur
must
occur
the
presenc
of
a
fault
in
a
system
onli
impli
that
the
fault
ha
a
potenti
to
caus
a
failur
whether
a
fault
actual
manifest
itself
in
a
certain
time
durat
depend
on
how
the
softwar
is
execut
there
are
direct
consequ
of
thi
on
test
if
dure
test
we
do
not
observ
ani
error
we
can
not
say
anyth
about
the
presenc
or
absenc
of
fault
in
the
system
if
on
the
other
hand
we
observ
some
failur
we
can
say
that
there
are
some
fault
in
the
system
thi
relationship
of
fault
and
failur
make
the
task
of
select
test
case
for
test
veri
challenging—an
object
while
select
test
case
is
to
select
those
that
will
reveal
the
defect
if
it
exist
ideal
we
would
like
the
set
of
test
case
to
be
such
that
if
there
are
ani
defect
in
the
system
some
test
case
in
the
set
will
reveal
it—someth
imposs
to
achiev
in
most
situat
it
should
be
note
that
dure
the
test
process
onli
failur
are
ob-
serv
by
which
the
presenc
of
fault
is
deduc
that
is
test
onli
reveal
the
presenc
of
fault
the
actual
fault
are
identifi
by
separ
activ
commonli
refer
to
a
debugging.
in
other
word
for
identifi
fault
af-
ter
test
ha
reveal
the
presenc
of
fault
the
expens
task
of
debug
ha
to
be
perform
thi
is
one
of
the
reason
whi
test
is
an
expens
method
for
identif
of
fault
so
far
we
have
use
the
term
test
case
or
set
of
test
case
inform
let
u
defin
them
more
precis
a
test
case
often
call
a
test
can
be
consid
a
compris
a
set
of
test
input
and
execut
condit
which
are
design
to
exercis
the
sut
in
a
particular
manner
52
gener
a
test
case
also
specifi
the
expect
outcom
from
execut
the
sut
under
the
specifi
execut
condit
and
test
input
a
group
of
relat
test
case
that
are
gener
execut
togeth
to
test
some
specif
behavior
or
aspect
of
the
sut
is
often
refer
to
a
a
test
suit
note
that
in
a
test
case
test
input
and
execut
condit
are
mention
separ
test
input
are
the
specif
valu
of
paramet
or
other
input
that
are
given
to
the
sut
either
by
the
user
or
some
other
program
the
execut
condit
on
the
other
hand
reflect
the
state
of
the
system
and
environ
which
also
impact
the
behavior
of
the
sut
so
for
exampl
while
test
a
function
to
add
a
record
in
the
databas
if
it
doe
not
alreadi
exist
the
behavior
of
the
function
will
depend
both
on
the
valu
of
the
input
record
a
well
a
the
state
of
the
databas
and
a
test
case
need
to
specifi
both
for
exampl
a
test
case
for
thi
function
might
specifi
a
record
r
a
input
and
might
specifi
that
the
state
of
the
databas
be
such
that
r
alreadi
exist
in
it
test
can
be
done
manual
with
the
tester
execut
the
test
case
in
the
test
suit
and
then
check
if
the
behavior
is
a
specifi
in
the
test
case
thi
is
a
veri
cumbersom
process
particularli
when
the
test
suit
contain
a
larg
number
of
test
case
it
becom
even
more
cumbersom
sinc
the
test
suit
often
ha
to
be
execut
everi
time
the
sut
is
chang
henc
the
current
with
autom
test
a
test
case
is
typic
a
function
call
or
a
method
invoc
which
doe
all
the
activ
of
a
test
case—it
set
the
test
data
and
the
test
condit
invok
the
sut
a
per
the
test
case
compar
the
result
return
with
expect
result
and
declar
to
the
tester
whether
the
sut
fail
or
pass
the
test
case
in
other
word
with
autom
test
execut
a
test
case
essenti
mean
execut
thi
function
a
test
suit
will
then
be
a
set
of
such
function
each
repres
a
test
case
to
test
a
sut
with
the
test
suit
gener
an
autom
test
script
will
be
written
which
will
invok
the
test
case
in
the
desir
sequenc
to
have
a
test
suit
execut
automat
we
will
need
a
framework
in
which
test
input
can
be
defin
defin
input
can
be
use
by
function
repres
test
case
the
autom
test
script
can
be
written
the
sut
can
be
execut
by
thi
script
and
the
result
of
entir
test
report
to
the
tester
mani
test
framework
now
exist
that
permit
all
thi
to
be
done
in
a
simpl
manner
a
test
framework
is
also
sometim
call
a
test
har
a
test
har
or
a
test
framework
make
the
life
of
a
tester
simpler
by
provid
easi
mean
of
defin
a
test
suit
execut
it
and
report
the
result
with
a
test
framework
a
test
suit
is
defin
onc
and
then
whenev
need
complet
test
can
be
done
by
the
click
of
a
button
or
give
a
command
as
mention
in
test
the
softwar
under
test
sut
is
execut
with
a
set
of
test
case
as
discuss
devis
a
set
of
test
case
that
will
guarante
that
all
error
will
be
detect
is
not
feasibl
moreov
there
are
no
formal
or
precis
method
for
select
test
case
even
though
there
are
a
number
of
heurist
and
rule
of
thumb
for
decid
the
test
case
select
test
case
is
still
a
creativ
activ
that
reli
on
the
ingenu
of
the
tester
becaus
of
thi
the
psycholog
of
the
person
perform
the
test
becom
import
a
basic
purpos
of
test
is
to
detect
the
error
that
may
be
present
in
the
program
henc
one
should
not
start
test
with
the
intent
of
show
that
a
program
work
rather
the
intent
should
be
to
show
that
a
program
doe
not
work
to
reveal
ani
defect
that
may
exist
due
to
thi
test
ha
also
been
defin
a
the
process
of
execut
a
program
with
the
intent
of
find
error
thi
emphasi
on
proper
intent
of
test
is
not
a
trivial
matter
becaus
test
case
are
design
by
human
be
and
human
be
have
a
tendenc
to
perform
action
to
achiev
the
goal
they
have
in
mind
so
if
the
goal
is
to
demonstr
that
a
program
work
we
may
conscious
or
subconsci
select
test
case
that
will
tri
to
demonstr
that
goal
and
that
will
beat
the
basic
purpos
of
test
on
the
other
hand
if
the
intent
is
to
show
that
the
program
doe
not
work
we
will
challeng
our
intellect
to
find
test
case
toward
that
end
and
we
are
like
to
detect
more
error
test
is
essenti
a
destruct
process
where
the
tester
ha
to
treat
the
program
a
an
adversari
that
must
be
beaten
by
the
tester
by
show
the
presenc
of
error
thi
is
one
of
the
reason
whi
mani
organ
employ
independ
test
in
which
test
is
done
by
a
team
that
wa
not
involv
in
build
the
system
test
is
usual
reli
upon
to
detect
the
fault
remain
from
earlier
stage
in
addit
to
the
fault
introduc
dure
code
itself
due
to
thi
differ
level
of
test
are
use
in
the
test
process
each
level
of
test
aim
to
test
differ
aspect
of
the
system
the
basic
level
are
unit
test
integr
test
system
test
and
accept
test
these
differ
level
of
test
attempt
to
detect
differ
type
of
fault
the
relat
of
the
fault
introduc
in
differ
phase
and
the
differ
level
of
test
are
shown
in
figur
the
first
level
of
test
is
call
unit
test
which
we
discuss
in
the
previou
chapter
unit
test
is
essenti
for
verif
of
the
code
produc
by
individu
programm
and
is
typic
done
by
the
programm
of
the
modul
gener
a
modul
is
offer
by
a
programm
for
integr
and
use
by
other
onli
after
it
ha
been
unit
test
satisfactorili
the
next
level
of
test
is
often
call
integr
test
in
thi
mani
unit
test
modul
are
combin
into
subsystem
which
are
then
test
the
goal
here
is
to
see
if
the
modul
can
be
integr
properli
henc
the
emphasi
is
on
test
interfac
between
modul
thi
test
activ
can
be
consid
test
the
design
the
next
level
are
system
test
and
accept
test
here
the
entir
softwar
system
is
test
the
refer
document
for
thi
process
is
the
requir
document
and
the
goal
is
to
see
if
the
softwar
meet
it
require-
ment
thi
is
often
a
larg
exercis
which
for
larg
project
may
last
mani
week
or
month
thi
is
essenti
a
valid
exercis
and
in
mani
situa-
tion
it
is
the
onli
valid
activ
accept
test
is
often
perform
with
realist
data
of
the
client
to
demonstr
that
the
softwar
is
work
satisfactorili
it
may
be
done
in
the
set
in
which
the
softwar
is
to
even-
tualli
function
accept
test
essenti
test
if
the
system
satisfactorili
solv
the
problem
for
which
it
wa
commiss
these
level
of
test
are
perform
when
a
system
is
be
built
from
the
compon
that
have
been
code
there
is
anoth
level
of
test
call
regress
test
that
is
perform
when
some
chang
are
made
to
an
exist
system
we
know
that
chang
are
fundament
to
softwar
ani
softwar
must
undergo
chang
howev
when
modif
are
made
to
an
exist
system
test
also
ha
to
be
done
to
make
sure
that
the
modif
ha
not
had
ani
undesir
side
effect
of
make
some
of
the
earlier
servic
faulti
that
is
besid
ensur
the
desir
behavior
of
the
new
servic
test
ha
to
ensur
that
the
desir
behavior
of
the
old
servic
is
maintain
thi
is
the
task
of
regress
test
for
regress
test
some
test
case
that
have
been
execut
on
the
old
system
are
maintain
along
with
the
output
produc
by
the
old
system
these
test
case
are
execut
again
on
the
modifi
system
and
it
output
compar
with
the
earlier
output
to
make
sure
that
the
system
is
work
a
befor
on
these
test
case
thi
frequent
is
a
major
task
when
modif
are
to
be
made
to
exist
system
complet
regress
test
of
larg
system
can
take
a
consider
amount
of
time
even
if
autom
is
use
if
a
small
chang
is
made
to
the
system
often
practic
consider
requir
that
the
entir
test
suit
not
be
execut
but
regress
test
be
done
with
onli
a
subset
of
test
case
thi
requir
suitabl
select
test
case
from
the
suit
which
can
test
those
part
of
the
system
that
could
be
affect
by
the
chang
test
case
select
for
regress
test
is
an
activ
research
area
and
mani
differ
approach
have
been
propos
in
the
literatur
for
thi
we
will
not
discu
it
ani
further
the
basic
goal
of
the
softwar
develop
process
is
to
produc
softwar
that
ha
no
error
or
veri
few
error
test
is
a
qualiti
control
activ
which
focu
on
identifi
defect
which
are
then
remov
we
have
seen
that
differ
level
of
test
are
need
to
detect
the
defect
inject
dure
the
variou
task
in
the
project
and
at
a
level
multipl
sut
may
be
test
and
for
test
each
sut
test
case
will
have
to
be
design
and
then
execut
overal
test
in
a
project
is
a
complex
task
which
also
consum
the
max-
imum
effort
henc
test
ha
to
be
done
properli
in
a
project
the
test
process
for
a
project
consist
of
three
high-level
tasks—test
plan
test
case
design
and
test
execut
we
will
discu
these
in
the
rest
of
thi
section
in
gener
in
a
project
test
commenc
with
a
test
plan
and
termin
with
success
execut
of
accept
test
a
test
plan
is
a
gener
docu-
ment
for
the
entir
project
that
defin
the
scope
approach
to
be
taken
and
the
schedul
of
test
a
well
a
identifi
the
test
item
for
test
and
the
personnel
respons
for
the
differ
activ
of
test
the
test
plan
can
be
done
well
befor
the
actual
test
commenc
and
can
be
done
in
par-
allel
with
the
code
and
design
activ
the
input
for
form
the
test
plan
are
1
project
plan
2
requir
document
and
3
architectur
or
design
document
the
project
plan
is
need
to
make
sure
that
the
test
plan
is
consist
with
the
overal
qualiti
plan
for
the
project
and
the
test
schedul
match
that
of
the
project
plan
the
requir
document
and
the
design
document
are
the
basic
document
use
for
select
the
test
unit
and
decid-
ing
the
approach
to
be
use
dure
test
a
test
plan
should
contain
the
follow
as
seen
earlier
differ
level
of
test
have
to
be
perform
in
a
project
the
level
are
specifi
in
the
test
plan
by
identifi
the
test
unit
for
the
project
a
test
unit
is
a
set
of
one
or
more
modul
that
form
a
softwar
under
test
sut
the
identif
of
test
unit
establish
the
differ
level
of
test
that
will
be
perform
in
the
project
gener
a
number
of
test
unit
are
form
dure
the
test
start
from
the
lower-level
modul
which
have
to
be
unit-test
that
is
first
the
modul
that
have
to
be
test
individu
are
specifi
a
test
unit
then
the
higher-level
unit
are
specifi
which
may
be
a
combin
of
alreadi
test
unit
or
may
combin
some
alreadi
test
unit
with
some
untest
modul
the
basic
idea
behind
form
test
unit
is
to
make
sure
that
test
is
be
perform
increment
with
each
increment
includ
onli
a
few
aspect
that
need
to
be
test
an
import
factor
while
form
a
unit
is
the
testabl
of
a
unit
a
unit
should
be
such
that
it
can
be
easili
test
in
other
word
it
should
be
possibl
to
form
meaning
test
case
and
execut
the
unit
without
much
effort
with
these
test
case
for
exampl
a
modul
that
manipul
the
complex
data
structur
form
from
a
file
input
by
an
input
modul
might
not
be
a
suitabl
unit
from
the
point
of
view
of
testabl
a
form
meaning
test
case
for
the
unit
will
be
hard
and
driver
routin
will
have
to
be
written
to
convert
input
from
file
or
termin
that
are
given
by
the
tester
into
data
structur
suitabl
for
the
modul
in
thi
case
it
might
be
better
to
form
the
unit
by
includ
the
input
modul
a
well
then
the
file
input
expect
by
the
input
modul
can
contain
the
test
case
featur
to
be
test
includ
all
softwar
featur
and
combin
of
fea-
ture
that
should
be
test
a
softwar
featur
is
a
softwar
characterist
spec-
ifi
or
impli
by
the
requir
or
design
document
these
may
includ
function
perform
design
constraint
and
attribut
the
approach
for
test
specifi
the
overal
approach
to
be
follow
in
the
current
project
the
techniqu
that
will
be
use
to
judg
the
test
effort
should
also
be
specifi
thi
is
sometim
call
the
test
criterion
or
the
criterion
for
evalu
the
set
of
test
case
use
in
test
in
the
previou
section
we
discuss
mani
criterion
for
evalu
and
select
test
case
test
deliver
should
be
specifi
in
the
test
plan
befor
the
actual
test
begin
deliver
could
be
a
list
of
test
case
that
were
use
detail
result
of
test
includ
the
list
of
defect
found
test
summari
report
and
data
about
the
code
coverag
the
test
plan
typic
also
specifi
the
schedul
and
effort
to
be
spent
on
differ
activ
of
test
and
the
tool
to
be
use
thi
schedul
should
be
consist
with
the
overal
project
schedul
the
detail
plan
may
list
all
the
test
task
and
alloc
them
to
test
resourc
who
are
respons
for
perform
them
mani
larg
product
have
separ
test
team
and
therefor
a
separ
test
plan
a
smaller
project
may
includ
the
test
plan
a
part
of
it
qualiti
plan
in
the
project
manag
plan
the
test
plan
focu
on
how
the
test
for
the
project
will
proceed
which
unit
will
be
test
and
what
approach
and
tool
are
to
be
use
dure
the
variou
stage
of
test
howev
it
doe
not
deal
with
the
detail
of
test
a
unit
nor
doe
it
specifi
which
test
case
are
to
be
use
test
case
design
ha
to
be
done
separ
for
each
unit
base
on
the
approach
specifi
in
the
test
plan
and
the
featur
to
be
test
the
test
case
are
design
and
specifi
for
test
the
unit
test
case
specif
give
for
each
unit
to
be
test
all
test
case
input
to
be
use
in
the
test
case
condit
be
test
by
the
test
case
and
output
expect
for
those
test
case
if
test
case
are
specifi
in
a
document
the
specif
look
like
a
tabl
of
the
form
shown
in
figur
sometim
a
few
column
are
also
provid
for
record
the
outcom
of
differ
round
of
test
that
is
sometim
the
test
case
specif
doc-
ument
is
also
use
to
record
the
result
of
test
in
a
round
of
test
the
outcom
of
all
the
test
case
is
record
i.e.
pa
or
fail
hope
in
a
few
round
all
test
case
will
pa
with
test
framework
and
autom
test
the
test
script
can
be
consid
a
test
case
specif
a
they
clearli
show
what
input
are
be
given
and
what
output
to
expect
with
suitabl
comment
the
intent
of
the
test
case
can
also
be
easili
specifi
test
case
design
is
a
major
activ
in
the
test
process
care
select
of
test
case
that
satisfi
the
criterion
and
approach
specifi
is
essenti
for
proper
test
we
will
later
consid
differ
techniqu
for
design
good
test
case
there
are
some
good
reason
whi
test
case
are
specifi
befor
they
are
use
for
test
it
is
known
that
test
ha
sever
limit
and
the
effec-
tive
of
test
depend
veri
heavili
on
the
exact
natur
of
the
test
case
it
is
therefor
import
to
ensur
that
the
set
of
test
case
use
is
of
high
qualiti
evalu
of
test
case
is
often
done
through
test
case
review
as
for
ani
review
a
formal
document
or
work
product
is
need
for
review
of
test
case
the
test
case
specif
document
is
requir
thi
is
the
primari
reason
for
document
the
test
case
the
test
case
specif
document
is
review
use
a
formal
review
process
to
make
sure
that
the
test
case
are
consist
with
the
polici
specifi
in
the
plan
satisfi
the
chosen
criterion
and
cover
the
variou
aspect
of
the
unit
to
be
test
by
review
the
condit
be
test
by
the
test
case
the
review
can
also
check
if
all
the
import
condit
are
be
test
anoth
reason
for
specifi
the
test
case
in
a
document
or
a
script
is
that
by
do
thi
the
tester
can
see
the
test
of
the
unit
in
total
and
the
effect
of
the
total
set
of
test
case
thi
type
of
evalu
is
hard
to
do
in
on-the-fli
test
where
test
case
are
determin
a
test
proce
it
also
allow
optim
the
number
of
test
case
a
evalu
of
the
test
suit
may
show
that
some
test
case
are
redund
with
the
specif
of
test
case
the
next
step
in
the
test
process
is
to
execut
them
thi
step
is
also
not
straightforward
the
test
case
specif
onli
specifi
the
set
of
test
case
for
the
unit
to
be
test
howev
execut
the
test
case
may
requir
construct
of
driver
modul
or
stub
it
may
also
requir
modul
to
set
up
the
environ
a
state
in
the
test
plan
and
test
case
specif
onli
after
all
these
are
readi
can
the
test
case
be
execut
if
test
framework
are
be
use
then
the
set
of
the
environ
a
well
a
input
for
a
test
case
is
alreadi
done
in
the
test
script
and
execut
is
straightforward
dure
test
case
execut
defect
are
found
these
defect
are
then
fix
and
tese
is
done
again
to
verifi
the
fix
to
facilit
report
and
track
of
defect
found
dure
test
and
other
qualiti
control
activ
defect
found
are
often
log
defect
log
is
particularli
import
in
a
larg
softwar
project
which
may
have
hundr
or
thousand
of
defect
that
are
found
by
differ
peopl
at
differ
stage
of
the
project
often
the
person
who
fix
a
defect
is
not
the
person
who
find
or
report
the
defect
for
exampl
a
tester
may
find
the
defect
while
the
develop
of
the
code
may
actual
fix
it
in
such
a
scenario
defect
report
and
close
can
not
be
done
inform
the
use
of
inform
mechan
may
easili
lead
to
defect
be
found
but
later
forgotten
result
in
defect
not
get
remov
or
in
extra
effort
in
find
the
defect
again
henc
defect
found
must
be
properli
log
in
a
system
and
their
closur
track
defect
log
and
track
is
consid
one
of
the
best
practic
for
manag
a
project
17
and
is
follow
by
most
softwar
organ
let
u
understand
the
life
cycl
of
a
defect
a
defect
can
be
found
by
anyon
at
anytim
when
a
defect
is
found
it
is
log
in
a
defect
control
system
along
with
suffici
inform
about
the
defect
the
defect
is
then
in
the
state
submit
essenti
impli
that
it
ha
been
log
along
with
inform
about
it
the
job
of
fix
the
defect
is
then
assign
to
some
person
who
is
gener
the
author
of
the
document
or
code
in
which
the
defect
is
found
the
assign
person
doe
the
debug
and
fix
the
report
defect
and
the
defect
then
enter
the
fix
state
howev
a
defect
that
is
fix
is
still
not
consid
a
fulli
done
the
success
fix
of
the
defect
is
verifi
thi
verif
may
be
done
by
anoth
person
often
the
submitt
or
by
a
test
team
and
typic
involv
run
some
test
onc
the
defect
fix
is
verifi
then
the
defect
can
be
mark
a
closed.
in
other
word
the
gener
life
cycl
of
a
defect
ha
three
states—submit
fix
and
close
a
shown
in
figur
a
defect
that
is
not
close
is
also
call
open
thi
is
a
typic
life
cycl
of
a
defect
which
is
use
in
mani
organ
e.g.
58
ideal
at
the
end
of
the
project
no
open
defect
should
remain
howev
thi
ideal
situat
is
often
not
practic
for
most
larg
system
besid
use
the
log
for
track
defect
the
data
in
the
log
can
also
be
use
for
analysi
purpos
we
will
discu
some
possibl
analysi
later
in
the
chapter
as
we
have
seen
good
test
case
design
is
the
key
to
suitabl
test
of
the
sut
the
goal
while
test
a
sut
is
to
detect
most
hope
all
of
the
defect
through
a
small
a
set
of
test
case
a
possibl
due
to
thi
basic
goal
it
is
import
to
select
test
case
carefully—best
are
those
test
case
that
have
a
high
probabl
of
detect
a
defect
if
it
exist
and
also
whose
execut
will
give
a
confid
that
no
failur
dure
test
impli
that
there
are
few
hope
none
defect
in
the
softwar
there
are
two
basic
approach
to
design
the
test
case
to
be
use
in
test
black-box
and
white-box
in
black-box
test
the
structur
of
the
program
is
not
consid
test
case
are
decid
sole
on
the
basi
of
the
requir
or
specif
of
the
program
or
modul
and
the
intern
of
the
modul
or
the
program
are
not
consid
for
select
of
test
case
in
thi
section
we
will
present
some
techniqu
for
gener
test
case
for
black-box
test
white-box
test
is
discuss
in
the
next
section
in
black-box
test
the
tester
onli
know
the
input
that
can
be
given
to
the
system
and
what
output
the
system
should
give
in
other
word
the
basi
for
decid
test
case
is
the
requir
or
specif
of
the
system
or
modul
thi
form
of
test
is
also
call
function
or
behavior
test
the
most
obviou
function
test
procedur
is
exhaust
test
which
is
impract
one
criterion
for
gener
test
case
is
to
gener
them
ran-
domli
thi
strategi
ha
littl
chanc
of
result
in
a
set
of
test
case
that
is
close
to
optim
i.e.
that
detect
the
maximum
error
with
minimum
test
case
henc
we
need
some
other
criterion
or
rule
for
select
test
case
there
are
no
formal
rule
for
design
test
case
for
function
test
how-
ever
there
are
a
number
of
techniqu
or
heurist
that
can
be
use
to
select
test
case
that
have
been
found
to
be
veri
success
in
detect
error
here
we
mention
some
of
these
techniqu
becaus
we
can
not
do
exhaust
test
the
next
natur
approach
is
to
divid
the
input
domain
into
a
set
of
equival
class
so
that
if
the
program
work
correctli
for
a
valu
then
it
will
work
correctli
for
all
the
other
valu
in
that
class
if
we
can
inde
identifi
such
class
then
test
the
program
with
one
valu
from
each
equival
class
is
equival
to
do
an
exhaust
test
of
the
program
howev
without
look
at
the
intern
structur
of
the
program
it
is
imposs
to
determin
such
ideal
equival
class
even
with
the
intern
structur
it
usual
can
not
be
done
the
equival
class
partit
method
68
tri
to
approxim
thi
ideal
an
equival
class
is
form
of
the
input
for
which
the
behavior
of
the
system
is
specifi
or
expect
to
be
similar
each
group
of
input
for
which
the
behavior
is
expect
to
be
differ
from
other
is
consid
a
separ
equival
class
the
rational
of
form
equival
class
like
thi
is
the
assumpt
that
if
the
specif
requir
the
same
behavior
for
each
element
in
a
class
of
valu
then
the
program
is
like
to
be
construct
so
that
it
either
succe
or
fail
for
each
of
the
valu
in
that
class
for
exampl
the
specif
of
a
modul
that
determin
the
absolut
valu
for
integ
specifi
one
behavior
for
posit
integ
and
anoth
for
neg
integ
in
thi
case
we
will
form
two
equival
classes—on
consist
of
posit
integ
and
the
other
consist
of
neg
integ
for
robust
softwar
we
must
also
consid
invalid
input
that
is
we
should
defin
equival
class
for
invalid
input
also
equival
class
are
usual
form
by
consid
each
condit
speci-
fie
on
an
input
a
specifi
a
valid
equival
class
and
one
or
more
invalid
equival
class
for
exampl
if
an
input
condit
specifi
a
rang
of
val-
ue
say
0
<
count
<
max
then
form
a
valid
equival
class
with
that
rang
and
two
invalid
equival
class
one
with
valu
le
than
the
lower
bound
of
the
rang
i.e.
count
<
0
and
the
other
with
valu
higher
than
the
higher
bound
count
>
max
if
the
input
specifi
a
set
of
valu
and
the
require-
ment
specifi
differ
behavior
for
differ
element
in
the
set
then
a
valid
equival
class
is
form
for
each
of
the
element
in
the
set
and
an
invalid
class
for
an
entiti
not
belong
to
the
set
one
common
approach
for
determin
equival
class
is
a
follow
if
there
is
reason
to
believ
that
the
entir
rang
of
an
input
will
not
be
treat
in
the
same
manner
then
the
rang
should
be
split
into
two
or
more
equival
class
each
consist
of
valu
for
which
the
behavior
is
expect
to
be
sim-
ilar
for
exampl
for
a
charact
input
if
we
have
reason
to
believ
that
the
program
will
perform
differ
action
if
the
charact
is
a
letter
a
number
or
a
special
charact
then
we
should
split
the
input
into
three
valid
equival
anoth
approach
for
form
equival
class
is
to
consid
ani
special
valu
for
which
the
behavior
could
be
differ
a
an
equival
class
for
exampl
the
valu
0
could
be
a
special
valu
for
an
integ
input
also
for
each
valid
equival
class
one
or
more
invalid
equival
class
should
be
identifi
it
is
often
use
to
consid
equival
class
in
the
output
for
an
output
equival
class
the
goal
is
to
have
input
such
that
the
output
for
that
test
case
lie
in
the
output
equival
class
as
an
exampl
consid
a
program
for
determin
rate
of
return
for
some
invest
there
are
three
clear
output
equival
classes—posit
rate
of
return
neg
rate
of
return
and
zero
rate
of
return
dure
test
it
is
import
to
test
for
each
of
these
that
is
give
input
such
that
each
of
these
three
output
is
gener
determin
test
case
for
output
class
may
be
more
difficult
but
output
class
have
been
found
to
reveal
error
that
are
not
reveal
by
just
consid
the
input
class
onc
equival
class
are
select
for
each
of
the
input
then
the
issu
is
to
select
test
case
suitabl
there
are
differ
way
to
select
the
test
case
one
strategi
is
to
select
each
test
case
cover
a
mani
valid
equival
class
a
it
can
and
one
separ
test
case
for
each
invalid
equival
class
a
somewhat
better
strategi
which
requir
more
test
case
is
to
have
a
test
case
cover
at
most
one
valid
equival
class
for
each
input
and
have
one
separ
test
case
for
each
invalid
equival
class
in
the
latter
case
the
number
of
test
case
for
valid
equival
class
is
equal
to
the
largest
number
of
equival
class
for
ani
input
plu
the
total
number
of
invalid
equival
class
as
an
exampl
consid
a
program
that
take
two
inputs—a
string
s
of
length
up
to
n
and
an
integ
n.
the
program
is
to
determin
the
top
n
highest
occur
charact
in
s.
the
tester
belief
that
the
programm
may
deal
with
differ
type
of
charact
separ
one
set
of
valid
and
invalid
equival
class
for
thi
is
shown
in
tabl
with
these
a
the
equival
class
we
have
to
select
the
test
case
a
test
case
for
thi
is
a
pair
of
valu
for
s
and
n.
with
the
first
strategi
for
decid
test
case
one
test
case
could
be
s
a
a
string
of
length
le
than
n
contain
lowercas
uppercas
number
and
special
charact
and
n
a
the
number
5
thi
one
test
case
cover
all
the
valid
equival
class
eq6
then
we
will
have
one
test
case
each
for
cover
ieq1
ieq2
and
ieq3
that
is
a
total
of
four
test
case
is
need
with
the
second
approach
in
one
test
case
we
can
cover
one
equival
class
for
one
input
onli
so
one
test
case
could
be
a
string
of
number
and
the
number
5
thi
cover
eq6
then
we
will
need
test
case
for
eq5
and
separ
test
case
for
ieq3
it
ha
been
observ
that
program
that
work
correctli
for
a
set
of
valu
in
an
equival
class
fail
on
some
special
valu
these
valu
often
lie
on
the
boundari
of
the
equival
class
test
case
that
have
valu
on
the
boundari
of
equival
class
are
therefor
like
to
be
high-yield
test
case
and
select
such
test
case
is
the
aim
of
boundari
valu
analysi
in
boundari
valu
analysi
68
we
choos
an
input
for
a
test
case
from
an
equival
class
such
that
the
input
lie
at
the
edg
of
the
equival
class
boundari
valu
for
each
equival
class
includ
the
equival
class
of
the
output
should
be
cover
boundari
valu
test
case
are
also
call
extrem
cases.
henc
we
can
say
that
a
boundari
valu
test
case
is
a
set
of
input
data
that
lie
on
the
edg
or
boundari
of
a
class
of
input
data
or
that
gener
output
that
lie
at
the
boundari
of
a
class
of
output
data
in
case
of
rang
for
boundari
valu
analysi
it
is
use
to
select
the
boundari
element
of
the
rang
and
an
invalid
valu
just
beyond
the
two
end
for
the
two
invalid
equival
class
so
if
the
rang
is
0.0
x
1.0
then
the
test
case
are
0.0
1.0
valid
input
and
0.1
and
1.1
for
invalid
input
similarli
if
the
input
is
a
list
attent
should
be
focus
on
the
first
and
last
element
of
the
list
we
should
also
consid
the
output
for
boundari
valu
analysi
if
an
equival
class
can
be
identifi
in
the
output
we
should
tri
to
gener
test
case
that
will
produc
the
output
that
lie
at
the
boundari
of
the
equival
class
furthermor
we
should
tri
to
form
test
case
that
will
produc
an
output
that
doe
not
lie
in
the
equival
class
if
we
can
produc
an
input
case
that
produc
the
output
outsid
the
equival
class
we
have
detect
an
error
like
in
equival
class
partit
in
boundari
valu
analysi
we
first
determin
valu
for
each
of
the
variabl
that
should
be
exercis
dure
test-
ing
if
there
are
multipl
input
then
how
should
the
set
of
test
case
be
form
cover
the
boundari
valu
suppos
each
input
variabl
ha
a
defin
rang
then
there
are
six
boundari
values—th
extrem
end
of
the
rang
just
be-
yond
the
end
and
just
befor
the
end
if
an
integ
rang
is
min
to
max
then
the
six
valu
are
min
1
min
min
+
1
max
1
max
max
+
1
suppos
there
are
n
such
input
variabl
there
are
two
strategi
for
combin
the
boundari
valu
for
the
differ
variabl
in
test
case
in
the
first
strategi
we
select
the
differ
boundari
valu
for
one
variabl
and
keep
the
other
variabl
at
some
nomin
valu
and
we
select
one
test
case
consist
of
nomin
valu
of
all
the
variabl
in
thi
case
we
will
have
6n+
for
two
variabl
x
and
y
the
1
anoth
strategi
would
be
to
tri
all
possibl
combin
for
the
valu
for
the
differ
variabl
as
there
are
seven
valu
for
each
variabl
six
boundari
valu
and
one
nomin
valu
if
there
are
n
variabl
there
will
be
a
total
of
7n
test
cases—too
larg
for
practic
test
there
are
gener
mani
paramet
that
determin
the
behavior
of
a
softwar
system
these
paramet
could
be
direct
input
to
the
softwar
or
implicit
set
like
those
for
devic
these
paramet
can
take
differ
valu
and
for
some
of
them
the
softwar
may
not
work
correctli
mani
of
the
defect
in
softwar
gener
involv
one
condit
that
is
some
special
valu
of
one
of
the
paramet
such
a
defect
is
call
a
single-mod
fault
70
simpl
exampl
of
single-mod
fault
are
a
softwar
not
abl
to
print
for
a
particular
type
of
printer
a
softwar
that
can
not
comput
fare
properli
when
the
travel
is
a
minor
and
a
telephon
bill
softwar
that
doe
not
comput
the
bill
properli
for
a
particular
countri
single-mod
fault
can
be
detect
by
test
for
differ
valu
of
dif-
ferent
paramet
so
if
there
are
n
paramet
for
a
system
and
each
one
of
them
can
take
m
differ
valu
or
m
differ
class
of
valu
each
class
be
consid
a
the
same
for
purpos
of
test
a
in
equival
class
partit
then
with
each
test
case
we
can
test
one
differ
valu
of
each
paramet
in
other
word
we
can
test
for
all
the
differ
valu
in
m
test
case
howev
all
fault
are
not
single-mod
and
there
are
combin
of
input
that
reveal
the
presenc
of
fault
for
exampl
a
telephon
bill
softwar
that
doe
not
comput
correctli
for
nighttim
call
one
paramet
to
a
particular
countri
anoth
paramet
or
an
airlin
ticket
system
that
ha
incorrect
behavior
when
a
minor
one
paramet
is
travel
busi
class
anoth
paramet
and
not
stay
over
the
weekend
third
paramet
these
multi-
mode
fault
can
be
reveal
dure
test
by
tri
differ
combin
of
the
paramet
values—an
approach
call
combinatori
test
unfortun
full
combinatori
test
is
often
not
feasibl
for
a
system
with
n
paramet
each
have
m
valu
the
number
of
differ
combin
is
nm
for
a
simpl
system
with
each
have
the
total
number
of
combin
is
3,125
and
if
test
each
combin
take
it
will
take
over
clearli
for
complex
system
that
have
mani
paramet
and
each
paramet
may
have
mani
valu
a
full
combinatori
test
is
not
feasibl
and
practic
techniqu
are
need
to
reduc
the
number
of
test
some
research
ha
suggest
that
most
softwar
fault
are
reveal
on
some
special
singl
valu
or
by
interact
of
a
pair
of
valu
25
that
it
most
fault
tend
to
be
either
single-mod
or
double-mod
for
test
for
double-
mode
fault
we
need
not
test
the
system
with
all
the
combin
of
paramet
valu
but
need
to
test
such
that
all
combin
of
valu
for
each
pair
of
paramet
are
exercis
thi
is
call
pairwis
test
in
pairwis
test
all
pair
of
valu
have
to
be
exercis
dure
test
if
there
are
n
paramet
each
with
m
valu
then
between
each
two
paramet
we
have
m
∗
m
pair
the
first
paramet
will
have
these
mani
pair
with
each
of
the
remain
n
−
the
second
one
will
have
new
pair
with
n
−
a
it
pair
with
the
first
are
alreadi
includ
in
the
first
paramet
pair
the
third
will
have
pair
with
n
−
and
so
on
that
is
the
total
number
of
pair
is
m
∗
m
∗
n
∗
n
−
1
/2
the
object
of
pairwis
test
is
to
have
a
set
of
test
case
that
cover
all
the
pair
as
there
are
n
paramet
a
test
case
is
a
combin
of
valu
of
these
paramet
and
will
cover
n
1
+
n
2
+
...
=
n
n
1
/
in
the
best
case
when
each
pair
is
cover
exactli
onc
by
one
test
case
m
as
an
exampl
consid
a
softwar
product
be
develop
for
multipl
platform
that
us
the
browser
a
it
interfac
suppos
the
softwar
is
be-
ing
design
to
work
for
three
differ
oper
system
and
three
differ
browser
in
addit
a
the
product
is
memori
intens
there
is
a
desir
to
test
it
perform
under
differ
level
of
memori
so
we
have
the
follow
three
paramet
with
their
differ
valu
oper
system
window
solari
linux
memori
size
128m
256m
512m
for
discuss
we
can
say
that
the
system
ha
three
paramet
a
op-
erat
system
b
memori
size
and
c
browser
each
of
them
can
have
three
valu
which
we
will
refer
to
a
a1
a2
a3
b1
b2
b3
and
c1
c2
c3
the
total
number
of
pairwis
combin
is
9
3
=
27
the
number
of
test
case
howev
to
cover
all
the
pair
is
much
le
a
test
case
consist
of
valu
of
the
three
paramet
cover
three
combin
of
a-b
b-c
and
a-c
henc
in
the
best
case
we
can
cover
all
227/3=
these
test
case
are
shown
in
tabl
along
with
the
pair
they
cover
as
should
be
clear
gener
test
case
to
cover
all
the
pair
is
not
a
simpl
task
the
minimum
set
of
test
case
is
that
in
which
each
pair
is
cover
by
exactli
one
test
case
often
it
will
not
be
possibl
to
gener
the
minimum
set
of
test
case
particularli
when
the
number
of
valu
for
differ
paramet
is
differ
variou
algorithm
have
been
propos
and
some
program
are
avail
onlin
to
gener
the
test
case
to
cover
all
the
pair
for
situat
where
manual
gener
is
feasibl
the
follow
approach
can
be
follow
start
with
initi
test
case
form
by
all
combin
of
valu
for
the
two
paramet
which
have
the
largest
number
of
valu
a
we
must
have
at
least
thi
mani
test
case
to
test
all
the
pair
for
these
two
paramet
then
complet
each
of
these
test
case
by
ad
valu
for
other
paramet
such
that
they
add
pair
that
have
not
yet
been
cover
by
ani
test
case
when
all
are
complet
form
addit
test
case
by
combin
a
mani
uncov
pair
a
possibl
essenti
we
are
gener
test
case
such
that
a
test
case
cover
a
mani
new
pair
a
possibl
by
avoid
cover
pair
multipl
time
we
can
produc
a
small
set
of
test
case
that
cover
all
pair
effici
algorithm
of
gener
the
smallest
number
of
test
case
for
pairwis
test
exist
in
25
an
exampl
is
given
in
which
for
1
each
have
three
distinct
valu
all
pair
are
cover
in
mere
1
while
the
total
number
of
combin
is
over
pairwis
test
is
a
practic
way
of
test
larg
softwar
system
that
have
mani
differ
paramet
with
distinct
function
expect
for
differ
valu
an
exampl
would
be
a
bill
system
for
telephon
hotel
airlin
etc
which
ha
differ
rate
for
differ
paramet
valu
it
is
also
a
practic
approach
for
test
general-purpos
softwar
product
that
are
expect
to
run
on
differ
platform
and
configur
or
a
system
that
is
expect
to
work
with
differ
type
of
system
it
ha
been
seen
that
program
often
produc
incorrect
behavior
when
input
form
some
special
case
the
reason
is
that
in
program
some
combin
of
input
need
special
treatment
and
provid
proper
handl
for
these
special
case
is
easili
overlook
for
exampl
in
an
arithmet
routin
if
there
is
a
divis
and
the
divisor
is
zero
some
special
action
ha
to
be
taken
which
could
easili
be
forgotten
by
the
programm
these
special
case
form
particularli
good
test
case
which
can
reveal
error
that
will
usual
not
be
detect
by
other
test
case
special
case
will
often
depend
on
the
data
structur
and
the
function
of
the
modul
there
are
no
rule
to
determin
special
case
and
the
tester
ha
to
use
hi
intuit
and
experi
to
identifi
such
test
case
consequ
determin
special
case
is
also
call
error
guess
psycholog
is
particularli
import
for
error
guess
the
tester
should
play
the
devil
’
s
advoc
and
tri
to
guess
the
incorrect
assumpt
the
programm
could
have
made
and
the
situat
the
programm
could
have
overlook
or
handl
incorrectli
essenti
the
tester
is
tri
to
identifi
error-pron
situat
then
test
case
are
written
for
these
situat
for
exampl
in
the
problem
of
find
the
number
of
differ
word
in
a
file
discuss
in
earlier
chapter
some
of
the
special
case
can
be
file
is
empti
onli
one
word
in
the
file
onli
one
word
in
a
line
some
empti
line
in
the
input
file
presenc
of
more
than
one
blank
between
word
all
word
are
the
same
the
word
are
alreadi
sort
and
blank
at
the
start
and
end
of
the
file
incorrect
assumpt
are
usual
made
becaus
the
specif
are
not
complet
or
the
writer
of
specif
may
not
have
state
some
properti
assum
them
to
be
obviou
whenev
there
is
relianc
on
tacit
understand
rather
than
explicit
statement
of
specif
there
is
scope
for
make
wrong
assumpt
frequent
wrong
assumpt
are
made
about
the
environ
howev
it
should
be
point
out
that
special
case
depend
heavili
on
the
problem
and
the
tester
should
realli
tri
to
get
into
the
shoe
of
the
design
and
coder
to
determin
these
case
there
are
some
system
that
are
essenti
stateless
in
that
for
the
same
input
they
alway
give
the
same
output
or
exhibit
the
same
behavior
mani
batch
process
system
comput
system
and
server
fall
in
thi
categori
in
hardwar
combinatori
circuit
fall
in
thi
categori
at
a
smaller
level
most
function
are
suppos
to
behav
in
thi
manner
there
are
howev
mani
system
whose
behavior
is
state-bas
in
that
for
ident
input
they
behav
differ
at
differ
time
and
may
produc
differ
output
the
reason
for
differ
behavior
is
that
the
state
of
the
system
may
be
differ
in
other
word
the
behavior
and
output
of
the
system
depend
not
onli
on
the
input
provid
but
also
on
the
state
of
the
system
the
state
of
the
system
depend
on
the
past
input
the
system
ha
receiv
in
other
word
the
state
repres
the
cumul
impact
of
all
the
past
input
on
the
system
in
hardwar
the
sequenti
system
fall
in
thi
categori
in
softwar
mani
larg
system
fall
in
thi
categori
a
past
state
is
captur
in
databas
or
file
and
use
to
control
the
behavior
of
the
system
for
such
system
anoth
approach
for
select
test
case
is
the
state-bas
test
approach
22
theoret
ani
softwar
that
save
state
can
be
model
a
a
state
ma-
chine
howev
the
state
space
of
ani
reason
program
is
almost
infinit
a
it
is
a
cross
product
of
the
domain
of
all
the
variabl
that
form
the
state
for
mani
system
the
state
space
can
be
partit
into
a
few
state
each
repres
a
logic
combin
of
valu
of
differ
state
variabl
which
share
some
properti
of
interest
9
if
the
set
of
state
of
a
system
is
manage-
abl
a
state
model
of
the
system
can
be
built
a
state
model
for
a
system
ha
four
compon
state
repres
the
impact
of
the
past
input
to
the
system
transit
repres
how
the
state
of
the
system
chang
from
one
state
to
anoth
in
respons
to
some
event
the
state
model
show
what
state
transit
occur
and
what
action
are
perform
in
a
system
in
respons
to
event
when
a
state
model
is
built
from
the
requir
of
a
system
we
can
onli
includ
the
state
transit
and
action
that
are
state
in
the
requir
or
can
be
infer
from
them
if
more
inform
is
avail
from
the
design
specif
then
a
richer
state
model
can
be
built
for
exampl
consid
the
student
survey
exampl
discuss
in
chapter
5
accord
to
the
requir
a
system
is
to
be
creat
for
take
a
student
survey
the
student
take
a
survey
and
is
return
the
current
result
of
the
survey
the
survey
result
can
be
up
to
five
survey
old
we
consid
the
archi-
tectur
which
had
a
cach
between
the
server
and
the
databas
and
in
which
the
survey
and
result
are
cach
and
updat
onli
after
five
survey
on
arriv
of
a
request
the
propos
architectur
ha
a
databas
at
the
back
which
may
go
down
to
creat
a
state
machin
model
of
thi
system
we
notic
that
of
a
seri
of
the
first
henc
we
divid
into
two
state
one
repres
the
the
receiv
of
1
state
1
and
the
other
repres
the
receiv
of
request
5
state
2
next
we
see
that
the
databas
can
be
up
or
down
and
it
can
go
down
in
ani
of
these
two
state
howev
the
behavior
of
request
if
the
databas
is
down
may
be
differ
henc
we
creat
anoth
pair
of
state
state
4
onc
the
databas
ha
fail
then
the
first
when
a
request
is
receiv
after
receiv
the
system
enter
a
fail
state
state
5
in
which
it
doe
not
give
ani
respons
when
the
system
recov
from
the
fail
state
it
must
updat
it
cach
immedi
henc
go
to
state
2
the
state
model
for
thi
system
is
shown
in
figur
i
repres
an
input
from
the
user
for
take
the
survey
note
that
we
are
assum
that
the
state
model
of
the
system
can
be
creat
from
it
specif
or
design
thi
is
how
most
state
model
is
done
and
that
is
how
the
model
wa
built
in
the
exampl
onc
the
state
model
is
built
we
can
use
it
to
select
test
case
when
the
design
is
implement
these
test
case
can
be
use
for
test
the
code
it
is
becaus
of
thi
we
treat
state-bas
test
a
a
black
box
test
strategi
howev
the
state
model
often
requir
inform
about
the
design
of
the
system
in
the
exampl
abov
some
knowledg
of
the
architectur
is
util
sometim
make
the
state
model
may
requir
detail
inform
about
the
design
of
the
system
for
exampl
for
a
class
we
have
seen
that
the
state
model
is
done
dure
design
and
when
a
lot
is
alreadi
known
about
the
class
it
attribut
and
it
method
due
to
thi
the
state-bas
test
may
be
consid
a
somewhat
between
black-box
and
white-box
test
such
strategi
are
sometim
call
gray-box
test
given
a
state
model
of
a
system
how
should
test
case
be
gener
mani
coverag
criterion
have
been
propos
69
we
discu
onli
a
few
here
suppos
the
set
of
test
case
is
t.
some
of
the
criterion
are
all
transit
coverag
at
t
must
ensur
that
everi
transit
in
the
state
graph
is
exercis
all
transit
pair
coverag
atp
t
must
execut
all
pair
of
adja-
cent
transit
an
adjac
transit
pair
compris
two
transit
an
incom
transit
to
a
state
and
an
outgo
transit
from
that
state
transit
tree
coverag
tt
t
must
execut
all
simpl
path
where
a
simpl
path
is
one
which
start
from
the
start
state
and
reach
a
state
that
it
ha
alreadi
visit
in
thi
path
or
a
final
state
the
first
criterion
state
that
dure
test
all
transit
get
fire
thi
will
also
ensur
that
all
state
are
visit
the
transit
pair
coverag
is
a
stronger
criterion
requir
that
all
combin
of
incom
and
outgo
transit
for
each
state
must
be
exercis
by
t.
if
a
state
ha
two
incom
transit
t2
and
two
outgo
transit
t4
then
a
set
of
test
case
t
that
execut
t1
t2
t.
howev
to
satisfi
atp
t
must
also
ensur
execut
of
t1
t2
t3
the
transit
tree
coverag
is
name
in
thi
manner
a
a
transit
tree
can
be
construct
from
the
graph
and
then
use
to
identifi
the
path
in
atp
we
are
go
beyond
transit
and
state
that
differ
path
in
the
state
diagram
should
be
exercis
dure
test
atp
will
gener
includ
at
for
the
exampl
abov
the
set
of
test
case
for
at
are
given
below
in
tabl
here
req
mean
that
a
request
for
take
the
survey
should
be
given
fail
mean
that
the
databas
should
be
fail
and
recov
mean
that
the
fail
databas
should
be
recov
as
we
can
see
state-bas
test
draw
attent
to
the
state
and
transi-
tion
even
in
the
abov
simpl
case
we
can
see
differ
scenario
get
test
e.g.
system
behavior
when
the
databas
fail
and
system
behavior
when
it
fail
and
recov
thereaft
mani
of
these
scenario
are
easi
to
overlook
if
test
case
are
design
onli
by
look
at
the
input
domain
the
set
of
test
case
is
richer
if
the
other
criterion
are
use
for
thi
exampl
we
leav
it
a
an
exercis
to
determin
the
test
case
for
other
criterion
in
the
previou
section
we
discuss
black-box
test
which
is
concern
with
the
function
that
the
test
program
is
suppos
to
perform
and
doe
not
deal
with
the
intern
structur
of
the
program
respons
for
actual
imple-
ment
that
function
thu
black-box
test
is
concern
with
function
rather
than
implement
of
the
program
white-box
test
on
the
other
hand
is
concern
with
test
the
implement
of
the
program
the
intent
of
thi
test
is
not
to
exercis
all
the
differ
input
or
output
condit
al-
though
that
may
be
a
by-product
but
to
exercis
the
differ
program
structur
and
data
structur
use
in
the
program
white-box
test
is
also
call
structur
test
and
we
will
use
the
two
term
interchang
to
test
the
structur
of
a
program
structur
test
aim
to
achiev
test
case
that
will
forc
the
desir
coverag
of
differ
structur
variou
criterion
have
been
propos
for
thi
unlik
the
criterion
for
function
test
which
are
frequent
imprecis
the
criterion
for
structur
test
are
gener
quit
precis
a
they
are
base
on
program
structur
which
are
formal
and
precis
here
we
will
discu
one
approach
to
structur
test
control
flow-bas
test
which
is
most
commonli
use
in
practic
most
common
structure-bas
criterion
are
base
on
the
control
flow
of
the
program
in
these
criterion
the
control
flow
graph
of
a
program
is
consid
and
coverag
of
variou
aspect
of
the
graph
are
specifi
a
criterion
henc
befor
we
consid
the
criterion
let
u
precis
defin
a
control
flow
graph
for
a
program
let
the
control
flow
graph
or
simpli
flow
graph
of
a
program
p
be
g.
a
node
in
thi
graph
repres
a
block
of
statement
that
is
alway
execut
togeth
i.e.
whenev
the
first
statement
is
execut
all
other
statement
are
also
execut
an
edg
i
j
from
node
i
to
node
j
repres
a
possibl
transfer
of
control
after
execut
the
last
statement
of
the
block
repres
by
node
i
to
the
first
statement
of
the
block
repres
by
node
j
a
node
correspond
to
a
block
whose
first
statement
is
the
start
statement
of
p
is
call
the
start
node
of
g
and
a
node
correspond
to
a
block
whose
last
statement
is
an
exit
statement
is
call
an
exit
node
73
a
path
is
a
finit
sequenc
of
node
n1
n2
...
nk
k
>
1
such
that
there
is
an
edg
ni
ni+1
for
all
node
ni
in
the
sequenc
except
the
last
node
nk
a
complet
path
is
a
path
whose
first
node
is
the
start
node
and
the
last
node
is
an
exit
node
now
let
u
consid
control
flow-bas
criterion
perhap
the
simplest
cover-
age
criterion
is
statement
coverag
which
requir
that
each
statement
of
the
program
be
execut
at
least
onc
dure
test
in
other
word
it
requir
that
the
path
execut
dure
test
includ
all
the
node
in
the
graph
thi
is
also
call
the
all-nod
criterion
73
thi
coverag
criterion
is
not
veri
strong
and
can
leav
error
undetect
for
exampl
if
there
is
an
if
statement
in
the
program
without
have
an
els
claus
the
statement
coverag
criterion
for
thi
statement
will
be
satisfi
by
a
test
case
that
evalu
the
condit
to
true
no
test
case
is
need
that
ensur
that
the
condit
in
the
if
statement
evalu
to
fals
thi
is
a
seriou
shortcom
becaus
decis
in
program
are
potenti
sourc
of
error
as
an
exampl
consid
the
follow
function
to
comput
the
absolut
valu
of
a
number
thi
program
is
clearli
wrong
suppos
we
execut
the
function
with
the
set
of
test
case
x=0
i.e.
the
set
ha
onli
one
test
case
the
statement
coverag
criterion
will
be
satisfi
by
test
with
thi
set
but
the
error
will
not
be
reveal
a
more
gener
coverag
criterion
is
branch
coverag
which
requir
that
each
edg
in
the
control
flow
graph
be
travers
at
least
onc
dure
test
in
other
word
branch
coverag
requir
that
each
decis
in
the
program
be
evalu
to
true
and
fals
valu
at
least
onc
dure
test
test
base
on
branch
coverag
is
often
call
branch
test
the
100
%
branch
coverag
criterion
is
also
call
the
all-edg
criterion
73
branch
coverag
impli
state-
ment
coverag
a
each
statement
is
a
part
of
some
branch
in
the
preced
exampl
a
set
of
test
case
satisfi
thi
criterion
will
detect
the
error
the
troubl
with
branch
coverag
come
if
a
decis
ha
mani
condit
in
it
consist
of
a
boolean
express
with
boolean
oper
and
and
or
in
such
situat
a
decis
can
evalu
to
true
and
fals
without
actual
exercis
all
the
condit
for
exampl
consid
the
follow
function
that
check
the
valid
of
a
data
item
the
data
item
is
valid
if
it
lie
between
0
and
100
the
modul
is
incorrect
a
it
is
check
for
x
200
instead
of
100
perhap
a
type
error
made
by
the
programm
suppos
the
modul
is
test
with
the
follow
set
of
test
case
x
=
5
x
=
-
the
branch
coverag
criterion
will
be
satisfi
for
thi
modul
by
thi
set
howev
the
error
will
not
be
reveal
and
the
behavior
of
the
modul
is
consist
with
it
specif
for
all
test
case
in
thi
set
thu
the
coverag
criterion
is
satisfi
but
the
error
is
not
detect
thi
occur
becaus
the
decis
is
evalu
to
true
and
fals
becaus
of
the
condit
x
0
the
condit
x
200
never
evalu
to
fals
dure
thi
test
henc
the
error
in
thi
condit
is
not
reveal
thi
problem
can
be
resolv
by
requir
that
all
condit
evalu
to
true
and
fals
howev
situat
can
occur
where
a
decis
may
not
get
both
true
and
fals
valu
even
if
each
individu
condit
evalu
to
true
and
fals
an
obviou
solut
to
thi
problem
is
to
requir
decision/condit
coverag
where
all
the
decis
and
all
the
condit
in
the
decis
take
both
true
and
fals
valu
dure
the
cours
of
test
studi
have
indic
that
there
are
mani
error
whose
presenc
is
not
de-
tect
by
branch
test
becaus
some
error
are
relat
to
some
combin
of
branch
and
their
presenc
is
reveal
by
an
execut
that
follow
the
path
that
includ
those
branch
henc
a
more
gener
coverag
criterion
is
one
that
requir
all
possibl
path
in
the
control
flow
graph
be
execut
dure
test
thi
is
call
the
path
coverag
criterion
or
the
all-path
criterion
and
the
test
base
on
thi
criterion
is
often
call
path
test
the
difficulti
with
thi
criterion
is
that
program
that
contain
loop
can
have
an
infinit
number
of
possibl
path
furthermor
not
all
path
in
a
graph
may
be
fea-
sibl
in
the
sens
that
there
may
not
be
ani
input
for
which
the
path
can
be
execut
as
the
path
coverag
criterion
lead
to
a
potenti
infinit
number
of
path
some
effort
have
been
made
to
suggest
criterion
between
the
branch
coverag
and
path
coverag
the
basic
aim
of
these
approach
is
to
select
a
set
of
path
that
ensur
branch
coverag
criterion
and
tri
some
other
path
that
may
help
reveal
error
one
method
to
limit
the
number
of
path
is
to
consid
two
path
the
same
if
they
differ
onli
in
their
subpath
that
are
caus
due
to
the
loop
even
with
thi
restrict
the
number
of
path
can
be
extrem
larg
it
should
be
point
out
that
none
of
these
criterion
is
suffici
to
detect
all
kind
of
error
in
program
for
exampl
if
a
program
is
miss
some
control
flow
path
that
are
need
to
check
for
a
special
valu
like
pointer
equal
nil
and
divisor
equal
zero
then
even
execut
all
the
path
will
not
necessarili
detect
the
error
similarli
if
the
set
of
path
is
such
that
they
satisfi
the
all-
path
criterion
but
exercis
onli
one
part
of
a
compound
condit
then
the
set
will
not
reveal
ani
error
in
the
part
of
the
condit
that
is
not
exercis
henc
even
the
path
coverag
criterion
which
is
the
strongest
of
the
criterion
we
have
discuss
is
not
strong
enough
to
guarante
detect
of
all
the
error
onc
a
coverag
criterion
is
decid
two
problem
have
to
be
solv
to
use
the
chosen
criterion
for
test
the
first
is
to
decid
if
a
set
of
test
case
satisfi
the
criterion
and
the
second
is
to
gener
a
set
of
test
case
for
a
given
criterion
decid
whether
a
set
of
test
case
satisfi
a
criterion
without
the
aid
of
ani
tool
is
a
cumbersom
task
though
it
is
theoret
possibl
to
do
manual
for
almost
all
the
structur
test
techniqu
tool
are
use
to
determin
whether
the
criterion
ha
been
satisfi
gener
these
tool
will
provid
feedback
regard
what
need
to
be
test
to
fulli
satisfi
the
criterion
to
gener
the
test
case
tool
are
not
that
easili
avail
and
due
to
the
natur
of
the
problem
i.e.
undecid
of
feasibl
of
a
path
a
fulli
autom
tool
for
select
test
case
to
satisfi
a
criterion
is
gener
not
possibl
henc
tool
can
at
best
aid
the
tester
one
method
for
gener
test
case
is
to
randomli
select
test
data
until
the
desir
criterion
is
satisfi
which
is
determin
by
a
tool
thi
can
result
in
a
lot
of
redund
test
case
a
mani
test
case
will
exercis
the
same
path
as
test
case
gener
can
not
be
fulli
autom
frequent
the
test
case
select
is
done
manual
by
the
tester
by
perform
structur
test
in
an
iter
manner
start
with
an
initi
test
case
set
and
select
more
test
case
base
on
the
feedback
provid
by
the
tool
for
test
case
evalu
the
test
case
evalu
tool
can
tell
which
path
need
to
be
execut
or
which
mutant
need
to
be
kill
thi
inform
can
be
use
to
select
further
test
case
even
with
the
aid
of
tool
select
test
case
is
not
a
simpl
process
select
test
case
to
execut
some
part
of
a
yet
unexecut
code
is
often
veri
difficult
becaus
of
thi
and
for
other
reason
the
criterion
are
often
weaken
for
exampl
instead
of
requir
100
%
coverag
of
statement
and
branch
the
goal
might
be
to
achiev
some
accept
high
percentag
but
le
than
100
%
there
are
mani
tool
avail
for
statement
and
branch
coverag
the
crite-
ria
that
are
use
most
often
both
commerci
and
freewar
tool
are
avail
for
differ
sourc
languag
these
tool
often
also
give
higher-level
coverag
data
like
function
coverag
method
coverag
and
class
coverag
to
get
the
coverag
data
the
execut
of
the
program
dure
test
ha
to
be
close
monitor
thi
requir
that
the
program
be
instrument
so
that
requir
data
can
be
collect
a
common
method
of
instrument
is
to
insert
some
statement
call
probe
in
the
program
the
sole
purpos
of
the
probe
is
to
gener
data
about
program
execut
dure
test
that
can
be
use
to
comput
the
coverag
with
thi
we
can
identifi
three
phase
in
gener
coverag
data
probe
insert
can
be
done
automat
by
a
preprocessor
the
execut
of
the
program
is
done
by
the
tester
after
test
the
coverag
data
is
display
by
the
tool—sometim
graphic
represent
are
also
shown
we
have
seen
that
dure
test
the
softwar
under
test
is
execut
with
a
set
of
test
case
as
the
qualiti
of
deliv
softwar
depend
substanti
on
the
qualiti
of
test
a
few
natur
question
aris
while
test
what
is
the
qualiti
or
reliabl
of
softwar
after
test
is
complet
dure
test
the
primari
purpos
of
metric
is
to
tri
to
answer
these
and
other
relat
question
we
will
discu
some
metric
that
may
be
use
for
thi
purpos
one
of
the
most
commonli
use
approach
for
evalu
the
thorough
of
test
is
to
use
some
coverag
measur
we
have
discuss
abov
some
of
the
common
coverag
measur
that
are
use
in
practice—stat
coverag
and
branch
coverag
to
use
these
coverag
measur
for
evalu
the
qualiti
of
test
proper
coverag
analysi
tool
will
have
to
be
employ
which
can
inform
not
onli
the
coverag
achiev
dure
test
but
also
which
portion
are
not
yet
cover
often
organ
build
guidelin
for
the
level
of
coverag
that
must
be
achiev
dure
test
gener
the
coverag
requir
will
be
higher
for
unit
test
but
lower
for
system
test
a
it
is
much
more
difficult
to
ensur
execut
of
identifi
block
when
the
entir
system
is
be
execut
often
the
coverag
requir
at
unit
level
can
be
90
%
to
100
%
keep
in
mind
that
100
%
may
not
be
alway
possibl
a
there
may
be
unreach
code
besid
the
coverag
of
program
construct
coverag
of
requir
is
also
often
examin
it
is
for
facilit
thi
evalu
that
in
test
case
specifica-
tion
the
requir
or
condit
be
test
is
mention
thi
coverag
is
gener
establish
by
evalu
the
set
of
test
case
to
ensur
that
suffici
number
of
test
case
with
suitabl
data
are
includ
for
all
the
requir
the
coverag
measur
here
is
the
percentag
of
requir
or
their
clauses/-
condit
for
which
at
least
one
test
case
exist
often
a
full
coverag
may
be
requir
at
requir
level
befor
test
is
consid
a
accept
after
test
is
done
and
the
softwar
is
deliv
the
develop
is
con-
sider
over
it
will
clearli
be
desir
to
know
in
quantifi
term
the
reliabl
of
the
softwar
be
deliv
as
reliabl
of
softwar
depend
consider
on
the
qualiti
of
test
by
assess
reliabl
we
can
also
judg
the
qualiti
of
test
altern
reliabl
estim
can
be
use
to
decid
whether
enough
test
ha
been
done
in
other
word
besid
character
an
import
qualiti
properti
of
the
product
be
deliv
reliabl
esti-
mation
ha
a
direct
role
in
project
management—it
can
be
use
by
the
project
manag
to
decid
whether
enough
test
ha
been
done
and
when
to
stop
test
reliabl
of
a
product
specifi
the
probabl
of
failure-fre
oper
of
that
product
for
a
given
time
durat
most
reliabl
model
requir
that
the
occurr
of
failur
be
a
random
phenomenon
in
softwar
even
though
failur
occur
due
to
preexist
bug
thi
assumpt
will
gener
hold
for
larger
system
but
may
not
hold
for
small
program
that
have
bug
in
which
case
one
might
be
abl
to
predict
the
failur
henc
reliabl
model
is
more
meaning
for
larger
system
let
x
be
the
random
variabl
that
repres
the
life
of
a
system
reliabl
of
a
system
is
the
probabl
that
the
system
ha
not
fail
by
time
t.
in
other
word
the
reliabl
of
a
system
can
also
be
specifi
a
the
mean
time
to
failur
mttf
mttf
repres
the
expect
lifetim
of
the
system
from
the
re-
liabil
function
it
can
be
obtain
a
80
reliabl
can
also
be
defin
in
term
of
failur
intens
which
is
the
failur
rate
i.e.
number
of
failur
per
unit
time
of
the
softwar
at
time
t
from
the
measur
perspect
dure
test
measur
failur
rate
is
the
easiest
if
defect
are
be
log
a
simpl
way
to
do
thi
is
to
comput
the
number
of
failur
everi
week
or
everi
day
dure
the
last
stage
of
test
and
number
of
failur
can
be
approxim
by
the
number
of
defect
log
though
failur
and
defect
are
differ
in
the
last
stage
of
test
it
is
assum
that
defect
that
caus
failur
are
fix
soon
enough
and
therefor
do
not
caus
multipl
failur
gener
thi
failur
rate
increas
in
the
start
of
test
a
more
and
more
defect
are
found
peak
somewher
in
the
middl
of
test
and
then
continu
to
drop
a
fewer
defect
are
report
for
a
given
test
suit
if
all
defect
are
fix
then
there
should
be
almost
no
failur
toward
the
end
and
that
could
be
consid
a
proper
time
for
releas
of
thi
softwar
that
is
a
releas
criterion
could
be
that
the
failur
rate
at
releas
time
is
zero
failur
in
some
time
durat
or
zero
failur
while
execut
a
test
suit
though
failur
rate
track
give
a
rough
sens
of
reliabl
in
term
of
failur
per
day
or
per
week
for
more
accur
reliabl
estim
better
model
have
to
be
use
softwar
reliabl
model
is
a
complex
task
requir-
ing
rigor
model
and
sophist
statist
analysi
mani
model
have
been
propos
for
softwar
reliabl
assess
and
a
survey
of
mani
of
the
model
is
given
in
33
67
it
should
be
mention
that
a
failur
of
softwar
also
depend
critic
on
the
environ
in
which
it
is
execut
failur
rate
experienc
in
test
will
reflect
the
ultim
reliabl
experienc
by
the
user
after
softwar
releas
onli
if
test
close
mimic
the
user
behavior
thi
may
not
be
the
case
particularli
with
lower
level
of
test
howev
often
at
higher
level
activ
effort
is
made
to
have
the
final
test
suit
mimic
the
actual
usag
if
thi
is
the
case
then
reliabl
estim
can
be
appli
with
a
higher
confid
anoth
analysi
of
interest
is
defect
remov
effici
though
thi
can
onli
be
determin
sometim
after
the
softwar
ha
been
releas
the
purpos
of
thi
analysi
is
to
evalu
the
effect
of
the
test
process
be
employ
not
the
qualiti
of
test
for
a
project
thi
analysi
is
use
for
improv
the
test
process
in
the
futur
usual
after
the
softwar
ha
been
releas
to
the
client
the
client
will
find
defect
which
have
to
be
fix
gener
by
the
origin
develop
a
thi
is
often
part
of
the
contract
thi
defect
data
is
also
gener
log
within
a
few
month
most
of
the
defect
would
be
uncov
by
the
client
often
the
warranti
period
is
onc
the
total
number
of
defect
or
a
close
approxim
to
the
total
is
known
the
defect
remov
effici
dre
of
test
can
be
comput
the
defect
remov
effici
of
a
qualiti
control
activ
is
defin
a
the
percentag
reduct
in
the
number
of
defect
by
execut
that
activ
61
as
an
exampl
suppos
the
total
number
of
defect
log
is
500
out
of
which
20
were
found
after
deliveri
and
200
were
found
dure
the
system
test
the
defect
remov
effici
of
system
test
is
200/220
just
about
90
%
a
the
total
number
of
defect
present
in
the
system
when
test
start
wa
220
the
defect
remov
effici
of
the
overal
qualiti
process
is
480/500
which
is
96
%
incident
thi
level
of
dre
is
decent
and
is
what
mani
commerci
organ
achiev
it
should
be
clear
that
dre
is
a
gener
concept
which
can
be
appli
to
ani
defect
remov
activ
for
exampl
we
can
comput
the
dre
of
design
review
or
unit
test
thi
can
be
done
if
for
each
defect
besid
log
when
and
where
the
defect
is
found
the
phase
in
which
the
defect
wa
introduc
is
also
analyz
and
log
with
thi
inform
when
all
the
defect
are
log
the
dre
of
the
main
qualiti
control
task
can
be
determin
thi
inform
is
extrem
use
in
improv
the
overal
qualiti
process
test
is
a
dynam
method
for
verif
and
valid
where
the
soft-
ware
to
be
test
is
execut
with
care
design
test
case
and
the
behavior
of
the
softwar
system
is
observ
a
test
case
is
a
set
of
input
and
test
condit
along
with
the
expect
outcom
of
test
a
test
suit
is
a
set
of
test
case
that
are
gener
execut
togeth
to
test
some
spe-
cific
behavior
dure
test
onli
the
failur
of
the
system
are
observ
from
which
the
presenc
of
fault
is
deduc
separ
activ
have
to
be
perform
to
identifi
the
fault
and
remov
them
the
intent
of
test
is
to
increas
confid
in
the
correct
of
the
soft-
ware
for
thi
the
set
of
test
case
use
for
test
should
be
such
that
for
ani
defect
in
the
system
there
is
like
to
be
a
test
case
that
will
reveal
it
to
ensur
thi
it
is
import
that
the
test
case
are
care
design
with
the
intent
of
reveal
defect
due
to
the
limit
of
the
verif
method
for
earli
phase
design
and
requir
fault
also
appear
in
the
code
test
is
use
to
detect
these
error
also
in
addit
to
the
error
introduc
dure
the
code
phase
henc
differ
level
of
test
are
often
use
for
detect
defect
inject
dure
differ
stage
the
commonli
employ
test
level
are
unit
test
integr
test
system
test
and
accept
test
for
test
a
softwar
product
overal
test
should
be
plan
and
for
test
each
unit
identifi
in
the
plan
test
case
should
be
care
design
to
reveal
error
and
specifi
in
a
document
or
a
test
script
there
are
two
approach
for
design
test
case
black-box
and
white-box
in
black-box
test
the
intern
logic
of
the
system
under
test
is
not
con-
sider
and
the
test
case
are
decid
from
the
specif
or
the
require-
ment
equival
class
partit
boundari
valu
analysi
and
cause-
effect
graph
are
exampl
of
method
for
select
test
case
for
black-box
test
state-bas
test
is
anoth
approach
in
which
the
system
is
mod-
ele
a
a
state
machin
and
then
thi
model
is
use
to
select
test
case
use
some
transit
or
path-bas
coverag
criterion
state-bas
test
can
also
be
view
a
gray-box
test
in
that
it
often
requir
more
inform
than
just
the
requir
in
white-box
test
the
test
case
are
decid
base
on
the
intern
logic
of
the
program
be
test
often
a
criterion
is
specifi
but
the
procedur
for
select
test
case
to
satisfi
the
criterion
is
left
to
the
tester
the
most
common
criterion
are
statement
coverag
and
branch
coverag
the
main
metric
of
interest
dure
test
is
the
reliabl
of
the
softwar
under
test
if
defect
are
be
log
reliabl
can
be
assess
in
term
of
failur
rate
per
week
or
day
though
better
model
for
estim
exist
coverag
achiev
dure
test
and
defect
remov
effici
are
other
metric
of
interest
suppos
you
have
to
test
a
procedur
that
take
two
input
paramet
doe
some
comput
with
them
and
then
manipul
a
global
tabl
the
manipul
itself
depend
on
the
state
of
the
tabl
what
will
the
complet
specif
of
a
test
case
for
thi
procedur
contain
what
are
the
differ
level
of
test
and
the
goal
of
the
differ
level
suppos
for
log
defect
each
defect
will
be
treat
a
an
object
of
a
class
defect
give
the
definit
of
thi
class
suppos
a
softwar
ha
three
input
each
have
a
defin
valid
rang
how
mani
test
case
will
you
need
to
test
all
the
boundari
valu
for
boundari
valu
analysi
if
the
strategi
for
gener
test
case
is
to
consid
all
possibl
combin
for
the
differ
valu
what
will
be
the
set
of
test
case
for
a
softwar
that
ha
three
input
x
y
and
z
suppos
a
softwar
ha
five
differ
configur
variabl
that
are
set
indepen-
dentli
if
three
of
them
are
binari
have
two
possibl
valu
and
the
rest
have
three
valu
how
mani
test
case
will
be
need
if
pairwis
test
method
is
use
consid
a
vend
machin
that
take
quarter
and
when
it
ha
receiv
two
quarter
give
a
can
of
soda
develop
a
state
model
of
thi
system
and
then
gener
set
of
test
case
for
the
variou
criterion
consid
a
simpl
text
formatt
problem
given
a
text
consist
of
word
sepa-
rate
by
blank
bl
or
newlin
nl
charact
the
text
formatt
ha
to
covert
it
into
line
so
that
no
line
ha
more
than
maxpo
charact
break
between
line
occur
at
bl
or
nl
and
the
maximum
possibl
number
of
word
are
in
each
line
the
follow
program
ha
been
written
for
thi
text
formatt
41
outchar
buffer
k
fill
=
fill
+
bufpo
bufpo
=
0
end
select
a
set
of
test
case
use
the
black-box
test
approach
use
a
mani
techniqu
a
possibl
and
select
test
case
for
special
case
use
the
error
guess
method
select
a
set
of
test
case
that
will
provid
100
%
branch
coverag
suppos
that
the
last
round
of
test
in
which
all
the
test
suit
were
execut
but
no
fault
were
fix
took
2
and
in
thi
test
the
number
of
failur
that
were
log
everi
day
were
2
0
1
2
1
1
0
if
it
is
expect
that
an
averag
user
will
use
the
softwar
for
two
hour
each
day
in
a
manner
that
is
similar
to
what
wa
done
in
test
what
is
the
expect
reliabl
of
thi
softwar
for
the
user
f.
b.
abreu
and
r.
carapuca
candid
metric
for
object-ori
soft-
ware
wihin
a
taxonomi
framework
journal
of
system
and
softwar
26
1
:87–96
jan.
1994
v.
r.
basili
tutori
on
model
and
metric
for
softwar
manag
and
engin
ieee
press
1980
v.
r.
basili
l.
briand
and
w.
l.
melo
a
valid
of
object-ori
design
metric
a
qualiti
indic
ieee
transact
on
softwar
en-
gineer
22
10
:751–761
oct.
1996
v.
r.
basili
and
a.
turner
iter
enhanc
a
practic
techniqu
for
softwar
develop
ieee
transact
on
softwar
engin
se-1
4
dec.
1975
v.
r.
basili
and
d.
m.
weiss
evalu
of
a
softwar
requir
docu-
ment
by
analysi
of
chang
data
in
5th
int
conf
on
softwar
engin
page
314–323
ieee
1981
l.
bass
p.
clement
and
rick
kazman
softwar
architectur
in
practic
second
edit
addison-wesley
profession
2003
k.
beck
extrem
program
explain
addison-wesley
2000
k.
beck
test
driven
develop
by
exampl
addison-wesley
profes-
sional
2002
r.v
binder
test
object-ori
systems—model
pattern
and
tool
addison-wesley
1999
b.
boehm
softwar
engin
ieee
transact
on
comput
25
12
dec.
1976
b.
boehm
tutori
softwar
risk
manag
ieee
comput
societi
1989
b.
w.
boehm
softwar
engin
econom
prentic
hall
englewood
cliff
nj
1981
b.
w.
boehm
softwar
engin
econom
ieee
transact
on
softwar
engin
10
1
:135–152
jan.
1984
b.
w.
boehm
improv
softwar
product
ieee
comput
page
43–57
sept.
1987
g.
booch
object-ori
analysi
and
design
the
benjamin/cum-
ming
publish
compani
1994
f.
brook
the
mytic
man
month
addison-wesley
1975
n.
brown
industrial-strength
manag
strategi
ieee
softwar
juli
1996
r.n
charett
softwar
engin
risk
analysi
and
manag
mc-
graw
hill
1989
r.n
charett
large-scal
project
manag
is
risk
manag
ieee
softwar
juli
1996
e.
chen
program
complex
and
programm
product
ieee
trans-
action
on
softwar
engin
se-4:187–194
may
1978
s.
r.
chidamb
and
c.
f.
kemer
a
metric
suit
for
object-ori
design
ieee
transact
on
softwar
engin
20
6
:476–493
june
1994
t.
chow
test
softwar
design
model
by
finit
state
machin
ieee
transact
on
softwar
engin
se-4
3
:178–187
1978
p.
clement
f.
bachmann
l.
bass
d.
garlan
j.
iver
r.
littl
r.
nord
and
j.
stafford
document
softwar
architectur
view
and
beyond
addison-wesley
2003
a.
cockburn
write
effect
use
case
addison-wesley
2001
d.m
cohen
s.r
dalal
m.l
fredman
and
g.c
patton
the
aetg
system
an
approach
to
test
base
on
combinatori
design
ieee
transact
on
softwar
engin
23
7
:437–443
1997
s.
d.
cont
h.
e.
dunsmor
and
v.
y.
shen
softwar
engin
met-
ric
and
model
the
benjamin/cum
publish
compani
1986
j.
s.
davi
identif
of
error
in
softwar
requir
through
use
of
autom
requir
tool
inform
and
softwar
technolog
31
9
:472–476
nov.
1989
t.
demarco
structur
analysi
and
system
specif
yourdon
press
1979
l.
dobrica
and
e.
niemela
a
survey
on
softwar
architectur
analy-
si
method
ieee
transact
on
softwar
engin
28
7
:638–653
2002
j.
eder
g.
kappel
and
m.
schrefl
coupl
and
cohes
in
object-
orient
system
technic
report
univers
of
klagenfurt
1994
m.
e.
fagan
design
and
code
inspect
to
reduc
error
in
program
develop
ibm
system
journal
3
:182–211
1976
m.
e.
fagan
advanc
in
softwar
inspect
ieee
transact
on
softwar
engin
12
7
:744–751
juli
1986
w.
farr
softwar
reliabl
model
survey
in
m.
r.
lyu
editor
softwar
reliabl
engin
page
71–117
mcgraw
hill
and
ieee
comput
societi
1996
s.
i.
feldman
make—a
program
for
maintain
comput
program
softwar
practic
and
experi
9
3
:255–265
march
1979
m.
fowler
uml
distilled—a
brief
guid
to
the
standard
object
model
languag
addison-wesley
profession
2003
m.
fowler
k.
beck
j.
brant
w.
opdyk
and
d.
robert
refactor
improv
the
design
of
exist
code
addison-wesley
1999
d.
p.
freedman
and
g.
m.
weinberg
handbook
of
walkthrough
inspec-
tion
and
technic
reviews—evalu
program
project
and
prod-
uct
dorset
hous
1990
e.
gamma
r.
helm
r.
johnson
and
j.
vlissid
design
patterns—
element
of
reusabl
object-ori
softwar
addison-wesley
profes-
sional
1995
t.
gilb
and
d.
graham
softwar
inspect
addison-wesley
1993
h.
gomma
and
d.
b.
h.
scott
prototyp
a
a
tool
in
the
specif
of
user
requir
in
fifth
int
conf
on
softwar
engin
page
333–341
1981
j.
goodenough
and
s.
l.
gerhart
toward
a
theori
of
test
data
select
ieee
transact
on
softwar
engin
se-1:156–173
1975
s.
e.
goodman
and
s.
t.
hedetniemi
introduct
to
the
design
and
analysi
of
algorithm
mcgraw-hil
1977
r.
gradi
and
d.
caswel
softwar
metric
establish
a
company-wid
program
prentic
hall
1987
r.
b.
gradi
and
t.
v.
slack
key
lesson
learn
in
achiev
widespread
inspect
use
ieee
softwar
page
48–57
juli
1994
e.m.
hall
manag
risk
method
for
softwar
develop
and
en-
hancement
addison-wesley
1998
m.
halstead
element
of
softwar
scienc
elsevi
north-holland
1977
w.
harrison
k.
magel
r.
kluczni
and
a.
dekock
appli
softwar
complex
metric
to
program
mainten
ieee
comput
page
65–
79
sept.
1982
s.
henri
and
d.
kafura
softwar
structur
metric
base
on
inform
flow
ieee
transact
on
softwar
engin
7
5
:510–518
1981
s.
henri
and
d.
kafura
the
evalu
of
softwar
system
’
structur
use
quantit
softwar
metric
softwar
practic
and
experi
14
6
:561–573
june
1984
c.
a.
r.
hoar
an
axiomat
basi
for
comput
program
commu-
nicat
of
the
acm
12
3
:335–355
1969
ibm-rat
ration
unifi
process
best
practic
for
softwar
devel-
opment
team
technic
report
ibmwebsit
1993
ieee
ieee
standard
glossari
of
softwar
engin
terminolog
tech-
nical
report
1990
ieee
ieee
recommend
practic
for
softwar
requir
specifica-
tion
technic
report
1998
ieee
ieee
recommend
practic
for
architectur
descript
of
software-intens
system
technic
report
1471-2000
2000
intern
standard
organ
softwar
engineering—product
qualiti
part
1
qualiti
model
technic
report
iso9126-1
2001
i.
jacobson
object-ori
softwar
engineering—a
use
case
driven
approach
addison-wesley
1992
p.
jalot
cmm
in
practice—process
for
execut
softwar
project
at
infosi
addison-wesley
1999
p.
jalot
softwar
project
manag
in
practic
addison-wesley
2002
p.
jalot
a.
palit
and
p.
kurien
the
timebox
process
model
for
iter
softwar
develop
in
advanc
in
comput
vol
62
page
67–103
academ
press
2004
p.
jalot
a.
palit
p.
kurien
and
v.
t.
peethamb
timebox
a
process
model
for
iter
softwar
develop
the
journal
of
system
and
softwar
70:117–127
s.h
kan.
metric
and
model
in
softwar
qualiti
engin
addison-
wesley
1995
t.
korson
and
j.
d.
gregor
understand
object-ori
a
unifi
paradigm
commun
of
the
acm
33
9
:40–60
sept.
1990
p.
kruchten
the
ration
unifi
process
addison-wesley
1999
w.
lie
and
s.
henri
object-ori
metric
that
predict
maintain
journal
of
system
and
softwar
23
2
:111–122
1993
b.
liskov
data
abstract
and
hierarchi
sigplan
notic
23
5
may
1988
b.
meyer
object
orient
softwar
construct
prentic
hall
1988
j.
d.
musa
a.
iannino
and
k.
okumoto
softwar
reliability—
measur
predict
applic
mcgraw
hill
1987
g.
myer
the
art
of
softwar
test
wiley-intersci
new
york
1979
j.
offutt
s.
liu
a.
abdurazik
and
p.
ammann
gener
test
data
from
state-bas
specif
the
journal
of
softwar
test
verifi-
cation
and
reliabl
13
1
:25–53
march
2003
m.
phadk
plan
effici
softwar
test
crosstalk
oct
1997
l.
h.
putnam
a
gener
empir
solut
to
the
macro
softwar
size
and
estim
problem
ieee
transact
on
softwar
engin
se-4:345–361
juli
1978
l.
h.
putnam
and
w.
myer
industri
strength
softwar
effect
man-
agement
use
measur
ieee
comput
societi
1997
s.
rapp
and
e.
j.
weyuk
select
softwar
test
data
use
data
flow
inform
ieee
transact
on
softwar
engin
11
4
:367–375
apr
1985
w.
w.
royc
manag
the
develop
of
larg
softwar
system
in
proc
9th
int
conf
on
softwar
engin
icse-9
origin
in
ieee
wescon
aug
1970
page
328–338
ieee
1987
sei
softwar
engin
institut
the
capabl
matur
model
guidelin
for
improv
the
softwar
process
addison-wesley
1995
m.
shaw
and
d.
garlan
softwar
architectur
perspect
on
an
emerg-
ing
disciplin
prentic
hall
1996
m.
d.
smith
and
d.
j.
robson
object
orient
program
the
prob-
lem
of
valid
proc
of
6th
int
ieee
confer
on
softwar
main-
tenanc
page
272–282
nov.
1990
m.
d.
smith
and
d.
j.
robson
a
framework
for
test
object-ori
program
journal
of
object-ori
program
page
45–53
june
1992
w.
p.
steven
g.
j.
myer
and
l.
constantin
structur
design
ibm
system
journal
13
2
1974
k.
s.
trivedi
probabl
and
statist
with
reliabl
queu
and
comput
scienc
applic
second
edit
wiley-intersci
2002
c.
watson
and
c.
felix
a
method
of
program
measur
and
estim
ibm
system
journal
16
1
jan.
1977
g.
m.
weinberg
and
e.
l.
schulman
goal
and
perform
in
comput
program
human
factor
16
1
:70–77
1974
e.
f.
weller
lesson
learn
from
three
year
of
inspect
data
ieee
softwar
page
38–53
sept.
1993
n.
wirth
program
develop
by
stepwis
refin
commun
of
the
acm
14
4
:221–227
april
1971
m.
woodward
m.
hennel
and
d.
hedley
a
measur
of
control
flow
complex
in
program
text
ieee
transact
on
softwar
engin
se-5:45–50
jan.
1979
r.
t.
yeh
and
p.
zave
specifi
softwar
requir
proceed
of
the
ieee
68
9
:1077–1088
sept.
1980
b.
h.
yin
and
j.
w.
winchest
the
establish
and
use
of
measur
to
evalu
the
qualiti
of
design
softwar
engin
note
3:45–52
1978
e.
yourdon
and
l.
constantin
structur
design
prentic
hall
1979
w.
m.
zage
and
d.
m.
zage
evalu
design
metric
on
large-scal
softwar
ieee
softwar
page
75–81
juli
1993
transit
to
specif
4
see
softwar
architectur
architectur
descript
languag
117
an
exampl
240
branch
test
24
see
fault
error
build
process
200
client-serv
interact
of
object
14-server
style
112
code
inspect
see
inspect
process
code
181
configur
manag
see
softwar
configur
manag
waterfal
model
see
waterfal
model
dynam
bind
147
effort
estim
see
estim
encapsul
143
function
test
see
black-box
test
function
4
test-driven
develop
19-strength
softwar
17
17
186
187
object
model
techniqu
15-orient
analysi
15-orient
design
142
word
count
exampl
16-close
principl
12
174
pre-condit
of
program
18
see
analysi
problem
partit
58
monitor
and
control
see
project
monitor
and
control
schedul
see
project
schedul
project
monitor
and
control
33
86
defect
inject
and
remov
cycl
7
q
&
p
3
4
mean
time
to
failur
25
see
analysi
requir
chang
6
use
case
see
use
case
requir
valid
63
requir
see
softwar
requir
requir
review
65
review
see
inspect
process
risk
manag
80
92
single-entri
single-exit
construct
18-mode
fault
241
softwar
engin
process
group
1
see
inspect
softwar
reliabl
see
reliabl
softwar
requir
process
3
see
requir
specif
softwar
requir
37
41
66
version
mainten
200
specif
languag
46
structur
test
see
white-box
test
structur
chart
132
137
object-ori
design
see
object-
orient
design
verif
see
design
verif
system
test
230
unifi
model
languag
see
uml
unit
test
204
229