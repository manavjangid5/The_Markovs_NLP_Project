undergradu
topic
comput
scienc
utic
deliv
high-qual
instruct
content
under-
graduat
studi
area
comput
inform
scienc
core
foundat
theoreti-
cal
materi
final-year
topic
applic
utic
book
take
fresh
concis
modern
approach
ideal
self-studi
one-
two-semest
cours
text
author
establish
expert
field
review
intern
advisori
board
contain
numer
exampl
problem
mani
includ
fulli
work
solut
depart
comput
scienc
engin
iit
delhi
india
ian
macki
e´
cole
polytechniqu
franc
univers
sussex
uk
samson
abramski
univers
oxford
uk
chri
hankin
imperi
colleg
london
uk
dexter
kozen
cornel
univers
usa
andrew
pitt
univers
cambridg
uk
hann
rii
nielson
technic
univers
denmark
denmark
steven
skiena
stoni
brook
univers
usa
david
zhang
hong
kong
polytechn
univers
hong
kong
undergradu
topic
comput
scienc
issn
1863-7310
isbn
978-1-84800-301-9
e-isbn
978-1-84800-302-
10.1007/978-1-84800-302-6
catalogu
record
thi
book
avail
british
librari
librari
congress
control
number
2008933221
apart
ani
fair
deal
purpos
research
privat
studi
critic
review
permit
copyright
design
patent
act
1988
thi
public
may
onli
reproduc
store
transmit
ani
form
ani
mean
prior
permiss
write
publish
case
reprograph
reproduct
accord
term
licens
issu
copyright
licens
agenc
enquiri
concern
reproduct
outsid
term
sent
publish
use
regist
name
trademark
etc.
thi
public
doe
impli
even
absenc
specif
statement
name
exempt
relev
law
regul
therefor
free
gener
use
publish
make
represent
express
impli
regard
accuraci
inform
contain
thi
book
accept
ani
legal
respons
liabil
ani
error
omiss
may
made
introductori
cours
softwar
engin
remain
one
hardest
subject
teach
larg
becaus
wide
rang
topic
area
encom-
pass
believ
time
often
tend
teach
mani
concept
topic
introductori
cours
result
shallow
knowledg
littl
insight
applic
concept
softwar
engin
final
applic
concept
effici
engin
good
softwar
solut
believ
introductori
cours
softwar
engin
focu
impart
student
knowledg
skill
need
success
execut
commerci
project
person-month
effort
employ
proper
practic
techniqu
worth
point
vast
major
project
execut
industri
today
fall
thi
scope—execut
small
team
month
also
believ
care
select
concept
topic
cours
semest
achiev
thi
thi
motiv
thi
book
goal
thi
book
introduc
student
limit
number
concept
practic
achiev
follow
two
object
teach
student
skill
need
execut
smallish
commerci
project
provid
student
necessari
conceptu
background
undertak
ad-
vanc
studi
softwar
engin
cours
includ
thi
book
onli
concept
believ
founda-
tional
two
object
mention
abov
met
ad-
vanc
topic
conscious
left
execut
softwar
project
requir
skill
two
dimensions—engin
project
management—thi
book
focu
key
task
two
dimens
discu
concept
techniqu
appli
effect
execut
task
book
organ
simpl
manner
one
chapter
key
task
project
engin
task
requir
analy-
si
specif
architectur
design
modul
level
design
code
unit
test
test
project
manag
key
task
project
plan-
ning
project
monitor
control
discuss
togeth
one
chapter
project
plan
even
monitor
ha
plan
addi-
tion
book
contain
one
chapter
clearli
defin
problem
domain
softwar
engin
anoth
chapter
discu
central
concept
softwar
process
integr
differ
task
execut
project
chapter
open
introduct
clearli
list
chapter
goal
reader
expect
learn
chapter
task
cover
chapter
import
concept
first
discuss
follow
discuss
output
task
desir
qualiti
properti
output
practic
method
notat
perform
task
explan
support
exampl
key
learn
summar
end
reader
chapter
end
self-assess
exercis
book
primarili
intent
introductori
cours
softwar
engi-
neer
ani
undergradu
graduat
program
target
student
know
program
formal
exposur
softwar
engi-
neer
book
also
use
profession
similar
state—know
program
want
introduc
systemat
approach
softwar
engin
though
book
self-contain
teach
support
supplement
resourc
avail
websit
url
resourc
avail
site
includ
powerpoint
present
chapter
ppt
format
instructor
chang
suit
style
variou
templat
differ
output
project
use
student
project
cours
case
studi
major
output
project
practic
exercis
unit
test
inspect
would
like
express
gratitud
editor
wayn
wheeler
con-
ceiv
thi
idea
concis
introductori
book
creat
thi
opportun
would
also
like
express
thank
wife
shikha
daughter
sumedha
sunanda
onc
bear
mood
odd
hour
ask
ani
student
ha
program
experi
follow
question
given
problem
build
softwar
system
student
feel
approxim
10,000
line
say
c
java
code
work
full
time
long
take
build
thi
system
answer
student
gener
given
program-
ming
expertis
student
good
chanc
abl
build
softwar
demo
professor
within
product
student
5000
line
code
loc
per
person-month
let
u
take
altern
scenario—w
act
client
pose
problem
compani
busi
develop
softwar
client
though
standard
product
figur
vari
lot
fair
say
product
figur
1000
loc
per
person-month
quit
respect
though
low
100
loc
per
person-month
embed
system
thi
product
team
profession
softwar
organ
take
10
person-month
build
thi
softwar
system
whi
thi
differ
product
two
scenario
whi
student
produc
softwar
product
thousand
loc
per
month
colleg
end
produc
onli
thousand
loc
per
month
work
compani
answer
cours
two
differ
thing
built
two
scenario
first
student
system
built
primarili
meant
demonstr
purpos
expect
use
later
becaus
p.
jalot
concis
introduct
softwar
engin
use
noth
signific
depend
softwar
presenc
bug
lack
qualiti
major
concern
neither
qualiti
issu
like
usabl
maintain
portabl
etc
hand
industrial-strength
softwar
system
built
solv
problem
client
use
client
’
organ
oper
part
busi
malfunct
system
huge
impact
term
financi
busi
loss
inconveni
user
loss
properti
life
consequ
softwar
system
need
high
qualiti
respect
properti
like
reliabl
usabl
portabl
etc
thi
need
high
qualiti
satisfi
end
user
ha
major
impact
way
softwar
develop
cost
rule
thumb
brook
give
suggest
industrial-strength
softwar
may
cost
10
time
student
softwar
16
softwar
industri
larg
interest
develop
industrial-strength
softwar
area
softwar
engin
focu
build
system
problem
domain
softwar
engin
industrial-
strength
softwar
rest
book
use
term
softwar
mean
industrial-strength
softwar
remaind
thi
chapter
learn
qualiti
cost
schedul
main
forc
drive
industrial-
strength
softwar
project
cost
product
defin
measur
project
qualiti
softwar
character
measur
larg
scale
chang
import
attribut
problem
domain
solut
approach
handl
though
need
high
qualiti
distinguish
industri
strength
softwar
cost
schedul
major
drive
forc
softwar
industrial-strength
softwar
domain
three
basic
forc
play—cost
schedul
qualiti
softwar
produc
reason
cost
reason
time
good
qualiti
three
paramet
often
drive
defin
softwar
project
industrial-strength
softwar
veri
expens
primarili
due
fact
softwar
develop
extrem
labor-intens
get
idea
cost
involv
let
u
consid
current
state
practic
industri
line
code
loc
thousand
line
code
kloc
deliv
far
commonli
use
measur
softwar
size
industri
main
cost
produc
softwar
manpow
employ
cost
develop
softwar
gener
measur
term
person-month
effort
spent
develop
product
frequent
measur
industri
term
loc
kloc
per
person-month
product
softwar
industri
write
fresh
code
gener
rang
hundr
1000+
loc
per
person-month
thi
produc-
tiviti
entir
develop
cycl
code
task
softwar
compani
often
charg
client
develop
softwar
be-
tween
$
3000
-
$
15,000
per
person-month
product
1000
loc
per
person-month
mean
line
deliv
code
cost
$
$
15
even
small
project
easili
end
softwar
50,000
loc
thi
product
softwar
project
cost
$
150,000
schedul
anoth
import
factor
mani
project
busi
trend
dictat
time
market
product
reduc
cycl
time
concept
deliveri
small
softwar
thi
mean
need
develop
faster
within
specifi
time
unfortun
histori
softwar
full
case
project
substanti
late
clearli
therefor
reduc
cost
cycl
time
softwar
de-
velop
central
goal
softwar
engin
product
term
output
kloc
per
person-month
adequ
captur
cost
sched-
ule
concern
product
higher
clear
cost
term
person-month
lower
work
done
fewer
person-month
similarli
product
higher
potenti
develop
softwar
le
time
improves—a
team
higher
product
finish
job
le
time
same-s
team
lower
product
actual
time
project
take
cours
depend
also
number
peopl
al-
locat
project
henc
pursuit
higher
product
basic
drive
forc
behind
softwar
engin
major
reason
use
differ
tool
techniqu
besid
cost
schedul
major
factor
drive
softwar
engi-
neer
qualiti
today
qualiti
one
main
mantra
busi
strategi
design
around
unfortun
larg
number
instanc
occur
regard
unreli
software—th
softwar
often
doe
suppos
doe
someth
suppos
clearli
develop
high-qual
softwar
anoth
fundament
goal
soft-
ware
engin
howev
cost
gener
well
understood
concept
qualiti
context
softwar
need
elabor
intern
standard
softwar
product
qualiti
55
suggest
softwar
qualiti
compris
six
main
attribut
shown
figur
attribut
defin
follow
function
capabl
provid
function
meet
state
impli
need
softwar
use
reliabl
capabl
provid
failure-fre
servic
usabl
capabl
understood
learn
use
effici
capabl
provid
appropri
perform
rel
amount
resourc
use
maintain
capabl
modifi
purpos
make
cor-
rection
improv
adapt
portabl
capabl
adapt
differ
specifi
environ-
ment
without
appli
action
mean
provid
thi
purpos
product
multipl
dimens
qualiti
differ
project
may
emphas
dif-
ferent
attribut
global
singl
number
qualiti
possibl
how-
ever
despit
fact
mani
qualiti
attribut
reliabl
gen-
eral
accept
main
qualiti
criterion
unreli
softwar
due
presenc
defect
softwar
one
measur
qualiti
number
defect
deliv
softwar
per
unit
size
gener
taken
thousand
line
code
kloc
thi
major
qualiti
criterion
qualiti
object
reduc
number
defect
per
kloc
much
possibl
current
best
practic
softwar
engin
abl
reduc
defect
densiti
le
determin
qualiti
softwar
product
need
determin
number
defect
softwar
wa
deliv
thi
number
clearli
known
deliveri
time
may
never
known
one
approach
measur
qualiti
log
defect
found
deliveri
defin
qualiti
respect
defect
thi
mean
qualiti
deliv
softwar
onli
determin
defect
densiti
howev
also
estim
past
data
similar
projects—if
similar
approach
use
expect
current
project
similar
defect
densiti
past
project
point
use
thi
definit
qualiti
defect
must
clearli
defin
defect
could
problem
softwar
caus
softwar
crash
problem
caus
output
properli
align
one
misspel
word
etc
exact
definit
consid
defect
clearli
depend
project
standard
organ
develop
project
us
typic
latter
besid
reliabl
anoth
qualiti
attribut
great
interest
maintain-
abil
onc
softwar
deliv
deploy
enter
mainten
phase
whi
mainten
need
softwar
softwar
ha
physic
compon
degrad
age
softwar
need
maintain
be-
caus
residu
defect
remain
system
commonli
believ
state
art
today
limit
develop
softwar
zero
de-
fect
densiti
possibl
defect
onc
discov
need
remov
lead
call
correct
mainten
mainten
also
need
chang
deliv
softwar
satisfi
enhanc
need
user
environ
lead
adapt
mainten
life
softwar
system
mainten
cost
far
exceed
cost
origin
develop
maintenance-to-development-cost
ratio
ha
various
suggest
80:20
70:30
60:40
due
thi
high
cost
maintain
attribut
deliv
softwar
high
interest—it
clearli
desir
softwar
system
easier
maintain
though
cost
schedul
qualiti
main
drive
forc
project
problem
domain
industri
strength
softwar
char-
acterist
problem
domain
also
influenc
solut
approach
employ
focu
two
characteristics—scal
chang
industrial-strength
softwar
system
tend
larg
complex
requir
ten
thousand
line
code
size
well-known
softwar
product
given
tabl
expect
develop
larg
system
requir
differ
set
method
compar
develop
small
system
method
use
develop
small
system
often
scale
larg
system
exampl
illustr
thi
point
consid
problem
count
peopl
room
versu
take
censu
countri
essenti
count
problem
method
use
count
peopl
room
work
take
censu
differ
set
method
use
conduct
censu
censu
problem
requir
consider
manag
organ
valid
addit
count
similarli
method
one
use
develop
program
hundr
line
expect
work
softwar
hundr
thousand
line
need
develop
differ
set
method
must
use
develop
larg
softwar
ani
softwar
project
involv
use
engin
project
manage-
ment
small
project
inform
method
develop
manag
use
howev
larg
project
much
rigor
illustr
figur
word
success
execut
project
proper
method
engin
system
ha
employ
project
ha
tightli
manag
make
sure
cost
schedul
qualiti
control
larg
scale
key
characterist
problem
domain
solut
approach
employ
tool
techniqu
abil
build
larg
softwar
system
chang
anoth
characterist
problem
domain
ap-
proach
develop
must
handl
complet
set
requir
system
gener
known
often
known
start
project
state
develop
proce
time
pass
addit
requir
identifi
need
incorpor
softwar
be-
ing
develop
thi
need
chang
requir
method
develop
embrac
chang
accommod
effici
chang
request
quit
disrupt
project
handl
properli
consum
30
40
%
develop
cost
14
discuss
abov
softwar
ha
chang
even
ha
de-
ploy
though
tradit
chang
softwar
dure
mainten
distinguish
chang
occur
develop
take
place
line
blur
fundament
chang
scenario
similar—exist
sourc
code
need
chang
due
chang
requir
due
defect
need
remov
overal
world
chang
faster
softwar
ha
chang
faster
even
develop
chang
requir
therefor
characteris-
tic
problem
domain
today
’
world
approach
accept
accommod
chang
littl
use—they
solv
onli
problem
chang
resist
problem
domain
softwar
engin
industrial-strength
softwar
thi
softwar
meant
solv
problem
set
user
expect
high
qualiti
thi
problem
domain
cost
schedul
qualiti
basic
drive
forc
henc
method
tool
use
solv
problem
thi
domain
must
ensur
high
product
high
qualiti
product
measur
amount
output
per
unit
input
resourc
softwar
output
measur
term
line
code
deliv
human
time
main
resourc
input
measur
person-month
product
therefor
measur
line
code
deliv
per
person-
month
softwar
qualiti
ha
mani
attribut
includ
function
reliabil-
iti
usabl
effici
maintain
portabl
reliabl
often
consid
main
qualiti
attribut
unreli
softwar
due
defect
softwar
qualiti
character
number
defect
per
thousand
line
code
problem
thi
domain
often
tend
veri
larg
need
custom
chang
fast
henc
techniqu
use
develop
industrial-strength
softwar
capabl
build
larg
softwar
system
capabl
handl
chang
main
differ
student
softwar
industrial-strength
softwar
develop
program
solv
problem
requir
effort
e
estim
industrial-strength
softwar
solv
problem
requir
10e
effort
think
thi
extra
effort
cost
spent
measur
take
project
measur
product
determin
product
measur
differ
attribut
softwar
qualiti
account
soft-
ware
interest
ensur
softwar
doe
make
ani
comput
mistak
qualiti
attribut
concern
project
manag
task
differ
larg
project
compar
small
project
execut
task
chang
suppos
chang
made
softwar
system
oper
whi
chang
system
cost
lot
make
chang
sourc
code
file
better
understand
problem
domain
softwar
engin
deal
let
u
orient
discuss
softwar
engin
softwar
engin
defin
systemat
approach
develop
oper
mainten
retir
softwar
52
seen
besid
deliv
softwar
high
qualiti
low
cost
low
cycl
time
also
goal
softwar
engin
must
achiev
word
systemat
approach
must
help
achiev
high
qualiti
productiv-
iti
q
&
p
softwar
three
main
factor
influenc
q
&
p
peopl
process
technolog
final
qualiti
deliv
product
achiev
depend
skill
peopl
involv
softwar
project
process
peopl
use
perform
differ
task
project
tool
use
peopl
ultim
develop
deliv
product
measur
respect
peopl
’
effort
basic
input
main
job
process
help
peopl
achiev
higher
q
&
p
specifi
task
tool
aid
help
peopl
perform
task
effici
fewer
error
therefor
clear
satisfi
object
deliv
softwar
high
q
&
p
process
form
core
consequ
softwar
engin
focu
primarili
process
refer
systemat
approach
definit
given
abov
thi
focu
process
distinguish
softwar
engin
comput
disciplin
mani
comput
disciplin
focu
type
product—oper
system
databas
etc.—whil
softwar
engin
focu
process
produc
product
p.
jalot
concis
introduct
softwar
engin
process
form
heart
softwar
engin
tool
tech-
nolog
provid
support
effici
execut
process
thi
book
focu
primarili
process
thi
chapter
discu
role
process
process
model
project
variou
compon
process
softwar
process
key
role
develop
process
project
manag
process
variou
model
develop
process—waterfal
prototyp
itera-
tive
rup
timebox
xp
overal
structur
project
manag
process
key
phase
process
sequenc
step
perform
given
purpos
52
men-
tion
earlier
develop
industri
strength
softwar
purpos
develop
softwar
satisfi
need
user
client
shown
figur
softwar
project
one
instanc
thi
problem
develop
process
use
achiev
thi
purpos
project
develop
process
play
key
role—it
follow
process
desir
end
goal
deliv
softwar
achiev
howev
discuss
earlier
suffici
reach
final
goal
desir
softwar
want
project
done
low
cost
low
cycl
time
deliv
high-qual
softwar
role
process
increas
due
addit
goal
though
mani
process
achiev
basic
goal
develop
softwar
figur
achiev
high
q
&
p
need
optimum
process
thi
goal
make
design
process
challeng
must
distinguish
process
specif
descript
process
process
dynam
entiti
captur
action
perform
process
specif
hand
descript
process
pre-
sumabl
follow
project
achiev
goal
project
process
specif
may
use
process
project
plan
follow
actual
process
actual
done
project
note
actual
process
differ
plan
process
ensur
specifi
process
follow
nontrivi
problem
howev
thi
book
assum
plan
actual
process
distinguish
two
use
term
process
refer
process
model
specifi
gener
process
optimum
class
project
situat
model
applic
use
process
model
project
’
process
lead
goal
develop
softwar
high
q
&
p
process
model
essenti
compil
best
practic
recip
success
project
word
process
mean
reach
goal
high
qualiti
low
cost
low
cycl
time
process
model
provid
process
structur
well
suit
class
project
process
often
specifi
high
level
sequenc
stage
sequenc
step
stage
process
stage
often
refer
subprocess
process
defin
abov
process
sequenc
step
execut
achiev
goal
sinc
mani
differ
goal
may
satisfi
develop
soft-
ware
multipl
process
need
mani
concern
softwar
engin
though
impact
softwar
develop
could
con-
sider
nonsoftwar
process
busi
process
social
process
train
process
exampl
process
come
thi
process
also
affect
softwar
develop
activ
beyond
purview
softwar
engin
process
deal
technic
manag
issu
soft-
ware
develop
collect
call
softwar
process
softwar
project
engin
solut
properli
manag
project
clearli
two
major
compon
softwar
process—a
develop
pro-
ce
project
manag
process
develop
process
specifi
engin
activ
need
perform
wherea
manag
process
specifi
plan
control
activ
cost
sched-
ule
qualiti
object
met
effect
develop
project
manag
process
key
achiev
object
deliv
desir
softwar
satisfi
user
need
ensur
high
product
qualiti
dure
project
mani
product
produc
typic
com-
pose
mani
item
exampl
final
sourc
code
may
compos
mani
sourc
file
item
keep
evolv
project
proce
creat
mani
version
way
develop
process
gener
focu
evolut
chang
handl
anoth
process
call
softwar
configu-
ration
control
process
often
use
object
thi
compon
process
primarili
deal
manag
chang
integr
product
violat
despit
chang
three
constitu
process
focu
project
product
consid
compris
product
engin
process
main
object
produc
desir
product
softwar
process
view
static
entiti
three
compon
process
suffic
howev
softwar
process
dynam
entiti
must
chang
adapt
increas
understand
softwar
develop
avail
newer
technolog
tool
due
thi
process
manag
softwar
process
need
basic
object
process
manag
process
improv
softwar
process
improv
mean
capabl
process
produc
qualiti
good
low
cost
improv
thi
current
softwar
process
studi
frequent
studi
project
done
use
process
whole
process
understand
current
process
analyz
properti
determin
improv
affect
improv
dealt
process
manag
process
relationship
major
compon
process
shown
fig-
ure
compon
process
distinct
onli
type
activ
perform
typic
also
peopl
perform
activ
specifi
process
typic
project
develop
activ
per-
form
programm
design
tester
etc
project
manag
pro-
ce
activ
perform
project
manag
configur
control
process
activ
perform
group
gener
call
configur
control
process
manag
process
activ
perform
softwar
engin
process
group
sepg
thi
book
focu
primarili
process
relat
product
engin
particularli
develop
project
manag
process
much
book
discu
differ
phase
develop
process
subprocess
methodolog
use
execut
phase
rest
book
use
term
softwar
process
mean
product
engin
process
unless
specifi
otherwis
softwar
develop
process
goal
produc
high-qual
softwar
product
therefor
focu
activ
directli
relat
product
softwar
exampl
design
code
test
develop
process
specifi
major
develop
qualiti
control
activ
need
perform
project
form
core
softwar
process
manag
process
often
decid
base
develop
process
project
’
develop
process
defin
task
project
per-
form
order
done
process
limit
degre
freedom
project
specifi
type
activ
must
under-
taken
order
shortest
effici
path
obtain
user
need
softwar
satisfi
need
process
drive
project
heavili
influenc
outcom
discuss
earlier
process
model
specifi
gener
process
usual
set
stage
project
divid
order
stage
execut
ani
constraint
condit
execut
stage
basic
premis
behind
process
model
situat
model
applic
use
process
model
project
’
process
lead
low
cost
high
qualiti
reduc
cycl
time
provid
benefit
word
process
model
provid
gener
guidelin
develop
suitabl
process
project
due
import
develop
process
variou
model
propos
thi
section
discu
major
model
simplest
process
model
waterfal
model
state
phase
organ
linear
order
model
wa
origin
propos
royc
74
though
variat
model
evolv
depend
natur
activ
flow
control
thi
model
project
be-
gin
feasibl
analysi
upon
success
demonstr
feasibl
project
requir
analysi
project
plan
begin
design
start
requir
analysi
complet
code
begin
design
complet
onc
program
complet
code
integr
test
done
upon
success
complet
test
system
in-
stall
thi
regular
oper
mainten
system
take
place
model
shown
figur
basic
idea
behind
phase
separ
concerns—each
phase
deal
distinct
separ
set
concern
thi
larg
complex
task
build
softwar
broken
smaller
task
themselv
still
quit
complex
specifi
requir
design
etc
separ
concern
focus
select
phase
give
better
handl
engin
manag
deal
complex
problem
requir
analysi
phase
mention
analysi
planning.
plan
critic
activ
softwar
develop
good
plan
base
requir
system
done
befor
later
phase
begin
howev
practic
detail
requir
necessari
plan
consequ
plan
usual
overlap
requir
analysi
plan
readi
befor
later
phase
begin
thi
plan
addit
input
later
phase
linear
order
activ
ha
import
consequ
first
clearli
identifi
end
phase
begin
next
cer-
tific
mechan
ha
employ
end
phase
thi
usual
done
verif
valid
mean
ensur
output
phase
consist
input
output
previou
phase
output
phase
consist
overal
requir
system
consequ
need
certif
phase
must
defin
output
evalu
certifi
ac-
tiviti
phase
complet
product
produc
phase
output
earlier
phase
often
call
work
product
usual
form
document
like
requir
document
design
document
code
phase
output
code
though
set
document
produc
project
depend
process
implement
follow
document
gener
form
reason
set
produc
project
one
main
advantag
waterfal
model
simplic
concep-
tualli
straightforward
divid
larg
task
build
softwar
system
seri
cleanli
divid
phase
phase
deal
separ
logi-
cal
concern
also
easi
administ
contractu
setup—a
phase
complet
work
product
produc
amount
money
given
custom
develop
organ
waterfal
model
although
wide
use
ha
strong
limit
assum
requir
system
frozen
i.e.
baselin
befor
design
begin
thi
possibl
system
design
autom
exist
manual
system
new
system
determin
require-
ment
difficult
user
doe
even
know
requir
henc
unchang
requir
unrealist
project
freez
requir
usual
requir
choos
hardwar
becaus
form
part
requir
specif
larg
project
might
take
year
complet
hardwar
select
earli
due
speed
hardwar
technolog
chang
like
final
softwar
use
hardwar
technolog
verg
becom
obsolet
thi
clearli
desir
expens
softwar
system
follow
big
bang
approach—th
entir
softwar
deliv
one
shot
end
thi
entail
heavi
risk
user
doe
know
veri
end
get
furthermor
project
run
money
middl
softwar
ha
noth
valu
proposit
encourag
requir
bloat
sinc
requir
must
spec-
ifi
start
onli
specifi
deliv
encourag
user
stakehold
add
even
featur
think
might
need
final
may
get
use
document-driven
process
requir
formal
document
end
phase
despit
limit
waterfal
model
ha
wide
use
process
model
well
suit
routin
type
project
require-
ment
well
understood
develop
organ
quit
fa-
miliar
problem
domain
requir
softwar
quit
clear
waterfal
model
work
well
may
effici
process
goal
prototyping-bas
develop
process
counter
first
limit
waterfal
model
basic
idea
instead
freez
requir
befor
ani
design
code
proceed
throwaway
proto-
type
built
help
understand
requir
thi
prototyp
develop
base
current
known
requir
develop
prototyp
ob-
viousli
undergo
design
code
test
phase
done
veri
formal
thoroughli
use
thi
prototyp
client
get
actual
feel
system
enabl
client
better
understand
requir
desir
system
thi
result
stabl
requir
chang
le
frequent
prototyp
attract
idea
complic
larg
system
manual
process
exist
system
help
determin
requir
situat
let
client
play
prototyp
provid
invalu
intang
input
help
determin
requir
system
also
effect
method
demonstr
feasibl
certain
approach
thi
might
need
novel
system
clear
constraint
met
algorithm
develop
implement
requir
situat
risk
associ
project
reduc
use
prototyp
process
model
prototyp
approach
shown
figur
develop
process
use
throwaway
prototyp
typic
proce
follow
40
develop
prototyp
typic
start
prelim-
inari
version
requir
specif
document
ha
develop
thi
stage
reason
understand
system
need
need
unclear
like
chang
prototyp
ha
develop
end
user
client
given
opportun
use
ex-
plore
prototyp
base
experi
provid
feedback
develop
regard
prototyp
correct
need
modifi
miss
need
etc
base
feedback
prototyp
modifi
incorpor
suggest
chang
done
easili
user
client
allow
use
system
thi
cycl
repeat
judgment
prototyp
develop
an-
alyst
benefit
chang
system
obtain
feedback
outweigh
cost
time
involv
make
chang
obtain
feedback
base
feedback
initi
requir
modifi
produc
final
requir
specif
use
develop
product
qualiti
system
prototyp
purpos
requir
analysi
feasibl
cost
must
kept
low
consequ
onli
featur
includ
prototyp
valuabl
return
user
experi
excep-
tion
handl
recoveri
conform
standard
format
typic
includ
prototyp
prototyp
prototyp
discard
point
implement
part
requir
alreadi
well
understood
henc
focu
develop
includ
featur
properli
understood
develop
approach
quick
dirti
focu
quick
develop
rather
qualiti
becaus
prototyp
thrown
away
onli
minim
documenta-
tion
need
produc
dure
prototyp
exampl
design
document
test
plan
test
case
specif
need
dure
develop
prototyp
anoth
import
cost-cut
measur
reduc
test
becaus
test
consum
major
part
develop
expenditur
dure
reg-
ular
softwar
develop
thi
ha
consider
impact
reduc
cost
use
type
cost-cut
method
possibl
keep
cost
prototyp
le
percent
total
develop
cost
return
thi
extra
cost
substanti
first
experi
develop
prototyp
reduc
cost
actual
softwar
develop-
ment
second
requir
stabl
due
feedback
prototyp
fewer
chang
requir
consequ
cost
incur
due
chang
requir
substanti
re-
duce
third
qualiti
final
softwar
like
far
superior
experi
engin
obtain
develop
prototyp
enabl
creat
better
design
write
better
code
better
test
fi-
nalli
develop
prototyp
mitig
mani
risk
exist
project
requir
well
known
overal
prototyp
well
suit
project
requir
hard
determin
confid
state
requir
low
project
requir
properli
understood
begin
use
prototyp
process
model
effect
method
develop
softwar
also
excel
techniqu
reduc
type
risk
associ
project
iter
develop
process
model
counter
third
fourth
limita-
tion
waterfal
model
tri
combin
benefit
proto-
type
waterfal
model
basic
idea
softwar
develop
increment
increment
ad
function
capabl
system
full
system
implement
iter
enhanc
model
4
exampl
thi
approach
first
step
thi
model
simpl
initi
implement
done
subset
overal
problem
thi
subset
one
contain
key
aspect
problem
easi
understand
implement
form
use
usabl
system
project
control
list
creat
contain
order
task
must
perform
obtain
final
implement
thi
project
control
list
give
idea
far
along
project
ani
given
step
final
system
step
consist
remov
next
task
list
design
implement
select
task
code
test
implement
perform
analysi
partial
system
obtain
thi
step
updat-
ing
list
result
analysi
three
phase
call
design
phase
implement
phase
analysi
phase
process
iter
project
control
list
empti
time
final
implement
system
avail
iter
enhanc
model
shown
figur
project
control
list
guid
iter
step
keep
track
task
must
done
base
analysi
one
task
list
includ
redesign
defect
compon
redesign
entir
system
howev
redesign
system
gener
occur
onli
initi
step
later
step
design
would
stabil
le
chanc
redesign
entri
list
task
perform
one
step
iter
enhanc
process
simpl
enough
complet
understood
select
task
thi
manner
minim
chanc
error
reduc
redesign
work
design
implement
phase
step
perform
top-down
manner
use
techniqu
though
clear
benefit
iter
develop
particularli
allow
chang
requir
all-or-noth
risk
etc.
cost
associ
iter
develop
also
exampl
requir
futur
iter
known
design
system
may
robust
also
chang
may
made
exist
system
accommod
requir
futur
iter
lead
extra
rework
and/or
discard
work
done
earlier
overal
may
offer
best
technic
solut
benefit
may
outweigh
cost
mani
project
anoth
common
approach
iter
develop
require-
ment
architectur
design
standard
waterfal
prototyp
ap-
proach
deliv
softwar
iter
build
system
time
effort-consum
task
done
iter
though
requir
specifi
upfront
view
thi
approach
one
iter
deliv
requir
architectur
plan
iter
deliv
softwar
increment
start
deliveri
iter
requir
implement
thi
releas
decid
design
enhanc
code
develop
implement
requir
iter
end
deliveri
work
softwar
system
provid
valu
end
user
select
requir
iter
done
primarili
base
valu
requir
provid
end
user
critic
support
requir
thi
approach
shown
figur
advantag
thi
approach
requir
mostli
known
upfront
overal
view
system
avail
proper
archi-
tectur
design
remain
rel
stabl
thi
hope
rework
develop
iter
diminish
time
valu
end
custom
deliv
iter
doe
all-or-noth
risk
also
sinc
deliveri
done
increment
plan
execut
iter
done
separ
feedback
iter
incorpor
next
iter
even
new
requir
may
get
un-
cover
also
incorpor
henc
thi
model
iter
develop
also
provid
benefit
model
discuss
abov
iter
approach
becom
extrem
popular
despit
diffi-
culti
use
thi
context
key
reason
increas
popular
first
foremost
today
’
world
client
want
invest
much
without
see
return
current
busi
scenario
prefer
see
return
continu
invest
made
iter
model
per-
mit
this—aft
iter
work
softwar
deliv
risk
client
therefor
limit
second
busi
chang
rapidli
today
never
realli
know
complet
requir
softwar
need
constantli
add
new
capabl
softwar
adapt
busi
chang
situat
iter
process
allow
thi
third
iter
provid
work
system
feedback
help
develop
stabl
requir
next
iter
describ
process
model
use
iter
approach
ration
unifi
process
rup
51
63
anoth
iter
process
model
wa
design
ration
part
ibm
though
gener
pro-
ce
model
wa
design
object-ori
develop
use
unifi
model
languag
uml
discu
topic
later
chapter
rup
propos
develop
softwar
divid
cycl
cycl
deliv
fulli
work
system
gener
cycl
execut
separ
project
whose
goal
deliv
addit
capabl
exist-
ing
system
built
previou
cycl
henc
project
process
cycl
form
overal
process
cycl
broken
four
consecut
phase
phase
ha
distinct
purpos
complet
phase
well-
defin
mileston
project
clearli
defin
output
purpos
incept
phase
establish
goal
scope
project
complet
thi
phase
lifecycl
object
mileston
thi
mileston
specifi
vision
high-level
capabl
eventu
system
busi
benefit
expect
provid
key
illustr
use
case
system
key
risk
project
basic
plan
project
regard
cost
schedul
base
output
thi
phase
go/no-go
decis
may
taken
project
proceed
thi
mileston
repres
share
vision
among
stakehold
agre
project
vision
benefit
cost
usag
etc
elabor
phase
architectur
system
design
base
detail
requir
analysi
complet
thi
phase
life-
cycl
architectur
mileston
end
thi
phase
expect
requir
identifi
specifi
architectur
system
ha
design
specifi
manner
address
technic
risk
identifi
earlier
phase
addit
high-level
project
plan
project
ha
prepar
show
remain
phase
iter-
ation
current
percept
risk
end
thi
phase
critic
engin
decis
regard
choic
technolog
architec-
ture
etc
taken
detail
understand
project
exist
output
thi
mileston
allow
technic
evalu
propos
solut
well
better
inform
decis
cost-benefit
analysi
project
construct
phase
softwar
built
test
thi
phase
result
softwar
product
deliv
along
associ
user
manual
success
complet
thi
phase
result
initi
oper
capabl
mileston
achiev
purpos
transit
phase
move
softwar
devel-
opment
environ
client
’
environ
host
thi
complex
task
requir
addit
test
convers
old
data
thi
softwar
work
train
personnel
etc
success
execut
thi
phase
result
achiev
mileston
product
releas
differ
phase
mileston
rup
shown
figur
though
phase
consecut
phase
may
multipl
iter
iter
deliv
intern
extern
custom
well-defin
output
often
part
final
deliver
phase
’
mileston
gener
expect
construct
phase
broken
multipl
iter
iter
produc
work
system
use
feedback
evalu
beta-test
etc
though
itera-
tion
construct
done
often
clear
iter
thi
phase
deliv
iter
may
done
meaning
phase
well
exampl
elabor
phase
first
iter
may
specifi
overal
architectur
high-level
requir
second
iter
may
done
thrash
detail
anoth
exampl
may
multipl
iter
transit
develop
softwar
iter
make
live
part
featur
develop
softwar
rup
ha
care
chosen
phase
name
confus
engin
task
done
project
rup
en-
gineer
task
phase
separ
differ
engin
activ
may
perform
phase
achiev
mileston
rup
group
activ
differ
subprocess
call
core
process
workflow
sub-
process
correspond
task
perform
requir
analysi
design
implement
design
test
project
manag
etc
subprocess
shown
tabl
one
key
differ
rup
model
ha
separ
phase
task
allow
multipl
subprocess
function
within
phase
waterfal
waterfall-bas
iter
model
phase
within
process
wa
link
particular
task
perform
process
like
re-
quirement
design
etc
rup
task
separ
stage
allow
exampl
dure
construct
execut
requir
process
allow
part
requir
activ
done
even
construct
someth
waterfal
allow
project
wish
may
detail
requir
onli
featur
dure
elabora-
tion
phase
may
detail
requir
construct
go
mayb
first
iter
thi
onli
allow
project
greater
degre
flexibl
plan
differ
task
done
also
captur
realiti
situation—it
often
possibl
specifi
requir
start
best
start
project
requir
work
detail
later
though
subprocess
may
activ
mani
phase
expect
volum
work
effort
spent
subprocess
vari
phase
exampl
expect
lot
effort
spent
requir
subprocess
dure
elabor
le
spent
construc-
tion
still
le
ani
spent
transit
similarli
model
ha
develop
process
activ
elabor
allow
project
build
prototyp
dure
elabor
phase
help
requir
activ
need
howev
implement
doe
happen
construct
phase
effort
spent
subprocess
differ
phase
cours
de-
pend
project
howev
gener
pattern
indic
tabl
specifi
level
effort
phase
high
medium
low
etc
overal
rup
provid
flexibl
process
model
follow
iter
approach
onli
top
level
cycl
also
encourag
iter
approach
dure
phase
cycl
phase
allow
differ
task
done
per
need
project
speed
develop
parallel
differ
iter
employ
new
iter
commenc
befor
system
produc
current
iter
releas
henc
develop
new
releas
happen
parallel
develop
current
releas
start
iter
befor
previou
iter
ha
complet
possibl
reduc
averag
deliveri
time
iter
howev
support
parallel
execut
iter
ha
structur
properli
team
organ
suitabl
timebox
model
propos
approach
60
59
timebox
model
basic
unit
develop
time
box
fix
durat
sinc
durat
fix
key
factor
select
requir
featur
built
time
box
fit
time
box
thi
contrast
regular
iter
approach
function
select
time
deliv
determin
timebox
chang
perspect
develop
make
schedul
nonnegoti
high-prior
commit
time
box
divid
sequenc
stage
like
waterfal
model
stage
perform
clearli
defin
task
iter
produc
clearli
defin
output
model
also
requir
durat
stage
time
take
complet
task
stage
approxim
furthermor
model
requir
dedic
team
stage
team
stage
perform
onli
task
stage—task
stage
perform
respect
team
thi
quit
differ
iter
model
implicit
assumpt
team
perform
differ
task
project
iter
time-box
iter
stage
equal
durat
ded-
icat
team
render
pipelin
differ
iter
pipelin
concept
hardwar
differ
instruct
execut
paral-
lel
execut
new
instruct
start
onc
first
stage
previou
instruct
finish
illustr
use
thi
model
consid
time
box
consist
three
stage
requir
specif
build
deploy
require-
ment
stage
execut
team
analyst
end
priorit
list
requir
built
thi
iter
along
high-level
design
build
team
develop
code
implement
requir
perform
test
test
code
hand
deploy
team
perform
predeploy
test
instal
system
product
use
three
stage
done
approxim
equal
time
iter
time
box
three
stage
project
proce
follow
requir
team
ha
finish
requir
timebox-1
requir
given
build
team
build
softwar
requir
team
go
start
prepar
requir
timebox-2
build
timebox-
code
hand
deploy
team
build
team
move
build
code
requir
timebox-
2
requir
team
move
requir
timebox-3
thi
pipelin
execut
timebox
process
shown
figur
59
three-stag
time
box
three
iter
concurr
progress
time
box
size
day
first
softwar
deliveri
occur
day
subsequ
deliveri
howev
take
place
everi
t/
exampl
time
box
durat
stage
durat
first
deliveri
made
second
deliveri
made
1
third
1
contrast
thi
linear
execut
iter
first
deliveri
made
second
1
third
2
three
team
work
project—th
requir
team
build
team
deploy
team
teamwis
activ
3-stage
pipelin
discuss
abov
shown
figur
59
clear
durat
iter
ha
reduc
total
work
done
time
box
effort
spent
also
remain
same—th
amount
softwar
deliv
end
iter
time
box
undergo
stage
effort
time
spent
iter
also
remain
cost
reduc
deliveri
time
real
cost
thi
reduc
time
resourc
use
thi
model
timebox
dedic
team
differ
stage
total
team
size
project
sum
team
differ
stage
thi
main
differ
situat
singl
team
perform
stage
entir
team
work
iter
henc
timebox
provid
approach
util
addit
man-
power
reduc
deliveri
time
well
known
standard
method
execut
project
compress
cycl
time
project
substan-
tialli
ad
manpow
howev
timebox
model
use
manpow
manner
parallel
execut
differ
stage
abl
deliv
softwar
quicker
word
provid
way
shorten
deliveri
time
use
addit
manpow
timebox
well
suit
project
requir
larg
number
fea-
ture
develop
short
time
around
stabl
architectur
use
stabl
technolog
featur
flexibl
group
build
meaning
system
iter
provid
valu
user
main
cost
thi
model
increas
complex
project
manag
manag
product
develop
multipl
develop
concurr
activ
also
impact
unusu
situat
iter
quit
disrupt
detail
model
well
detail
exampl
appli
model
real
commerci
project
given
60
59
agil
develop
approach
evolv
1990
reaction
documen-
tation
bureaucracy-bas
process
particularli
waterfal
approach
agil
approach
base
common
principl
x
work
softwar
key
measur
progress
project
progress
project
therefor
softwar
develop
deliv-
ere
rapidli
small
increment
even
late
chang
requir
entertain
small-incr
model
develop
help
accommod
face-to-fac
commun
prefer
document
continu
feedback
involv
custom
necessari
develop
good-qual
softwar
simpl
design
evolv
improv
time
better
approach
elabor
design
front
handl
possibl
scenario
deliveri
date
decid
empow
team
talent
individu
dictat
mani
detail
agil
methodolog
propos
wide
use
extrem
program
xp
one
popular
well-known
approach
famili
agil
method
like
agil
approach
belief
chang
inevit
rather
treat
chang
un-
desir
develop
embrac
chang
accommod
chang
develop
process
ha
lightweight
quick
respond
thi
develop
softwar
iter
avoid
relianc
detail
multipl
document
hard
maintain
instead
reli
face-to-fac
com-
munic
simplic
feedback
ensur
desir
chang
quickli
correctli
reflect
program
briefli
discu
develop
process
xp
repres
agil
process
extrem
program
project
start
user
stori
short
sentenc
descript
scenario
custom
user
would
like
system
support
differ
tradit
requir
specif
primarili
details—us
stori
contain
detail
require-
ment
uncov
onli
stori
implement
therefor
allow
detail
decid
late
possibl
stori
written
separ
card
flexibl
group
empow
develop
team
estim
long
take
imple-
ment
user
stori
estim
rough
gener
state
week
use
estim
stori
releas
plan
done
defin
stori
built
system
releas
date
releas
frequent
small
releas
encourag
releas
iter
employ
accept
test
also
built
stori
use
test
softwar
befor
releas
bug
found
dure
accept
test
iter
form
work
item
next
iter
thi
overal
process
shown
figur
develop
done
iter
iter
last
week
iter
start
iter
plan
stori
implement
thi
iter
selected—high-valu
high-risk
stori
consid
higher
prioriti
implement
earli
iter
fail
accept
test
previou
iter
also
handl
detail
stori
obtain
iter
develop
develop
approach
use
iter
ha
uniqu
practic
first
envisag
develop
done
pair
programm
call
pair
program
discu
chapter
7
instead
individu
programm
second
suggest
build
code
unit
autom
unit
test
written
first
befor
actual
code
written
code
written
pa
test
thi
approach
refer
test-driven
develop
contrast
regular
code-first
develop
programm
first
write
code
think
test
discu
test-driven
develop
chapter
7
function
unit
increas
unit
test
enhanc
first
code
enhanc
pa
new
set
unit
test
third
encourag
simpl
solut
well
chang
expect
design
solut
devis
earlier
may
point
becom
unsuit
develop
handl
thi
situat
suggest
refactor
done
improv
design
use
refactor
code
develop
dure
refactor
new
function
ad
onli
design
exist
program
improv
refactor
discuss
chapter
7
fourth
encourag
frequent
integr
differ
unit
avoid
mani
chang
base
code
happen
togeth
onli
one
pair
time
releas
chang
integr
common
code
base
process
within
iter
shown
thi
veri
simplifi
descript
xp
mani
rule
xp
relat
issu
like
right
programm
custom
communi-
cation
team
member
use
metaphor
trust
visibl
stakehold
collect
ownership
code
ani
pair
chang
ani
code
team
manag
build
quick
spike
solut
resolv
diffi-
cult
technic
architectur
issu
explor
approach
bug
handl
done
within
iter
esti-
mate
progress
made
previou
iter
meet
conduct
day
develop
start
etc
websit
good
sourc
well
as-
pect
xp
xp
agil
method
suitabl
situat
volum
pace
requir
chang
high
requir
risk
con-
sider
becaus
relianc
strong
commun
team
member
effect
team
colloc
modest
size
20
member
envisag
strong
involv
custom
develop
well
plan
deliveri
date
work
well
custom
heavili
involv
dure
entir
develop
work
team
member
seen
mani
differ
develop
process
model
need
differ
model
mention
earlier
develop
industri
strength
softwar
purpos
onli
develop
softwar
satisfi
need
user
client
want
project
done
low
cost
cycl
time
deliv
high-qual
softwar
addit
could
constraint
project
project
may
need
satisfi
henc
given
constraint
project
would
like
employ
process
model
like
maxim
chanc
deliv
softwar
achiev
highest
q
&
p
henc
select
suitabl
develop
process
model
project
key
decis
project
manag
ha
take
let
u
illustr
thi
exampl
suppos
small
team
develop
ha
entrust
task
build
small
auction
site
local
univers
univers
administr
spend
time
start
help
develop
requir
expect
avail
limit
later
team
ha
given
extens
deadlin
seem
veri
improb
also
seem
auction
site
featur
essenti
also
featur
desir
without
system
function
reason
well
constraint
clear
waterfal
model
suitabl
thi
project
noth
risk
entail
unaccept
due
inflex
deadlin
iter
enhanc
model
iter
doe
complet
waterfal
also
right
requir
requir
analysi
iter
user
client
avail
later
howev
iter
deliveri
approach
complet
requir
done
first
iter
deliveri
done
iter
seem
well
suit
deliveri
done
two
three
iter
time
short
requir
project
team
decid
function
essenti
work
system
includ
first
iter
desir
featur
plan
second
iter
thi
approach
chanc
complet
first
iter
befor
final
deadlin
increas
thi
model
chanc
deliv
work
system
increas
rup
allow
iter
phase
also
suitabl
model
consid
anoth
exampl
custom
highli
competit
environ
requir
depend
competit
deliv
function
regularli
highli
desir
furthermor
reduc
cost
custom
want
outsourc
much
project
work
possibl
anoth
team
anoth
countri
thi
project
clearli
waterfal
suitabl
requir
even
known
start
iter
enhanc
also
may
work
may
abl
deliv
rapidli
xp
hard
appli
requir
entir
team
includ
custom
colloc
thi
project
timebox
model
seem
fit
best
whole
project
employ
three
teams—on
analyst
work
custom
determin
requir
one
develop
could
low-cost
destin
third
deploy
site
host
suitabl
staf
team
durat
three
phases—analysi
design
build
deployment—can
made
approxim
equal
consid
anoth
project
univers
want
autom
reg-
istrat
process
alreadi
ha
databas
cours
pre-requisit
databas
student
record
thi
project
requir
well
understood
sinc
registr
happen
manual
waterfal
model
seem
optimum
select
develop
process
decid
phase
task
done
doe
specifi
thing
like
long
phase
last
mani
resourc
assign
phase
phase
monitor
qualiti
product
project
also
depend
critic
decis
meet
cost
qualiti
schedul
object
resourc
properli
alloc
activ
project
progress
differ
activ
ha
monitor
correct
action
taken
need
activ
part
project
manag
process
henc
project
manag
process
necessari
ensur
engineer-
ing
process
end
meet
real-world
object
cost
schedul
qualiti
project
manag
process
specifi
activ
need
done
project
manag
ensur
cost
qualiti
object
met
basic
task
ensur
onc
develop
process
chosen
implement
optim
basic
task
plan
detail
implement
process
particular
project
ensur
plan
properli
execut
larg
project
proper
manag
process
essenti
success
activ
manag
process
project
group
broadli
three
phase
plan
monitor
control
termin
analysi
project
manag
begin
plan
perhap
critic
project
manag
activ
goal
thi
phase
develop
plan
softwar
develop
follow
object
project
met
success
effici
softwar
plan
usual
produc
befor
develop
activ
begin
updat
develop
proce
data
progress
project
becom
avail
dure
plan
major
activ
cost
estim
schedul
mileston
determin
project
staf
qualiti
control
plan
control
monitor
plan
project
plan
undoubtedli
singl
import
manag
activ
form
basi
monitor
control
devot
one
full
chapter
project
monitor
control
phase
manag
process
longest
term
durat
encompass
develop
process
includ
activ
project
manag
ha
perform
develop
go
ensur
project
object
met
develop
proce
accord
develop
plan
updat
plan
need
cost
schedul
qualiti
major
drive
forc
activ
thi
phase
revolv
around
monitor
factor
affect
monitor
potenti
risk
project
might
prevent
project
meet
object
anoth
import
activ
dure
thi
phase
inform
obtain
monitor
suggest
object
may
met
necessari
action
taken
thi
phase
exert
suitabl
control
develop
activ
monitor
develop
process
requir
proper
inform
project
inform
typic
obtain
manag
process
develop
process
consequ
implement
develop
process
model
ensur
step
develop
process
produc
inform
manag
process
need
step
develop
process
provid
inform
manag
process
need
howev
interpret
inform
part
monitor
control
wherea
monitor
control
last
entir
durat
project
last
phase
manag
process—termin
analysis—i
perform
develop
process
basic
reason
perform
termi-
nation
analysi
provid
inform
develop
process
learn
project
order
improv
process
thi
phase
also
of-
ten
call
postmortem
analysi
iter
develop
thi
analysi
done
iter
provid
feedback
improv
execut
fur-
ther
iter
discu
book
exampl
postmortem
report
reader
refer
57
tempor
relationship
manag
process
devel-
opment
process
shown
figur
thi
ideal
relationship
show-
ing
plan
done
befor
develop
begin
termin
analysi
done
develop
figur
show
dure
develop
variou
phase
develop
process
quantit
inform
flow
monitor
control
phase
manag
process
us
inform
exert
control
develop
process
later
chapter
discu
detail
project
plan
phase
plan
also
includ
plan
monitor
discu
monitor
separ
discu
part
plan
activ
figur
2.12
tempor
relationship
develop
manag
pro-
ce
qualiti
product
achiev
softwar
project
depend
process
use
execut
project
due
thi
process
form
heart
softwar
engin
process
set
activ
perform
order
desir
result
achiev
process
model
gener
process
specif
ha
found
best
suit
situat
softwar
process
consist
mani
differ
compon
process
im-
portant
develop
process
project
manag
process
develop
process
focu
softwar
engin
mani
differ
process
model
well
suit
type
problem
waterfal
model
conceptu
simplest
model
softwar
de-
velop
requir
design
code
test
phase
perform
linear
progress
ha
veri
wide
use
suit-
abl
well-understood
problem
prototyp
model
prototyp
built
befor
build
final
system
use
develop
requir
lead
stabl
requir
thi
use
project
requir
clear
iter
develop
model
softwar
develop
iter
iter
result
work
softwar
system
thi
model
doe
requir
requir
known
start
allow
feedback
earlier
iter
next
one
reduc
risk
deliv
valu
project
proce
rup
project
execut
sequenc
four
phases—incept
elab-
orat
construct
transit
end
defin
mileston
phase
may
done
iter
subprocess
requir
de-
sign
code
test
etc
consid
activ
throughout
project
though
intens
vari
phase
phase
rup
flexibl
frame-
work
allow
project
follow
tradit
waterfal
want
allow
prototyp
wish
timebox
model
differ
iter
equal
time
durat
divid
equal
length
stage
commit
team
stage
iter
differ
iter
execut
pipelin
manner
dedic
team
work
stage
differ
iter
multipl
iter
concurr
activ
thi
model
reduc
averag
complet
time
iter
henc
use
situat
short
cycl
time
highli
desir
agil
approach
develop
base
key
principl
like
develop
softwar
small
iter
work
system
measur
progress
allow
chang
ani
time
extrem
program
xp
approach
project
start
short
user
stori
detail
obtain
iter
implement
iter
develop
done
programmer-pair
follow
practic
test-
driven
develop
frequent
integr
simpl
design
refactor
need
project
manag
process
focu
plan
control
de-
velop
process
consist
three
major
phases—plan
monitor
control
termin
analysi
much
project
manag
revolv
around
project
plan
produc
dure
plan
phase
relationship
process
model
process
specif
process
project
key
output
dure
iter
project
follow
iter
develop
model
develop
process
model
discuss
thi
chapter
would
employ
follow
project
data
entri
system
offic
staff
never
use
comput
befor
user
interfac
user-friendli
extrem
import
spreadsheet
system
ha
basic
featur
mani
desir
featur
use
basic
featur
web-bas
system
new
busi
requir
chang
fast
in-hous
develop
team
avail
aspect
project
web-sit
on-lin
store
ha
long
list
desir
featur
want
add
want
new
releas
new
featur
done
veri
frequent
project
us
timebox
process
model
three
stage
time
box
discuss
chapter
unequ
length
suppos
requir
specif
stage
take
build
stage
take
deploy
take
design
process
thi
project
maxim
resourc
util
assum
resourc
ani
task
hint
exploit
fact
sum
durat
first
third
stage
equal
durat
second
stage
effect
project
monitor
activ
like
develop
process
ieee
defin
requir
1
condit
capabl
need
user
solv
problem
achiev
object
2
condit
capabl
must
met
possess
system
...
satisfi
contract
standard
specif
formal
impos
document
53
note
softwar
requir
deal
requir
propos
system
capabl
system
yet
develop
seen
develop
model
requir
requir
speci-
fie
approach
like
agil
requir
onli
high-level
requir
specifi
written
form—detail
requir
elicit
interact
custom
iter
requir
implement
di-
rectli
reflect
softwar
approach
prefer
requir
specifi
precis
situat
goal
requir
activ
produc
softwar
requir
specif
sr
describ
propos
softwar
without
describ
softwar
role
sr
project
valu
good
sr
bring
differ
activ
process
produc
desir
sr
desir
characterist
sr
structur
sr
document
key
compon
p.
jalot
concis
introduct
softwar
engin
use
case
approach
analyz
specifi
function
requir
use
case
develop
approach
analyz
requir
like
data
flow
diagram
origin
softwar
system
need
client
softwar
system
creat
develop
final
complet
system
use
end
user
thu
three
major
parti
interest
new
system
client
develop
user
somehow
requir
system
satisfi
need
client
concern
user
commun
develop
problem
client
usual
doe
understand
softwar
softwar
develop
process
develop
often
doe
understand
client
’
problem
applic
area
thi
caus
commun
gap
parti
involv
de-
velop
project
basic
purpos
sr
bridg
thi
commun
gap
share
vision
softwar
built
henc
one
main
advantag
good
sr
sr
establish
basi
agreement
client
sup-
plier
softwar
product
thi
basi
agreement
frequent
formal
legal
contract
client
custom
develop
supplier
sr
client
clearli
describ
expect
supplier
develop
clearli
understand
capabl
build
softwar
relat
import
advantag
sr
provid
refer
valid
final
product
sr
help
client
determin
softwar
meet
require-
ment
without
proper
sr
way
client
determin
softwar
deliv
wa
order
way
develop
convinc
client
requir
fulfil
provid
basi
agreement
valid
strong
enough
reason
client
develop
thorough
rigor
job
requir
understand
specif
veri
practic
press
reason
good
sr
studi
shown
mani
error
made
dure
requir
phase
error
sr
manifest
error
final
system
implement
sr
clearli
want
high-qual
end
product
ha
error
must
begin
high-qual
sr
word
conclud
high-qual
sr
prerequisit
high-qual
softwar
final
qualiti
sr
ha
impact
cost
schedul
project
know
error
exist
sr
also
known
cost
fix
error
increas
almost
exponenti
time
progress
10
12
henc
improv
qualiti
requir
huge
save
futur
fewer
expens
defect
remov
word
requir
process
sequenc
activ
need
perform
requir
phase
culmin
produc
high-qual
doc-
ument
contain
sr
requir
process
typic
consist
three
basic
task
problem
requir
analysi
requir
specif
requir
valid
problem
analysi
often
start
high-level
problem
statement.
dur-
ing
analysi
problem
domain
environ
model
effort
understand
system
behavior
constraint
system
input
output
etc
basic
purpos
thi
activ
obtain
thorough
under-
stand
softwar
need
provid
frequent
dure
analysi
analyst
seri
meet
client
end
user
earli
meet
client
end
user
explain
analyst
work
environ
need
perceiv
ani
document
de-
scribe
work
organ
may
given
along
output
exist
method
perform
task
earli
meet
analyst
basic
listen
absorb
inform
provid
onc
analyst
understand
system
extent
us
next
meet
seek
clarif
part
doe
understand
may
document
infor-
mation
build
model
may
brainstorm
think
system
final
meet
analyst
essen-
tialli
explain
client
understand
system
us
meet
mean
verifi
propos
system
inde
consist
object
client
understand
obtain
problem
analysi
form
basi
require-
ment
specif
focu
clearli
specifi
requir
document
issu
represent
specif
languag
tool
address
dure
thi
activ
analysi
produc
larg
amount
in-
format
knowledg
possibl
redund
properli
organ
describ
requir
import
goal
thi
activ
requir
valid
focu
ensur
specifi
sr
inde
requir
softwar
make
sure
sr
good
qualiti
requir
process
termin
product
valid
sr
discu
thi
later
chapter
point
requir
process
linear
se-
quenc
three
activ
consider
overlap
feedback
activ
overal
requir
process
shown
figur
shown
figur
specif
activ
may
go
back
analysi
activ
thi
happen
frequent
part
problem
analyz
specifi
befor
part
analyz
speci-
fie
furthermor
process
specif
frequent
show
shortcom
knowledg
problem
therebi
necessit
analysi
onc
specif
done
go
valid
activ
thi
activ
may
reveal
problem
specif
requir
go
back
specif
step
may
reveal
shortcom
understand
problem
requir
go
back
analysi
activ
final
output
sr
document
analysi
preced
specif
first
question
aris
formal
model
done
dure
analysi
whi
output
model
treat
sr
main
reason
model
gener
focu
problem
structur
extern
behavior
consequ
thing
like
user
interfac
rare
model
wherea
fre-
quentli
form
major
compon
sr
similarli
eas
model
frequent
minor
issu
like
erron
situat
e.g.
error
output
rare
model
properli
wherea
sr
behavior
situat
also
ha
specifi
similarli
perform
constraint
design
constraint
standard
complianc
recoveri
etc.
includ
model
must
specifi
clearli
sr
becaus
design
must
know
properli
design
system
therefor
clear
output
model
form
desir
sr
transit
analysi
specif
also
expect
straightforward
even
formal
model
use
dure
analysi
good
sr
need
specifi
mani
thing
satisfactorili
handl
dure
analysi
essenti
pass
requir
analysi
activ
specif
activ
knowledg
acquir
sys-
tem
model
essenti
tool
help
obtain
thorough
com-
plete
knowledg
propos
system
sr
written
base
knowledg
acquir
dure
analysi
convert
knowledg
structur
document
straightforward
specif
major
task
rel
independ
properli
satisfi
basic
goal
sr
certain
properti
contain
differ
type
requir
desir
charac-
terist
sr
53
sr
correct
everi
requir
includ
sr
repres
someth
requir
final
system
complet
everyth
softwar
suppos
respons
softwar
class
input
data
specifi
sr
unambigu
onli
everi
requir
state
ha
one
onli
one
interpret
requir
often
written
natur
languag
inher
ambigu
requir
specifi
natur
languag
sr
writer
ha
especi
care
ensur
ambigu
sr
verifi
onli
everi
state
requir
verifi
requir
verifi
exist
cost-effect
process
check
whether
final
softwar
meet
requir
consist
requir
conflict
anoth
terminolog
caus
inconsist
exampl
differ
requir
may
use
differ
term
refer
object
may
logic
tempor
conflict
requir
caus
inconsist
thi
occur
sr
contain
two
requir
whose
logic
tempor
characterist
satisfi
togeth
ani
softwar
system
exampl
suppos
requir
state
event
e
occur
befor
anoth
event
f
anoth
set
requir
state
directli
indirectli
transit
event
f
occur
befor
event
e.
inconsist
sr
reflect
major
problem
gener
requir
softwar
equal
import
critic
import
critic
desir
veri
import
similarli
requir
core
requir
like
chang
time
pass
depend
time
provid
valu
user
oth-
er
sr
rank
import
and/or
stabil
requir
import
stabil
requir
indic
stabil
requir
reflect
chanc
chang
futur
reflect
term
expect
chang
volum
thi
understand
valu
requir
provid
essenti
iter
development—select
requir
iter
base
thi
evalu
characterist
complet
perhap
import
also
difficult
properti
establish
one
common
defect
requir
specif
incomplet
miss
requir
necessit
addit
modif
requir
later
develop
cycl
often
expens
incorpor
incomplet
also
major
sourc
disagr
client
supplier
howev
believ
complet
detail
may
desir
pursuit
complet
lead
specifi
detail
assumpt
may
commonli
understood
exampl
specifi
detail
common
oper
like
add
record
mean
specifi
detail
result
larg
requir
document
ha
problem
includ
make
valid
harder
hand
detail
given
chanc
develop
’
understand
differ
’
increas
lead
defect
softwar
complet
reason
goal
suffici
detail
project
hand
exampl
waterfal
model
follow
project
better
detail
specif
need
chang
minim
hand
iter
develop
feedback
possibl
opportun
chang
also
specif
le
detail
agil
approach
follow
complet
sought
onli
top-level
requir
detail
may
requir
written
form
elicit
requir
implement
togeth
perform
interfac
requir
design
constraint
call
nonfunct
requir
complet
specif
difficult
achiev
even
difficult
verifi
guidelin
differ
thing
sr
specifi
help
complet
specifi
requir
basic
issu
sr
must
address
function
requir
specifi
expect
behavior
system—which
output
produc
given
input
describ
relation-
ship
input
output
system
function
require-
ment
detail
descript
data
input
sourc
unit
measur
rang
valid
input
must
specifi
oper
perform
input
data
obtain
output
specifi
thi
includ
specifi
valid
check
input
output
data
paramet
affect
oper
equat
logic
oper
must
use
transform
input
correspond
output
exampl
formula
comput
output
specifi
import
part
specif
system
behavior
abnorm
situat
like
invalid
input
occur
mani
way
error
dure
comput
function
requir
must
clearli
state
system
situat
occur
specif
specifi
behavior
system
invalid
input
invalid
output
furthermor
behavior
situat
input
valid
normal
oper
perform
also
specifi
exampl
thi
situat
reserv
system
reserv
made
even
valid
request
avail
short
system
behavior
foreseen
input
foreseen
system
state
specifi
perform
requir
part
sr
specifi
perform
constraint
softwar
system
requir
relat
per-
formanc
characterist
system
must
clearli
specifi
two
type
perform
requir
static
dynam
static
requir
impos
constraint
execut
characterist
system
includ
requir
like
number
termin
support
number
simultan
user
support
number
file
system
ha
process
size
also
call
capac
requir
system
dynam
requir
specifi
constraint
execut
behavior
system
typic
includ
respons
time
throughput
constraint
system
respons
time
expect
time
complet
op-
erat
specifi
circumst
throughput
expect
number
oper
perform
unit
time
exampl
sr
may
specifi
number
transact
must
process
per
unit
time
respons
time
particular
command
accept
rang
differ
perform
paramet
specifi
well
accept-
abl
perform
normal
peak
workload
condit
requir
state
measur
term
require-
ment
respons
time
good
system
must
abl
process
transact
quickli
desir
becaus
impre-
cise
verifi
instead
statement
like
respons
time
command
x
le
one
second
90
%
time
transact
process
le
one
second
98
%
time
use
declar
perform
specif
number
factor
client
’
environ
may
restrict
choic
design
lead
design
constraint
factor
includ
standard
must
follow
resourc
limit
oper
environ
relia-
biliti
secur
requir
polici
may
impact
design
system
sr
identifi
specifi
constraint
exampl
standard
complianc
thi
specifi
requir
standard
system
must
follow
standard
may
includ
report
format
account
procedur
may
audit
requir
may
requir
log
oper
hardwar
limit
softwar
may
oper
ex-
ist
predetermin
hardwar
thu
impos
restrict
design
hardwar
limit
includ
type
machin
use
oper
system
avail
system
languag
support
limit
primari
secondari
storag
reliabl
fault
toler
fault
toler
requir
place
major
constraint
system
design
make
system
complex
expens
recoveri
requir
often
integr
part
detail
system
failur
occur
ensur
certain
properti
secur
secur
requir
becom
increasingli
import
requir
place
restrict
use
certain
command
control
access
data
provid
differ
kind
access
requir
differ
peopl
re-
quir
use
password
cryptographi
techniqu
maintain
log
activ
system
may
also
requir
proper
assess
secur
threat
proper
program
techniqu
use
tool
detect
flaw
like
buffer
overflow
extern
interfac
specif
part
interact
soft-
ware
peopl
hardwar
softwar
clearli
specifi
user
interfac
characterist
user
interfac
softwar
prod-
uct
specifi
user
interfac
becom
increasingli
import
must
given
proper
attent
preliminari
user
manual
creat
user
command
screen
format
explan
system
appear
user
feedback
error
messag
like
specif
requir
precis
verifi
statement
like
system
user
friendli
avoid
statement
like
com-
mand
longer
six
charact
command
name
reflect
function
perform
use
hardwar
interfac
requir
sr
specifi
logic
characterist
interfac
softwar
product
hard-
ware
compon
softwar
execut
exist
hardwar
pre-
determin
hardwar
characterist
hardwar
includ
memori
restrict
specifi
addit
current
use
load
charac-
terist
hardwar
given
interfac
requir
specifi
interfac
softwar
system
use
use
system
thi
includ
interfac
oper
system
applic
messag
content
format
interfac
specifi
requir
specifi
use
specif
languag
though
formal
notat
exist
specifi
specif
properti
system
natur
languag
often
use
specifi
requir
formal
languag
employ
often
use
specifi
particular
properti
specif
part
system
part
overal
sr
requir
system
state
use
formal
notat
natur
languag
includ
document
clear
concis
thi
necessari
properli
organ
requir
document
discu
organ
base
ieee
guid
softwar
requir
specif
53
ieee
standard
recogn
fact
differ
project
may
requir
requir
organ
differ
one
method
suitabl
project
provid
differ
way
structur
sr
first
two
section
sr
gener
structur
sr
given
figur
introduct
section
contain
purpos
scope
overview
etc.
requir
document
key
aspect
clarifi
motiv
busi
object
drive
thi
project
scope
project
next
section
give
overal
perspect
system—how
fit
larger
system
overview
requir
thi
system
detail
requir
mention
product
perspect
essenti
relationship
product
product
defin
product
independ
part
larger
product
princip
interfac
product
gener
abstract
descript
function
perform
product
given
schemat
diagram
show
gener
view
differ
function
relationship
often
use
similarli
typic
characterist
eventu
end
user
gener
constraint
also
specifi
agil
method
use
thi
may
suffici
initi
require-
ment
phase
approach
prefer
detail
requir
requir
implement
detail
requir
section
describ
detail
requir
develop
need
know
design
develop
system
thi
typic
largest
import
part
document
thi
section
differ
organ
suggest
standard
re-
quirement
organ
mode
oper
user
class
object
featur
stimulu
function
hierarchi
53
one
method
organ
spe-
cific
requir
first
specifi
extern
interfac
follow
func-
tional
requir
perform
requir
design
constraint
system
attribut
thi
structur
shown
figur
53
extern
interfac
requir
section
specifi
interfac
softwar
peopl
softwar
hardwar
system
user
interfac
clearli
veri
import
compon
specifi
human
interfac
system
plan
includ
screen
format
content
menu
command
structur
hardwar
interfac
logic
characterist
interfac
softwar
hardwar
softwar
run
specifi
essenti
ani
assumpt
softwar
make
hardwar
list
softwar
interfac
softwar
need
thi
softwar
run
specifi
along
interfac
commun
interfac
need
specifi
softwar
commun
entiti
machin
function
requir
section
function
capabl
system
describ
thi
organ
function
capabl
mode
oper
softwar
given
function
requir
requir
input
desir
output
process
requir
specifi
input
sourc
input
unit
measur
valid
rang
accuraci
etc.
specifi
specifi
process
oper
need
perform
input
data
ani
intermedi
data
produc
specifi
thi
includ
valid
check
input
sequenc
oper
respons
abnorm
situat
method
must
use
process
transform
input
correspond
output
perform
section
specifi
static
dynam
perfor-
manc
requir
factor
constrain
system
design
describ
perform
constraint
section
attribut
section
specifi
overal
attribut
system
ani
requir
cover
list
requir
design
constraint
specifi
constraint
impos
design
e.g.
secur
fault
toler
standard
use
case
employ
function
requir
section
sr
replac
use
case
descript
product
perspect
part
sr
may
provid
overview
summari
use
case
function
requir
often
form
core
requir
document
tradit
approach
specifi
function
specifi
function
system
provid
use
case
specifi
function
system
specifi
behavior
system
captur
interact
user
system
use
case
use
describ
busi
process
larger
busi
organ
deploy
softwar
could
describ
behavior
softwar
system
focu
describ
behavior
softwar
system
built
though
use
case
primarili
specifi
behavior
also
use
effect
analysi
later
discu
develop
use
case
discu
help
elicit
requir
also
use
case
drew
attent
use
part
object-ori
model
approach
propos
jacobson
56
due
thi
connect
object-ori
approach
use
case
sometim
view
part
object-ori
approach
softwar
develop
howev
gener
method
describ
interact
system
even
non-it
system
discuss
use
case
base
concept
process
discuss
24
softwar
system
case
whose
requir
uncov
may
use
mani
user
system
use
case
terminolog
actor
person
system
us
system
achiev
goal
note
actor
interact
achiev
goal
logic
entiti
repres
group
user
peopl
system
behav
similar
manner
differ
actor
repres
group
differ
goal
better
receiv
sender
actor
rather
gener
user
actor
system
messag
sent
user
receiv
user
primari
actor
main
actor
initi
use
case
uc
achiev
goal
whose
goal
satisfact
main
object
use
case
primari
actor
logic
concept
though
assum
primari
actor
execut
use
case
agent
may
actual
execut
behalf
primari
actor
exampl
vp
may
primari
actor
get
sale
growth
report
region
use
case
though
may
actual
execut
assist
consid
primari
actor
person
actual
us
outcom
use
case
main
consum
goal
time-driven
trigger
anoth
exampl
use
case
may
execut
behalf
primari
actor
thi
situat
report
gener
automat
time
note
howev
although
goal
primari
actor
drive
forc
behind
use
case
use
case
must
also
fulfil
goal
stake-
holder
might
thi
use
case
main
goal
use
case
describ
behavior
system
result
satisfact
goal
stakehold
although
use
case
may
driven
goal
primari
actor
exampl
use
case
withdraw
money
atm
ha
custom
primari
actor
normal
describ
entir
interac-
tion
custom
atm
howev
bank
also
stakehold
atm
system
goal
may
includ
step
log
money
given
onli
suffici
fund
account
amount
given
time
etc
satisfact
goal
also
shown
use
case
withdraw
money
atm
describ
interact
use
case
use
scenario
scenario
describ
set
action
perform
achiev
goal
specifi
con-
dition
set
action
gener
specifi
sequenc
conveni
way
express
text
though
actual
execut
ac-
tion
specifi
may
execut
parallel
differ
order
step
scenario
logic
complet
action
perform
either
actor
system
gener
step
action
actor
e.g.
enter
informa-
tion
logic
step
system
perform
progress
toward
achiev
goal
e.g.
valid
inform
deliv
inform
intern
state
chang
system
satisfi
goal
e.g.
log
transact
updat
record
use
case
alway
ha
main
success
scenario
describ
interac-
tion
noth
fail
step
scenario
succeed
may
mani
success
scenario
though
use
case
aim
achiev
goal
differ
situ-
ation
aris
system
actor
interact
may
permit
system
achiev
goal
fulli
situat
use
case
ha
extens
scenario
describ
system
behavior
step
main
scenario
complet
success
sometim
also
call
except
scenario
use
case
collect
success
extens
scenario
relat
goal
terminolog
use
case
summar
tabl
achiev
desir
goal
system
divid
subgoal
subgoal
may
achiev
system
may
also
treat
separ
use
case
execut
support
actor
may
anoth
system
exampl
suppos
verifi
user
withdraw
money
atm
authent
servic
use
interact
thi
servic
treat
separ
use
case
scenario
use
case
may
therefor
employ
anoth
use
case
perform
task
word
use
case
permit
hierarch
organ
evid
basic
system
model
use
case
assum
system
primarili
respond
request
actor
use
system
describ
interact
actor
system
system
be-
havior
specifi
behavior
function
specifi
key
advantag
thi
approach
use
case
focu
extern
behavior
therebi
cleanli
avoid
intern
design
dure
requir
someth
desir
easi
mani
model
approach
use
case
natur
textual
descript
repres
behavior
requir
system
thi
behavior
specif
captur
function
requir
system
therefor
use
case
form
complet
sr
form
part
complet
sr
seen
need
captur
requir
like
perform
design
constraint
though
detail
use
case
textual
diagram
use
sup-
plement
textual
descript
exampl
use
case
diagram
uml
provid
overview
use
case
actor
system
depen-
denci
uml
use
case
diagram
gener
show
use
case
system
ellips
show
primari
actor
use
case
stick
figur
connect
use
case
line
show
depend
use
case
arc
use
case
relationship
use
case
also
rep-
resent
howev
use
case
basic
textual
natur
diagram
play
limit
role
either
develop
specifi
use
case
discu
use
case
diagram
let
u
illustr
concept
use
case
also
use
explain
concept
relat
use
case
let
u
consid
small
on-lin
auction
system
built
univers
commun
call
univers
auction
system
ua
differ
member
univers
sell
buy
good
assum
separ
financi
subsystem
payment
made
buyer
seller
ha
account
thi
system
though
peopl
might
buy
sell
buyer
seller
separ
logic
actor
differ
goal
achiev
besid
auction
system
stake-
holder
actor
financi
system
anoth
let
u
first
consid
main
use
case
thi
system—
put
item
auction
make
bid
complet
auction.
use
case
given
figur
use
case
self-explanatori
thi
great
valu
use
cases—they
natur
story-lik
make
easi
understand
an-
alyst
layman
thi
help
consider
minim
commun
gap
develop
stakehold
point
use
case
worth
discuss
use
case
gener
number
refer
purpos
name
use
case
specifi
goal
primari
actor
henc
separ
line
specifi
goal
primari
actor
person
system—for
uc2
person
uc3
system
primari
actor
also
anoth
softwar
might
request
servic
precondit
use
case
specifi
system
ensur
befor
allow
use
case
initi
common
precondit
user
log
input
data
exist
file
data
structur
etc
oper
like
delet
may
item
exist
track
use
case
may
track
number
valid
worth
note
use
case
descript
list
contain
action
necessarili
tie
goal
primari
actor
exampl
last
step
uc
thi
action
clearli
need
current
bidder
hi
goal
howev
system
bidder
also
stakehold
thi
use
case
use
case
ha
ensur
goal
also
satisfi
similar
case
last
item
uc1
except
situat
also
fairli
clear
list
onli
obviou
one
mani
depend
goal
organiza-
tion
exampl
could
one
user
doe
complet
transact
failur
condit
occur
anywher
done
uc1
put
item
auction
primari
actor
seller
precondit
seller
ha
log
main
success
scenario
seller
post
item
categori
descript
pictur
etc
auction
system
show
past
price
similar
item
seller
seller
specifi
start
bid
price
date
auction
close
system
show
rate
seller
start
bid
current
bid
highest
bid
ask
buyer
make
bid
system
accept
bid
block
fund
bidder
account
system
updat
max
bid
price
inform
user
updat
record
item
bidder
doe
enough
fund
hi
account
system
cancel
bid
ask
user
get
fund
precondit
last
date
bid
ha
reach
select
highest
bidder
send
email
select
bidder
seller
inform
final
bid
price
send
email
bidder
also
transfer
seller
’
acct
commiss
amt
organ
’
acct
thi
case
ha
specifi
e.g.
record
clean
use
case
employ
use
case
perform
work
exampl
uc
block
necessari
fund
debit
bidder
’
account
credit
seller
’
action
need
perform
use
case
succeed
howev
perform
thi
use
case
treat
use
case
themselv
whose
behavior
ha
describ
elsewher
use
case
also
part
system
built
must
descript
requir
document
belong
system
proper
specif
obtain
financi
action
may
easili
outsid
scope
auction
system
describ
sr
howev
action
like
search
brows
like
part
thi
system
describ
sr
thi
allow
use
case
hierarch
organ
refin
approach
use
defin
higher-level
use
case
term
lower
servic
defin
lower
servic
howev
lower-level
use
case
proper
use
case
primari
actor
main
scenario
etc
primari
actor
often
primari
actor
higher-level
use
case
exampl
primari
actor
use
case
find
item
buyer
also
impli
list
scenario
new
use
case
new
actor
might
emerg
requir
document
use
case
mention
thi
one
need
specifi
part
system
built
besid
specifi
primari
actor
goal
success
except
scenario
use
case
also
specifi
scope
system
built
ha
mani
subsystem
often
case
sometim
system
use
case
may
actual
captur
behavior
subsystem
situat
better
specifi
scope
use
case
subsystem
exampl
use
case
system
may
log
even
though
thi
part
system
interact
user
system
describ
thi
use
case
limit
interact
login
authent
subsystem
login
authent
ha
identifi
subsystem
compon
better
specifi
scope
gener
busi
use
case
ha
enterpris
organ
scope
system
use
case
ha
system
built
scope
compon
use
case
scope
subsystem
uc
scope
enterpris
often
run
long
period
time
e.g.
process
applic
prospect
candid
use
case
may
requir
mani
differ
system
perform
differ
task
befor
uc
complet
exampl
process
applic
hr
depart
ha
thing
travel
depart
ha
arrang
travel
lodg
technic
depart
ha
conduct
interview
system
subsystem
use
case
gener
type
complet
one
rel
short
sit
three
use
case
abov
system
use
case
mention
befor
focu
describ
behavior
softwar
system
interest
build
howev
enterprise-level
uc
provid
context
system
oper
henc
sometim
may
use
describ
key
busi
process
summary-level
use
case
provid
context
system
design
built
exampl
let
u
describ
overal
use
case
perform
auction
possibl
use
case
given
figur
thi
use
case
one-sit
use
case
realli
busi
process
provid
context
earlier
use
case
though
thi
use
case
also
larg
done
system
probabl
part
system
built
frequent
use
case
may
complet
part
softwar
system
may
involv
manual
step
well
exampl
auction
item
use
case
deliveri
item
auction
wa
ensur
auction
site
step
thi
use
case
manual
step
use
case
may
also
specifi
post
condit
main
success
scenario
minim
guarante
provid
condit
exampl
use
case
atom
may
minim
guarante
matter
except
occur
either
entir
transact
complet
goal
achiev
system
state
noth
wa
done
atom
partial
result
ani
partial
chang
roll
back
uc
onli
document
requir
form
like
storytel
us
text
easi
natur
differ
stakehold
also
good
medium
discuss
brainstorm
henc
uc
also
use
requir
elicit
problem
analysi
develop
use
case
inform
formal
model
may
also
built
though
requir
uc
evolv
stepwis
refin
manner
step
ad
detail
thi
approach
allow
uc
present
differ
level
ab-
straction
though
ani
number
level
abstract
possibl
four
natur
level
emerg
actor
goal
actor-go
list
enumer
use
case
specifi
actor
goal
name
use
case
gener
goal
thi
tabl
may
extend
give
brief
descript
use
case
thi
level
use
case
togeth
specifi
scope
system
give
overal
view
doe
complet
function
assess
fairli
well
review
main
success
scenario
use
case
main
success
scenar-
io
provid
thi
level
main
scenario
system
behavior
use
case
specifi
thi
descript
review
ensur
interest
stakehold
met
use
case
deliv
desir
behavior
failur
condit
onc
success
scenario
list
possibl
failur
condit
identifi
thi
level
step
main
success
scenario
differ
way
step
fail
form
failur
condit
befor
decid
done
failur
condit
done
next
level
better
enumer
failur
condi-
tion
review
complet
failur
handl
thi
perhap
tricki
difficult
part
write
use
case
often
focu
much
main
function
peopl
pay
attent
failur
handl
determin
behavior
differ
failur
condit
often
identifi
new
busi
rule
new
actor
differ
level
use
differ
purpos
discuss
overal
function
capabl
system
actor
goal-level
descrip-
tion
veri
use
failur
condit
hand
veri
use
understand
extract
detail
requir
busi
rule
special
case
four
level
also
guid
analysi
activ
step-by-step
ap-
proach
analysi
employ
use
case
step
1
identifi
actor
goal
get
agreement
concern
stakehold
goal
actor-go
list
clearli
defin
scope
system
provid
overal
view
system
capabl
step
2
understand
specifi
main
success
scenario
uc
give
detail
main
function
system
interact
dis-
cussion
primari
mean
uncov
scenario
though
model
may
built
requir
dure
thi
step
analyst
may
uncov
complet
use
case
use
case
need
identifi
thi
case
list
use
case
expand
step
3
main
success
scenario
use
case
agre
upon
main
step
execut
specifi
failur
condit
examin
enumer
failur
condit
excel
method
uncov
special
situat
occur
must
handl
system
step
4
final
specifi
done
failur
condit
detail
handl
failur
scenario
requir
lot
effort
discuss
better
first
enumer
differ
failur
condit
get
detail
scenario
veri
often
decid
failur
scenario
mani
new
busi
rule
deal
scenario
uncov
though
explain
basic
step
develop
use
case
ani
step
analyst
may
go
back
earlier
step
dure
detail
analysi
new
actor
may
emerg
new
goal
new
use
case
may
un-
cover
use
use
case
analysi
also
interact
task
level
detail
use
case
one
answer
question
like
thi
actual
answer
alway
depend
project
situat
use
case
gener
good
suffici
detail
overwhelm
suffici
build
system
meet
qualiti
goal
exampl
small
colloc
team
build
system
quit
like
use
case
list
main
except
condit
give
key
step
scenario
suffic
hand
project
whose
develop
subcontract
organ
better
detail
use
case
write
use
case
gener
technic
write
rule
appli
use
simpl
gram-
mar
clearli
specifi
perform
step
keep
overal
scenario
simpl
possibl
also
write
step
simplic
better
combin
step
one
logic
step
make
sens
exampl
step
user
enter
hi
name
user
enter
hi
ssn
user
enter
hi
address
easili
combin
one
step
user
enter
person
inform
basic
aim
problem
analysi
obtain
clear
understand
need
client
user
exactli
desir
softwar
constraint
solut
frequent
client
user
understand
know
need
becaus
potenti
new
system
often
fulli
appreci
analyst
ensur
real
need
client
user
uncov
even
’
know
clearli
analyst
collect
organ
inform
client
’
organ
process
also
act
consult
play
activ
role
help
client
user
identifi
need
basic
principl
use
analysi
ani
complex
task
divid
conquer
partit
problem
subproblem
tri
understand
subproblem
relationship
subproblem
effort
understand
total
problem
concept
state
project
sometim
also
use
effect
partit
process
state
system
repres
condit
system
frequent
use
state
system
first
view
oper
one
sever
possibl
state
detail
analysi
perform
state
thi
approach
sometim
use
real-tim
softwar
process-control
softwar
project
system
defin
multipl
point
view
86
use
project
differ
viewpoint
system
defin
system
analyz
differ
perspect
differ
project
obtain
combin
form
analysi
complet
system
analyz
system
differ
perspect
often
easier
limit
focu
scope
studi
remaind
thi
section
discu
two
method
prob-
lem
analysi
goal
analysi
understand
problem
domain
analyst
must
familiar
differ
method
analysi
pick
approach
feel
best
suit
problem
hand
data
flow
diagram
also
call
data
flow
graph
commonli
use
dure
problem
analysi
data
flow
diagram
dfd
quit
gener
limit
problem
analysi
softwar
requir
specif
use
long
befor
softwar
engin
disciplin
began
dfd
veri
use
understand
system
effect
use
dure
analysi
dfd
show
flow
data
system
view
system
function
transform
input
desir
output
ani
complex
system
perform
thi
transform
singl
step
data
typic
undergo
seri
transform
befor
becom
output
dfd
aim
captur
transform
take
place
within
system
input
data
eventu
output
data
produc
agent
perform
transform
data
one
state
anoth
call
process
bubbl
thu
dfd
show
movement
data
differ
transform
process
system
process
shown
name
circl
data
flow
repres
name
arrow
enter
leav
bubbl
rectangl
repres
sourc
sink
net
origin
consum
data
sourc
sink
typic
outsid
main
system
studi
exampl
dfd
system
pay
worker
shown
figur
thi
dfd
one
basic
input
data
flow
weekli
timesheet
origin
sourc
worker
basic
output
paycheck
sink
also
worker
thi
system
first
employe
’
record
re-
triev
use
employe
id
contain
timesheet
employe
record
rate
payment
overtim
obtain
rate
regular
overtim
hour
timesheet
use
comput
pay
total
pay
determin
tax
deduct
comput
tax
deduct
inform
tax-rat
file
use
amount
tax
deduct
record
employe
compani
record
final
pay-
check
issu
net
pay
amount
paid
also
record
compani
record
convent
use
draw
thi
dfd
explain
ex-
ternal
file
employe
record
compani
record
tax
rate
shown
label
straight
line
need
multipl
data
flow
process
rep-
resent
data
flow
thi
symbol
repres
relationship
exampl
two
input
data
flow
b
process
mean
b
need
process
dfd
process
weekli
pay
data
flow
hour
pay
rate
need
shown
dfd
similarli
relationship
repres
+
data
flow
thi
dfd
abstract
descript
system
handl
payment
doe
matter
system
autom
manual
thi
diagram
could
veri
well
manual
system
comput
done
calcul
record
physic
folder
ledger
detail
minor
data
path
repres
thi
dfd
exampl
happen
error
weekli
timesheet
shown
thi
dfd
thi
done
avoid
get
bog
detail
construct
dfd
overal
system
detail
desir
dfd
refin
point
dfd
flowchart
dfd
repres
flow
data
flowchart
show
flow
control
dfd
doe
repres
procedur
inform
draw
dfd
one
must
get
involv
procedur
detail
procedur
think
must
conscious
avoid
exampl
consider
loop
decis
must
ignor
draw
dfd
design
ha
specifi
major
transform
path
data
flow
input
output
transform
perform
issu
draw
data
flow
graph
mani
system
larg
singl
dfd
describ
data
process
clearli
necessari
decomposit
abstract
mechan
use
system
dfd
hierarch
organ
help
progress
partit
analyz
larg
system
dfd
togeth
call
level
dfd
set
28
level
dfd
set
ha
start
dfd
veri
abstract
represen-
tation
system
identifi
major
input
output
major
process
system
often
befor
initi
dfd
context
diagram
may
drawn
entir
system
shown
singl
process
input
output
sink
sourc
process
refin
dfd
drawn
process
word
bubbl
dfd
expand
dfd
dure
refin
hierarchi
consist
import
net
input
output
dfd
process
input
output
process
higher-level
dfd
thi
refin
stop
bubbl
consid
atom
bubbl
easili
specifi
understood
point
dure
refine-
ment
though
net
input
output
preserv
refin
data
might
also
occur
unit
data
may
broken
compon
process
detail
dfd
process
drawn
process
decompos
data
decomposit
also
occur
dfd
data
flow
identifi
uniqu
name
name
chosen
convey
mean
data
howev
specifi
precis
structur
data
flow
data
dictionari
often
use
associ
data
dictionari
state
precis
structur
data
flow
dfd
defin
data
structur
regular
express
type
notat
use
specifi
structur
data
item
sequenc
composit
repres
+
select
vertic
bar
mean
one
repetit
entiti
relationship
diagram
erd
use
year
model
data
aspect
system
erd
use
model
data
system
data
item
relat
doe
cover
data
process
data
actual
manipul
chang
system
use
often
databas
design
repres
structur
databas
use
tool
analyz
softwar
system
employ
databas
er
model
form
logic
databas
design
easili
convert
initi
tabl
structur
relat
databas
er
diagram
two
main
concept
notat
repres
entiti
relationship
entiti
main
inform
holder
concept
system
entiti
view
type
describ
element
type
common
properti
entiti
repres
box
er
diagram
box
repres
instanc
concept
type
entiti
repres
entiti
essenti
equival
tabl
databas
sheet
spreadsheet
row
repres
instanc
thi
entiti
entiti
may
attribut
properti
concept
repres
attribut
view
column
databas
tabl
repres
ellipsi
attach
entiti
avoid
clutter
attribut
sometim
shown
er
diagram
ident
identifi
repres
set
label
box
diagram
box
repres
entiti
entiti
cours
exist
isol
relationship
reason
whi
exist
togeth
system
relationship
two
entiti
repres
line
connect
box
repres
entiti
line
two
box
mean
element
one
entiti
relat
element
entiti
vice
versa
thi
relationship
also
given
name
label
line
notat
name
relationship
mention
insid
diamond
exampl
relationship
studies-in
student
colleg
works-
employe
compani
owner
peopl
car
note
relationship
need
two
distinct
entiti
relationship
element
entiti
exampl
entiti
type
employe
relationship
supervisor
element
entiti
employe
er
diagram
specifi
properti
relationship
also
par-
ticular
specifi
relationship
option
necessari
mani
element
element
entiti
relat
thi
lead
mani
form
relationship
common
one
one-to-on
one
element
entiti
relat
exactli
one
element
entiti
one-to-mani
many-to-on
one
element
relat
mani
element
entiti
many-to-mani
one
element
entiti
relat
mani
element
entiti
b
one
element
entiti
b
relat
mani
element
entiti
variou
notat
express
natur
relationship
common
one
put
0
1
two
side
relationship
line
rep-
resent
cardin
relationship
thu
one-to-mani
relationship
1
put
one
end
n
put
end
line
relationship
reflect
properti
problem
domain
exampl
cours
ha
mani
student
student
take
mani
cours
lead
many-to-mani
relationship
cours
student
student
studi
exactli
one
colleg
though
colleg
ha
mani
student
lead
many-
to-on
relationship
student
colleg
depart
colleg
ha
exactli
one
head
one
person
head
onli
one
depart
lead
one-to-on
relationship
let
u
draw
er
diagram
univers
auction
system
use
case
discuss
earlier
use
case
describ
easili
identifi
entities—us
categori
item
bid
relationship
also
clear
user
sell
mani
item
item
ha
onli
one
seller
one-to-mani
relationship
sell
user
item
similarli
one-to-mani
relationship
item
bid
user
bid
categori
item
er
diagram
thi
shown
figur
er
diagram
easi
determin
initi
logic
structur
tabl
entiti
repres
tabl
relationship
determin
field
tabl
must
support
relationship
addit
field
attribut
exampl
er
diagram
auction
system
say
four
tabl
user
categori
item
bid
user
relat
item
one-to-mani
item
tabl
user-id
field
uniqu
identifi
user
sell
item
similarli
bid
tabl
must
user-id
identifi
user
place
bid
item-id
identifi
item
bid
ha
made
see
er
diagram
complementari
method
like
use
case
wherea
use
case
focu
natur
interact
function
er
diagram
focu
structur
entiti
use
use
case
due
complementari
natur
use
case
er
diagram
use
analyz
requir
system
may
contain
sr
develop
softwar
start
requir
document
also
use
determin
eventu
whether
deliv
softwar
system
accept
therefor
import
requir
specif
con-
tain
error
specifi
client
’
requir
correctli
furthermor
longer
error
remain
undetect
greater
cost
correct
extrem
desir
detect
error
requir
befor
design
develop
softwar
begin
due
natur
requir
specif
phase
lot
room
misunderstand
commit
error
quit
possibl
requir
specif
doe
accur
repres
client
’
need
basic
object
requir
valid
activ
ensur
sr
reflect
actual
requir
accur
clearli
relat
object
check
sr
document
good
qualiti
befor
discu
valid
let
u
consid
type
error
typic
occur
sr
mani
differ
type
error
possibl
com-
mon
error
occur
classifi
four
type
omiss
inconsist
incorrect
fact
ambigu
omiss
common
error
requir
thi
type
error
user
requir
simpli
includ
sr
omit
requir
may
relat
behavior
system
perfor-
manc
constraint
ani
factor
omiss
directli
affect
extern
complet
sr
anoth
common
form
error
requir
inconsist
inconsist
due
contradict
within
require-
ment
themselv
incompat
state
requir
actual
requir
client
environ
system
oper
third
common
requir
error
incorrect
fact
error
thi
type
occur
fact
record
sr
correct
fourth
common
error
type
ambigu
error
thi
type
occur
requir
multipl
mean
interpret
uniqu
project
collect
data
requir
error
27
effect
differ
method
tool
detect
requir
error
specif
data
process
applic
report
averag
total
250
error
detect
percentag
differ
type
error
wa
5
error
detect
requir
specif
a-
deal
real-tim
flight
control
softwar
report
total
80
error
detect
23
%
cleric
natur
remain
distribut
error
type
wa
though
distribut
error
differ
two
case
reflect
differ
applic
domain
error
detect
method
use
suggest
major
problem
besid
cleric
error
omiss
incorrect
fact
inconsist
ambigu
take
averag
two
data
tabl
show
four
class
error
veri
signific
good
fraction
error
belong
type
thi
impli
besid
improv
qualiti
sr
e.g.
cleric
error
valid
focu
uncov
type
error
requir
gener
textual
document
execut
inspect
review
emin
suitabl
requir
valid
consequ
inspect
sr
frequent
call
requir
review
common
method
valid
becaus
requir
specifica-
tion
formal
specifi
someth
origin
exist
inform
peopl
’
mind
requir
valid
must
involv
client
user
due
thi
requir
review
team
gener
consist
client
well
user
repres
requir
review
review
group
peopl
find
error
point
matter
concern
requir
specif
system
review
group
includ
author
requir
document
someon
understand
need
client
person
design
team
person
respons
maintain
requir
document
also
good
practic
includ
peopl
directli
involv
product
develop
like
softwar
qualiti
engin
although
primari
goal
review
process
reveal
ani
error
requir
discuss
earlier
review
process
also
use
consid
factor
affect
qualiti
testabl
readabl
dure
review
one
job
review
uncov
requir
subject
difficult
defin
criterion
test
requir
dure
review
review
team
must
go
requir
ani
error
discu
agre
natur
error
detail
inspect
process
may
use
discu
one
process
later
chapter
requir
review
probabl
effect
mean
detect
requir
error
data
5
a-33
%
total
requir
error
detect
detect
review
process
45
%
requir
error
detect
dure
design
phase
requir
document
use
refer
design
thi
clearli
suggest
requir
review
onli
substanti
fraction
error
detect
vast
major
remain
error
detect
soon
afterward
design
activ
though
requir
review
remain
commonli
use
viabl
mean
requir
valid
possibl
aris
special-
purpos
tool
model
analysi
use
exampl
require-
ment
written
formal
specif
languag
languag
specif
design
machin
process
possibl
tool
verifi
properti
requir
tool
focu
check
intern
con-
sistenc
complet
sometim
lead
check
extern
com-
plete
howev
tool
directli
check
extern
complet
tool
know
requir
ha
complet
omit
thi
reason
requir
review
need
even
re-
quirement
specifi
tool
formal
notat
main
goal
requir
process
produc
softwar
require-
ment
specif
sr
accur
captur
client
’
requir
form
basi
softwar
develop
valid
three
basic
activ
requir
process—problem
anal-
ysi
specif
valid
goal
analysi
understand
differ
aspect
problem
context
fit
within
client
’
organ
requir
specif
understood
problem
speci-
fie
written
produc
sr
requir
valid
done
ensur
requir
specifi
sr
inde
desir
key
desir
characterist
sr
correct
complet
consist
unambigu
verifi
rank
import
good
sr
specifi
function
softwar
need
support
perform
requir
system
design
constraint
exist
extern
interfac
use
case
popular
approach
specifi
function
requir
use
case
specifi
interact
system
primari
actor
initi
use
case
achiev
goal
use
case
ha
precondit
normal
scenario
well
mani
excep-
tional
scenario
therebi
provid
complet
behavior
system
develop
use
case
first
actor
goal
identifi
main
success
scenario
failur
condit
final
failur
handl
data
flow
diagram
system
analyz
point
view
data
flow
system
dfd
consist
process
data
flow
process
omiss
incorrect
fact
inconsist
ambigu
common
error
sr
valid
commonli
use
method
structur
group
review
requir
basic
goal
requir
activ
get
sr
ha
desir
properti
role
model
develop
sr
main
compon
sr
main
criterion
evalu
qualiti
sr
take
on-lin
social
network
site
choic
list
major
use
case
thi
system
along
goal
precondit
except
scenario
exercis
confer
manag
site
allow
author
submit
paper
program
chair
assign
review
final
paper
select
base
review
review
enter
review
think
includ
requir
review
team
plan
import
project
manag
activ
ha
two
ba-
sic
objectives—establish
reason
cost
schedul
qualiti
goal
project
draw
plan
deliv
project
goal
project
succe
meet
cost
schedul
qualiti
goal
without
project
goal
be-
ing
defin
possibl
even
declar
project
ha
succeed
without
detail
plan
real
monitor
control
project
possibl
often
project
rush
toward
implement
enough
effort
spent
plan
amount
technic
effort
later
compens
lack
care
plan
lack
proper
plan
sure
ticket
fail-
ure
larg
softwar
project
thi
reason
treat
project
plan
independ
chapter
note
also
cover
monitor
phase
project
manag
process
part
plan
project
monitor
also
part
plan
phase
input
plan
activ
requir
specif
mayb
architectur
descript
veri
detail
requir
document
essenti
plan
good
plan
import
requir
must
known
highli
desir
key
architectur
decis
taken
gener
two
main
output
plan
activ
overal
project
manag
plan
document
establish
project
goal
cost
schedul
qualiti
front
defin
plan
manag
risk
monitor
project
etc
detail
plan
often
refer
detail
project
schedul
specifi
task
need
perform
meet
goal
resourc
perform
schedul
p.
jalot
concis
introduct
softwar
engin
overal
plan
guid
develop
detail
plan
becom
main
guid
document
dure
project
execut
project
monitor
estim
effort
schedul
project
establish
project
goal
mileston
determin
team
size
need
execut
project
establish
qualiti
goal
project
prepar
qualiti
plan
identifi
high-prior
risk
threaten
success
project
plan
mitig
plan
monitor
project
use
measur
check
project
progress
per
plan
develop
detail
task
schedul
overal
estim
plan
task
done
follow
overal
goal
project
met
softwar
develop
project
overal
effort
schedul
estim
essenti
prerequisit
plan
project
estim
need
befor
develop
initi
establish
cost
schedul
goal
project
without
even
simpl
question
like
project
late
cost
overrun
project
like
complet
answer
practic
use
estim
bid
softwar
project
cost
schedul
estim
must
given
potenti
client
develop
contract
bulk
cost
softwar
develop
due
human
effort
cost
easili
determin
effort
use
suitabl
person-month
cost
valu
effort
schedul
estim
also
requir
determin
staf
level
project
dure
differ
phase
detail
plan
project
monitor
accuraci
effort
estim
clearli
depend
level
inform
avail
project
detail
infor-
mation
accur
estim
cours
even
inform
avail
accuraci
estim
depend
effec-
tive
accuraci
estim
procedur
model
employ
process
requir
specif
estim
approach
produc
estim
within
20
%
actual
effort
two-third
time
approach
consid
good
discu
two
commonli
use
approach
although
effort
project
function
mani
paramet
gener
agre
primari
factor
control
effort
size
project
larger
project
greater
effort
requir
top-
approach
util
thi
consid
effort
function
project
size
note
use
thi
approach
need
first
determin
natur
function
appli
function
need
estim
size
project
effort
estim
past
product
similar
project
known
use
estim
function
determin
effort
size
product
p
kloc/pm
effort
estim
project
size/p
person-
month
note
product
depend
size
project
larger
project
often
lower
product
thi
approach
work
onli
size
type
project
similar
set
project
product
p
wa
obtain
new
project
similar
product
obtain
follow
process
similar
wa
use
earlier
project
gener
function
determin
effort
size
commonli
use
form
b
constant
2
project
size
gener
kloc
size
could
also
anoth
size
measur
call
function
point
de-
termin
requir
valu
constant
organ
determin
regress
analysi
appli
data
project
perform
past
exampl
watson
felix
81
analyz
data
60
project
done
ibm
feder
system
divis
rang
4000
467,000
line
deliv
sourc
code
found
size
estim
thousand
deliv
line
code
kloc
total
effort
e
person-month
pm
given
equa-
tion
e
=
5.2
size
.91
construct
cost
model
cocomo
12
13
initi
estim
also
call
nomin
estim
equat
or-
ganic
project
e
=
3.9
size
.91
though
size
primari
factor
affect
cost
factor
also
effect
cocomo
model
determin
initi
estim
factor
incorpor
obtain
final
estim
thi
cocomo
us
set
1
exampl
attribut
requir
softwar
reliabl
product
complex
analyst
capabl
applic
experi
use
modern
tool
requir
develop
schedul
cost
driver
ha
rate
scale
rate
multipli
factor
provid
exampl
reliabl
rate
scale
veri
low
low
nomin
high
veri
high
multipli
factor
rate
.75
.88
1.00
1.15
1.40
respect
reliabl
requir
project
judg
low
multipli
factor
.75
judg
veri
high
factor
1.40
attribut
multipli
factor
differ
rate
shown
tabl
12
13
multipli
factor
1
eaf
final
effort
estim
e
obtain
multipli
initi
estim
eaf
word
adjust
made
size-bas
estim
use
rate
1
exampl
consid
system
built
support
auction
univers
use
case
thi
discuss
previou
chapter
use
case
requir
decid
system
compris
differ
modul
modul
expect
size
total
size
thi
softwar
estim
want
use
cocomo
estim
estim
valu
differ
cost
driver
suppos
expect
complex
system
high
programm
capabl
low
applic
experi
team
low
factor
nomin
rate
effort
adjust
factor
eaf
initi
effort
estim
project
obtain
relev
equa-
tion
overal
estim
estim
effort
requir
differ
phase
project
also
determin
thi
gener
done
use
effort
distribut
among
phase
percentag
total
effort
spent
phase
vari
type
size
project
obtain
data
similar
project
past
gener
distribut
effort
among
differ
phase
wa
discuss
previou
chapter
effort
distribut
suggest
cocomo
one
type
softwar
system
given
tabl
note
use
top-down
approach
estim
even
suitabl
function
need
estim
project
size
word
replac
problem
effort
estim
size
estim
one
may
ask
whi
directli
effort
estim
rather
size
estim
answer
size
estim
often
easier
direct
effort
estim
thi
mainli
due
fact
system
size
estim
size
compon
often
easier
ad
size
estim
compon
similar
properti
doe
hold
effort
estim
effort
develop
system
sum
effort
develop
compon
addit
effort
need
integr
activ
build
system
develop
compon
clearli
top-down
estim
work
well
import
good
estim
size
softwar
obtain
known
simpl
method
estim
size
accur
estim
softwar
size
best
way
may
get
much
detail
possibl
softwar
develop
awar
bia
estim
size
vari-
ou
compon
obtain
detail
use
size
estim
estim
like
closer
actual
size
final
softwar
somewhat
differ
approach
effort
estim
bottom-up
approach
thi
approach
project
first
divid
task
estim
differ
task
project
obtain
estim
differ
task
overal
estim
determin
overal
estim
project
deriv
estim
part
thi
type
approach
also
call
activity-bas
estim
essenti
thi
approach
size
complex
project
captur
set
task
project
ha
perform
bottom-up
approach
lend
direct
estim
effort
onc
project
partit
smaller
task
possibl
directli
estim
effort
requir
especi
task
rel
small
one
difficulti
thi
approach
get
overal
estim
task
enumer
risk
bottom-up
method
one
may
omit
activ
also
directli
estim
effort
overhead
task
project
manag
span
project
difficult
architectur
system
built
ha
develop
past
inform
effort
distribut
differ
phase
known
bottom-up
approach
need
complet
list
task
le
tediou
approach
possibl
describ
one
approach
use
commerci
organ
58
thi
approach
major
program
unit
modul
softwar
built
first
determin
program
unit
classifi
simpl
medium
complex
base
certain
criterion
classif
unit
averag
effort
code
unit
test
decid
thi
averag
code
effort
base
past
data
similar
project
guidelin
experi
peopl
onc
number
unit
three
categori
complex
known
estim
code
effort
program
select
total
code
effort
project
known
total
code
effort
effort
requir
phase
activ
project
determin
percentag
code
effort
thi
inform
past
perform
process
like
distribut
effort
differ
phase
thi
project
determin
thi
distribut
use
determin
effort
phase
activ
effort
estim
code
estim
total
effort
project
obtain
thi
approach
lend
judici
mixtur
experi
data
suitabl
past
data
avail
exampl
launch
new
type
project
one
estim
code
effort
use
experi
onc
natur
differ
type
unit
specifi
thi
estim
obtain
estim
activ
work
reason
standard
effort
distribut
thi
strategi
easili
account
activ
sometim
difficult
enumer
earli
consum
effort
budget
effort
miscellan
categori
procedur
estim
summar
follow
sequenc
step
identifi
modul
system
classifi
simpl
medium
complex
determin
averag
code
effort
simple/medium/complex
modul
get
total
code
effort
use
code
effort
differ
type
modul
count
use
effort
distribut
similar
project
estim
effort
task
total
effort
refin
estim
base
project-specif
factor
thi
procedur
us
judici
mixtur
past
data
form
dis-
tribut
effort
experi
programm
thi
approach
also
simpl
similar
mani
u
plan
ani
project
thi
reason
small
project
mani
peopl
find
thi
approach
natur
comfort
note
thi
method
classifi
program
categori
us-
ing
averag
code
effort
categori
use
onli
effort
estim
detail
schedul
project
manag
assign
unit
member
team
code
budget
time
activ
characterist
unit
taken
account
give
le
time
averag
establish
goal
effort
front
need
establish
goal
deliveri
schedul
effort
estim
person-month
may
tempt
pick
ani
project
durat
base
conveni
fix
suitabl
team
size
ensur
total
effort
match
estim
howev
well
known
person
month
fulli
interchang
softwar
project
person
month
interchang
arbitrarili
onli
task
project
done
parallel
commun
need
peopl
perform
task
thi
true
softwar
projects—ther
depend
task
e.g.
test
onli
done
code
done
person
perform
task
project
need
commun
perform
task
brook
ha
point
16
...
man
month
interchang
onli
activ
requir
commun
among
men
like
sow
wheat
reap
cotton
thi
even
approxim
true
softwar
howev
project
estim
effort
multipl
schedul
project
durat
inde
possibl
exampl
project
whose
effort
estim
5-month
total
schedul
schedul
schedul
approxim
schedul
5
similarli
one
would
execut
project
2
word
onc
effort
fix
flexibl
set
schedul
appropri
staf
project
thi
flexibl
unlimit
empir
data
also
suggest
simpl
equat
effort
schedul
fit
well
72
object
fix
reason
schedul
achiev
suit-
abl
number
resourc
assign
one
method
determin
overal
schedul
determin
function
effort
function
de-
termin
data
complet
project
use
statist
techniqu
like
fit
regress
curv
scatter
plot
obtain
plot
ef-
fort
schedul
past
project
thi
curv
gener
nonlinear
becaus
schedul
doe
grow
linearli
effort
mani
model
follow
thi
approach
2
12
ibm
feder
system
divis
found
total
durat
calendar
month
estim
=
4.1e.36
cocomo
equat
schedul
organ
type
softwar
=
2.5e.38
schedul
function
sole
effort
schedul
determin
thi
manner
essenti
guidelin
anoth
method
check
schedul
medium-s
project
rule
thumb
call
squar
root
check
58
thi
check
suggest
propos
schedul
around
squar
root
total
effort
person-
month
thi
schedul
met
suitabl
resourc
assign
project
exampl
effort
estim
50
person-month
schedul
thi
macro
estim
schedul
determin
schedul
major
mileston
project
determin
mileston
must
first
understand
manpow
ramp-up
usual
take
place
project
number
peopl
gain
util
softwar
project
tend
follow
rayleigh
curv
71
72
begin
end
peopl
need
project
peak
team
size
pt
need
somewher
near
middl
project
fewer
peopl
need
thi
occur
becaus
onli
peopl
need
use
initi
phase
requir
analysi
design
human
resourc
requir
peak
dure
code
unit
test
dure
system
test
integr
fewer
peopl
requir
often
staf
level
chang
continu
project
ap-
proxim
rayleigh
curv
use
assign
peopl
start
peak
team
dure
code
phase
leav
peopl
integr
system
test
consid
design
analysi
build
test
three
major
phase
manpow
ramp-up
project
typic
resembl
function
shown
figur
58
eas
schedul
particularli
smaller
project
often
requir
peopl
assign
togeth
around
start
project
thi
approach
lead
peopl
unoccupi
start
toward
end
thi
slack
time
often
use
support
project
activ
like
train
document
given
effort
estim
phase
determin
durat
phase
know
manpow
ramp-up
three
major
phase
percentag
schedul
consum
build
phase
smaller
percentag
effort
consum
becaus
thi
phase
involv
peopl
similarli
percentag
schedul
consum
design
test
phase
exce
effort
percentag
exact
schedul
depend
plan
manpow
ramp-up
mani
resourc
use
effect
phase
project
gener
speak
design
requir
quarter
schedul
build
consum
half
integr
system
test-
ing
consum
remain
quarter
cocomo
give
19
%
design
62
%
program
18
%
integr
set
goal
effort
schedul
goal
third
key
dimens
project—quality—ne
defin
howev
unlik
schedul
effort
quantifi
qualiti
goal
set
project
plan
meet
much
harder
effort
schedul
goal
easili
check
detail
plan
meet
goal
e.g.
see
last
task
end
befor
target
date
sum
total
effort
task
le
overal
effort
goal
qualiti
even
set
goal
term
expect
deliv
defect
densiti
easi
plan
achiev
thi
goal
check
plan
meet
goal
henc
often
qualiti
goal
specifi
term
accept
criteria—
deliv
softwar
final
work
situat
test
case
accept
criterion
may
even
accept
criterion
number
defect
found
dure
accept
test
exampl
n
defect
uncov
accept
test
qualiti
plan
set
quality-rel
activ
project
plan
achiev
qualiti
goal
plan
qualiti
let
u
first
understand
defect
inject
remov
cycl
defect
determin
qualiti
final
deliv
softwar
softwar
develop
highli
people-ori
activ
henc
error-pron
softwar
project
start
defect
soft-
ware
contain
defect
defect
inject
softwar
built
dure
differ
phase
project
dure
transform
user
need
softwar
satisfi
need
defect
inject
transform
activ
undertaken
inject
stage
primarili
requir
specif
high-level
design
detail
design
cod-
ing
ensur
high-qual
softwar
deliv
defect
remov
qualiti
control
qc
activ
qc
activ
defect
re-
moval
includ
requir
review
design
review
code
review
unit
test
integr
test
system
test
accept
test
etc
figur
show
process
defect
inject
remov
final
goal
deliv
softwar
low
defect
densiti
ensur
qualiti
revolv
around
two
main
theme
reduc
defect
inject
increas
defect
remov
first
often
done
standard
methodolog
follow
good
process
etc.
help
reduc
chanc
error
project
personnel
specif
techniqu
defect
prevent
also
qualiti
plan
therefor
focu
mostli
plan
suitabl
qualiti
control
task
remov
defect
review
test
two
common
qc
activ
util
project
wherea
review
structur
human-ori
process
test
process
execut
softwar
part
attempt
identifi
de-
fect
common
approach
qualiti
plan
project
specifi
qc
activ
perform
project
suitabl
guidelin
perform
qc
task
chanc
meet
qual-
iti
goal
high
dure
project
execut
activ
carri
accord
defin
procedur
thi
approach
use
ensur
qualiti
make
quantit
claim
quit
hard
quantit
assess
qualiti
process
metrics-bas
analysi
necessari
howev
advanc
topic
beyond
scope
thi
book
inde
mani
organ
henc
ensur
qualiti
relianc
primarili
appli
suitabl
qc
techniqu
right
place
process
use
experi
ensur
suffici
qc
task
done
project
henc
qualiti
plan
project
larg
specif
qc
task
done
process
guidelin
use
perform
qc
task
choic
depend
natur
goal
constraint
project
typic
qc
task
schedul
task
detail
schedul
project
exampl
specifi
document
inspect
part
code
inspect
level
test
perform
plan
consider
enhanc
expect
defect
level
expect
found
differ
qualiti
control
task
also
mentioned—thes
aid
monitor
qualiti
project
proce
softwar
project
complex
undertak
unforeseen
event
may
advers
impact
project
’
abil
meet
cost
schedul
qualiti
goal
risk
manag
attempt
minim
chanc
failur
caus
unplan
event
aim
risk
manag
avoid
get
project
risk
minim
impact
risk
project
undertaken
risk
probabilist
event—it
may
may
occur
thi
reason
frequent
optimist
tendenc
simpli
see
risk
hope
occur
social
organiz
factor
also
may
stigmat
risk
discourag
clear
identif
19
thi
kind
attitud
get
project
troubl
risk
event
materi
someth
like
happen
larg
project
surprisingli
risk
manag
consid
first
among
best
practic
manag
larg
softwar
project
17
first
came
forefront
boehm
’
tutori
risk
manag
11
sinc
sever
book
target
risk
manag
softwar
18
45
risk
defin
exposur
chanc
injuri
loss
risk
impli
possibl
someth
neg
may
happen
context
softwar
project
neg
impli
advers
effect
cost
qualiti
schedul
risk
manag
area
tri
ensur
impact
risk
cost
qualiti
schedul
minim
risk
manag
consid
deal
possibl
actual
occurr
event
regular
commonli
expect
probabilist
commonli
expect
event
peopl
go
leav
requir
chang
handl
normal
project
manag
sens
risk
manag
begin
normal
project
manag
end
deal
event
infrequ
somewhat
control
project
manag
major
impact
project
project
risk
idea
risk
manag
minim
possibl
risk
materi
possibl
minim
effect
risk
actual
materi
exampl
construct
build
risk
build
may
later
collaps
due
earthquak
possibil-
iti
earthquak
risk
build
larg
residenti
complex
potenti
cost
case
earthquak
risk
materi
enorm
thi
risk
reduc
shift
zone
earthquake-pron
altern
thi
accept
effect
thi
risk
materi
minim
suitabl
construct
build
approach
taken
japan
california
time
small
dump
ground
construct
approach
might
follow
financi
impact
actual
earthquak
build
low
doe
warrant
special
measur
clear
risk
manag
ha
deal
identifi
undesir
event
occur
probabl
occur
loss
undesir
event
doe
occur
onc
thi
known
strategi
formul
either
reduc
probabl
risk
materi
re-
duce
effect
risk
materi
risk
manag
revolv
around
risk
assess
risk
control
goal
risk
assess
priorit
risk
attent
resourc
focus
riski
item
risk
identif
first
step
risk
assess
identifi
differ
risk
particular
project
risk
project-depend
identifi
exercis
envis
go
wrong
method
aid
risk
identif
includ
checklist
possibl
risk
survey
meet
brainstorm
review
plan
process
work
product
45
checklist
frequent
occur
risk
probabl
common
tool
risk
identification—most
organ
prepar
list
commonli
occur
risk
project
prepar
survey
previou
project
list
form
start
point
identifi
risk
current
project
base
survey
experienc
project
manag
boehm
11
ha
produc
list
top
10
risk
item
like
compromis
success
softwar
project
figur
show
risk
along
techniqu
prefer
manag
manag
risk
top
risk
commerci
softwar
organ
found
58
top-rank
risk
item
personnel
shortfal
thi
involv
fewer
peopl
necessari
peopl
specif
skill
project
might
requir
way
manag
thi
risk
get
top
talent
possibl
match
need
project
skill
avail
personnel
adequ
train
along
key
personnel
critic
area
project
also
reduc
thi
risk
second
item
unrealist
schedul
budget
happen
veri
frequent
due
busi
reason
veri
common
high-level
manage-
ment
impos
schedul
softwar
project
base
char-
acterist
project
unrealist
underestim
may
also
happen
due
inexperi
optim
next
item
relat
requir
project
run
risk
develop
wrong
softwar
requir
analysi
done
properli
develop
begin
earli
similarli
often
improp
user
interfac
may
develop
thi
requir
extens
rework
user
interfac
later
softwar
benefit
obtain
becaus
user
reluct
use
gold
plate
refer
ad
featur
softwar
onli
margin
use
thi
add
unnecessari
risk
project
becaus
gold
plate
consum
resourc
time
littl
return
risk
identif
mere
identifi
undesir
event
might
take
place
dure
project
i.e.
enumer
unforeseen
event
might
occur
doe
specifi
probabl
risk
materi
impact
project
risk
inde
materi
henc
next
task
risk
analysi
priorit
risk
analysi
probabl
occurr
risk
ha
estim
along
loss
occur
risk
doe
materi
thi
often
done
discuss
use
experi
understand
situat
though
structur
approach
also
exist
onc
probabl
risk
materi
loss
due
materializa-
tion
differ
risk
analyz
priorit
one
approach
priorit
concept
risk
exposur
11
sometim
call
risk
impact
defin
relationship
prob
uo
probabl
risk
materi
i.e.
undesir
outcom
loss
uo
total
loss
incur
due
unsatisfactori
outcom
loss
onli
direct
financi
loss
might
incur
also
ani
loss
term
credibl
futur
busi
loss
properti
life
expect
valu
loss
due
particular
risk
risk
priorit
use
higher
higher
prioriti
risk
item
main
object
risk
manag
identifi
top
risk
item
focu
onc
project
manag
ha
identifi
priorit
risk
top
risk
easili
identifi
question
becom
know
risk
valu
onli
prepar
plan
consequ
minimal—that
basic
goal
risk
manag
one
obviou
strategi
risk
avoid
entail
take
action
avoid
risk
altogeth
like
earlier
exampl
shift
build
site
zone
earthquake-pron
risk
avoid
might
possibl
risk
strategi
perform
action
either
reduc
probabl
risk
materi
reduc
loss
due
risk
materi
call
risk
mitig
step
decid
mitig
step
take
list
commonli
use
risk
mitig
step
variou
risk
veri
use
risk
mention
figur
suitabl
risk
mitig
step
also
given
note
unlik
risk
assess
larg
analyt
exercis
risk
mitig
compris
activ
measur
perform
minim
impact
risk
word
select
risk
mitig
step
intellectu
exercis
risk
mitig
step
must
execut
monitor
ensur
need
action
execut
properli
must
incorpor
detail
project
schedul
risk
priorit
consequ
plan
base
risk
percept
time
risk
analysi
perform
becaus
risk
probabilist
event
frequent
depend
extern
factor
threat
due
risk
may
chang
time
factor
chang
clearli
risk
percept
may
also
chang
time
furthermor
risk
mitig
step
undertaken
may
affect
risk
percept
thi
dynam
impli
risk
project
treat
static
must
monitor
reevalu
period
henc
addit
monitor
progress
plan
risk
mitig
step
project
must
period
revisit
risk
percept
modifi
risk
mitig
plan
need
risk
monitor
activ
monitor
statu
variou
risk
control
activ
one
simpl
approach
risk
monitor
analyz
risk
afresh
major
mileston
chang
plan
need
though
concept
risk
exposur
rich
simpl
practic
way
risk
plan
simpli
categor
risk
impact
level
use
priorit
thi
approach
use
mani
organ
discu
simpl
approach
use
organ
58
thi
approach
probabl
risk
occur
categor
low
medium
high
risk
impact
also
classifi
low
medium
high
rate
follow
simpl
method
risk
priorit
specifi
risk
rate
probabl
happen
low
medium
high
risk
ass
impact
project
low
medium
high
rank
risk
base
probabl
effect
project
exampl
high-prob
high-impact
item
higher
rank
risk
item
medium
probabl
high
impact
case
conflict
use
judgment
select
top
risk
item
mitig
track
exampl
thi
approach
given
tabl
show
variou
rate
risk
mitig
step
58
see
risk
manag
plan
essenti
thi
tabl
veri
brief
focus
moni-
tore
risk
one
way
redo
risk
manag
plan
mileston
give
attent
risk
list
project
plan
dure
risk
mon-
itor
mileston
repriorit
may
occur
mitig
plan
remaind
project
may
chang
depend
current
situat
impact
mitig
step
taken
earlier
project
manag
plan
mere
document
use
guid
execut
project
even
good
plan
useless
unless
properli
execut
execut
properli
driven
plan
unless
monitor
care
actual
perform
track
plan
monitor
requir
measur
made
ass
situat
project
measur
taken
dure
project
execut
must
plan
care
regard
measur
measur
measur
henc
measur
plan
key
element
project
plan
addit
measur
data
analyz
report
must
also
plan
advanc
avoid
situat
collect
data
know
without
care
plan
data
collect
analysi
neither
like
happen
thi
section
discu
issu
measur
project
track
basic
purpos
measur
project
provid
data
project
manag
project
’
current
state
effect
monitor
control
project
ensur
project
goal
met
project
goal
establish
term
softwar
deliv
cost
schedul
qualiti
monitor
state
project
size
effort
schedul
defect
basic
measur
need
43
75
schedul
one
import
metric
becaus
project
driven
schedul
deadlin
onli
monitor
actual
schedul
properli
ass
project
time
delay
howev
easi
measur
becaus
calendar
time
usual
use
plan
effort
main
resourc
consum
softwar
project
consequ
track
effort
key
activ
dure
monitor
essenti
evalu
whether
project
execut
within
budget
effort
data
type
timesheet
system
need
person
work
project
enter
amount
time
spent
project
better
monitor
effort
spent
variou
task
log
separ
gener
effort
record
on-lin
system
like
weekli
activ
report
system
57
allow
person
record
amount
time
spent
particular
activ
project
ani
point
total
effort
activ
aggreg
becaus
defect
direct
relationship
softwar
qualiti
track
defect
critic
ensur
qualiti
larg
softwar
project
may
includ
thousand
defect
found
differ
peopl
differ
stage
keep
track
defect
found
statu
defect
must
log
closur
track
defect
found
log
monitor
focu
mani
defect
found
far
percentag
defect
still
open
issu
defect
track
consid
one
best
practic
manag
project
17
size
anoth
fundament
metric
becaus
repres
progress
toward
deliv
desir
function
mani
data
exampl
deliv
de-
fect
densiti
normal
respect
size
size
deliv
softwar
measur
term
loc
determin
use
regular
editor
line
counter
function
point
gross
level
number
modul
number
featur
might
suffic
effect
monitor
project
must
plan
collect
measure-
ment
often
organ
provid
tool
polici
support
record
thi
basic
data
avail
project
manag
track
main
goal
project
manag
monitor
project
get
visibl
project
execut
determin
whether
ani
action
need
taken
ensur
project
goal
met
project
goal
term
effort
schedul
qualiti
focu
monitor
aspect
differ
level
monitor
might
done
project
three
main
level
monitor
activ
level
statu
report
mileston
analysi
measur
taken
project
employ
monitor
activity-level
monitor
ensur
activ
detail
schedul
ha
done
properli
within
time
thi
type
monitor
may
done
daili
project
team
meet
project
manag
check
statu
task
schedul
complet
day
complet
task
often
mark
100
%
complet
detail
schedule—thi
use
tool
like
microsoft
project
track
percentag
complet
overal
project
higher-level
task
thi
monitor
ensur
project
continu
proceed
per
plan
schedul
statu
report
often
prepar
weekli
take
stock
ha
happen
need
done
statu
report
typic
contain
summari
activ
success
complet
sinc
last
statu
report
ani
activ
delay
ani
issu
project
need
attent
everyth
place
next
week
purpos
thi
ensur
project
proceed
per
plan
schedul
mileston
analysi
done
mileston
everi
week
mileston
far
apart
elabor
analysi
actual
versu
estim
effort
schedul
often
includ
mileston
analysi
deviat
signific
may
impli
project
may
run
troubl
might
meet
object
thi
situat
call
project
manag
understand
reason
variat
appli
correct
prevent
action
necessari
defect
found
differ
qualiti
control
task
number
defect
fix
may
also
report
thi
report
monitor
progress
project
respect
goal
activ
discuss
far
result
project
manag
plan
document
establish
project
goal
effort
schedul
qualiti
defin
approach
risk
manag
ensur
qualiti
project
monitor
thi
overal
plan
ha
translat
detail
action
plan
follow
project
follow
lead
success
project
need
develop
detail
plan
schedul
follow
thi
plan
lead
deliv
softwar
expect
qualiti
within
cost
schedul
wherea
overal
plan
document
typic
prepar
start
project
rel
static
detail
plan
dynam
document
reflect
current
plan
project
detail
plan
assign
work
item
individu
member
team
detail
schedul
major
phase
identifi
dure
effort
schedul
estim
broken
small
schedul
activ
hierarchi-
cal
manner
exampl
detail
design
phase
broken
task
develop
detail
design
modul
review
detail
design
fix
defect
found
detail
task
project
manag
estim
time
requir
complet
assign
suitabl
resourc
overal
schedul
met
overal
effort
also
match
addit
engin
task
outcom
develop
process
qc
task
identifi
qualiti
plan
monitor
activ
defin
monitor
plan
risk
mitig
activ
also
schedul
level
refin
project
manag
determin
effort
overal
task
detail
schedul
check
effort
estim
thi
detail
schedul
consist
overal
schedul
effort
estim
detail
schedul
must
chang
found
best
detail
schedul
match
mileston
effort
schedul
earlier
estim
must
revis
thu
schedul
iter
process
gener
project
manag
refin
task
level
lowest-level
activ
schedul
occupi
day
singl
resourc
activ
relat
task
project
manag
co-
ordin
databas
manag
configur
manag
may
also
list
schedul
even
though
activ
le
direct
effect
de-
termin
schedul
becaus
ongo
task
rather
schedul
activ
nevertheless
consum
resourc
henc
often
includ
project
schedul
rare
project
manag
complet
detail
schedul
entir
project
onc
onc
overal
schedul
fix
detail
phase
may
onli
done
start
phase
detail
schedul
tool
like
microsoft
project
spreadsheet
veri
use
lowest-level
activ
project
manag
specifi
effort
durat
start
date
end
date
resourc
depend
activ
due
either
inher
depend
exampl
conduct
unit
test
plan
program
onli
ha
code
resource-
relat
depend
resourc
assign
two
task
may
also
specifi
tool
overal
effort
schedul
higher-level
task
determin
detail
project
schedul
never
static
chang
may
need
becaus
actual
progress
project
may
differ
wa
plan
becaus
newer
task
ad
respons
chang
request
becaus
unforeseen
situat
chang
done
need
aris
final
schedul
frequent
maintain
use
suitabl
tool
often
live
project
plan
document
dure
project
plan
must
chang
addit
activ
must
done
decis
made
chang
must
reflect
detail
schedul
thi
reflect
task
actual
plan
perform
henc
detail
schedul
becom
main
document
track
activ
schedul
note
onli
number
resourc
decid
dure
overal
project
plan
howev
detail
schedul
done
effec-
tive
onli
actual
assign
peopl
ha
done
task
assign
need
inform
capabl
team
member
discus-
sion
abov
implicitli
assum
project
’
team
led
project
manag
doe
plan
task
assign
thi
form
hi-
erarch
team
organ
fairli
common
wa
earlier
call
chief
programm
team
exampl
consid
exampl
project
58
overal
effort
estim
thi
project
50-day
2-month
thi
estim
wa
done
use
bottom-up
approach
discuss
earlier
custom
gave
approxim
5
..
becaus
thi
squar
root
effort
person-month
thi
schedul
wa
accept
henc
defin
effort
schedul
goal
project
mileston
determin
use
effort
estim
phase
estim
number
resourc
avail
tabl
show
high-
level
schedul
project
thi
project
us
rup
process
initi
requir
design
done
two
iter
develop
done
three
iter
overal
project
durat
mileston
140
day
thi
high-level
schedul
outcom
overal
project
plan
suitabl
assign
resourc
detail
plan
detail
schedul
task
broken
schedul
activ
thi
way
schedul
also
becom
checklist
task
project
mention
abov
thi
explod
top-level
activ
done
fulli
start
rather
take
place
mani
time
dure
project
tabl
show
part
detail
schedul
construction-iter
activ
tabl
specifi
activ
short
name
modul
activ
contribut
effort
durat
may
also
specifi
task
much
complet
given
%
complet
column
thi
inform
use
activ
track
detail
schedul
also
specifi
resourc
task
assign
specifi
initi
person
sometim
predecessor
activ
activ
upon
task
depend
also
specifi
thi
inform
help
determin
critic
path
critic
resourc
thi
project
final
total
32
project
plan
serf
two
purpos
set
overal
goal
expect
project
overal
approach
manag
project
schedul
task
done
goal
met
overal
plan
effort
schedul
estim
done
establish
cost
schedul
goal
project
well
key
mileston
project
qualiti
plan
risk
manag
plan
establish
approach
achiev
qualiti
goal
ensur
project
doe
fail
face
risk
detail
schedul
task
achiev
mileston
identifi
schedul
execut
specif
team
member
overal
schedul
effort
differ
mileston
met
top-down
approach
estim
effort
project
effort
estim
size
estim
may
refin
use
char-
acterist
project
effort
differ
phase
determin
overal
effort
use
effort
distribut
data
cocomo
one
model
us
thi
approach
bottom-up
approach
estim
modul
built
identifi
first
use
averag
effort
code
modul
overal
code
effort
determin
code
effort
effort
phase
overal
project
determin
use
effort
distribut
data
flexibl
exist
set
schedul
goal
project
overal
schedul
determin
function
effort
adjust
meet
project
need
constraint
onc
reason
schedul
chosen
staf
requir
project
determin
use
project
’
effort
schedul
mileston
determin
effort
estim
effect
team
size
differ
phase
estim
schedul
effort
schedul
goal
project
establish
set
measur
qualiti
goal
project
harder
qualiti
goal
set
term
perform
dure
accept
test
qualiti
plan
consist
qualiti
control
task
perform
project
achiev
qualiti
goal
project
risk
meet
project
goal
presenc
risk
requir
proper
risk
manag
risk
event
may
may
occur
occur
neg
impact
project
risk
priorit
base
expect
loss
risk
combin
probabl
risk
total
possibl
loss
due
risk
materi
high-prior
risk
activ
plan
dure
normal
project
execut
risk
materi
effect
minim
progress
project
need
monitor
use
suitabl
measure-
ment
correct
action
taken
need
measur
commonli
use
monitor
actual
schedul
effort
consum
defect
found
size
product
statu
report
mileston
report
actual
vs.
estim
effort
schedul
activ
got
miss
defect
found
far
risk
suffic
effect
monitor
perform
project
respect
plan
overal
project
manag
plan
document
contain
effort
sched-
ule
qualiti
goal
plan
qualiti
monitor
risk
manage-
ment
set
overal
context
execut
overal
schedul
broken
detail
schedul
task
done
meet
goal
constraint
task
assign
specif
team
member
identifi
start
end
date
sched-
ule
ha
consist
overal
schedul
effort
estim
task
plan
qualiti
monitor
risk
manag
also
schedul
detail
schedul
thi
detail
schedul
lay
path
project
follow
order
achiev
project
object
live
project
plan
document
ani
chang
project
plan
must
reflect
suitabl
detail
schedul
role
effort
estim
project
whi
import
thi
estim
earli
architectur
propos
system
ha
design
specifi
major
compon
system
sourc
code
similar
compon
avail-
abl
organ
’
repositori
method
use
estim
suppos
organ
plan
use
cocomo
effort
estim
want
use
onli
three
cost
drivers—product
complex
programm
capabl
develop
schedul
thi
situat
initi
estim
much
final
estim
vari
whi
combin
peopl
month
consist
effort
estim
feasibl
custom
ask
complet
project
whose
effort
estim
e
time
decid
whether
accept
thi
schedul
group
student
project
done
semest
cours
list
major
risk
typic
project
face
risk
mitig
strategi
high-prior
risk
suppos
make
detail
schedul
project
whose
effort
schedul
estim
variou
mileston
done
project
plan
check
detail
schedul
consist
overal
plan
ani
complex
system
compos
subsystem
interact
control
system
design
system
provid
expect
behavior
design
system
therefor
logic
approach
identifi
sub-
system
compos
system
interfac
subsystem
rule
interact
subsystem
thi
softwar
architectur
aim
softwar
architectur
rel
recent
area
softwar
system
increasingli
becom
distribut
complex
architectur
becom
import
step
build
system
due
wide
rang
option
avail
system
may
configur
connect
care
de-
sign
architectur
becom
veri
import
dure
architectur
design
choic
like
use
type
middlewar
type
back-
end
databas
type
server
type
secur
compon
made
architectur
also
earliest
place
properti
like
reliabl
perform
evalu
system
capabl
increasingli
becom
import
key
role
architectur
descript
play
softwar
project
multipl
architectur
view
use
specifi
differ
struc-
tural
aspect
system
built
compon
connector
architectur
system
express
p.
jalot
concis
introduct
softwar
engin
differ
style
propos
compon
connector
view
use
design
architectur
propos
system
architectur
gener
speak
architectur
system
provid
veri
high
level
view
part
system
relat
form
whole
system
architectur
partit
system
logic
part
part
comprehend
independ
describ
system
term
part
relationship
part
ani
complex
system
partit
mani
differ
way
pro-
vide
use
view
differ
type
logic
part
hold
true
softwar
system—ther
uniqu
structur
system
describ
architectur
mani
possibl
structur
due
thi
possibl
multipl
structur
one
wide
accept
definit
softwar
architectur
softwar
architectur
system
structur
structur
system
compris
softwar
el-
ement
extern
visibl
properti
element
relationship
among
6
thi
definit
impli
element
architectur
onli
interest
abstract
specifi
properti
element
assum
exist
need
specifi
relationship
detail
properti
support
need
architectur
thi
import
capabl
allow
architectur
descript
repre-
sent
complex
system
succinct
form
easili
comprehend
architectur
descript
system
therefor
describ
differ
structur
system
next
natur
question
whi
team
build
softwar
system
custom
interest
creat
document
structur
propos
system
import
us
softwar
architectur
descript
play
6
23
54
understand
commun
architectur
descript
primar-
ili
commun
architectur
variou
stakehold
in-
clude
user
use
system
client
commiss
system
builder
build
system
cours
archi-
tect
thi
descript
stakehold
gain
understand
macro
properti
system
system
intend
ful-
fill
function
qualiti
requir
descript
provid
common
languag
stakehold
also
becom
vehicl
negoti
agreement
among
stakehold
may
conflict-
ing
goal
reus
softwar
engin
world
ha
long
time
work
toward
disciplin
softwar
assembl
part
develop
differ
peopl
avail
use
one
want
build
softwar
product
exist
compon
may
reus
architectur
becom
key
point
reus
high-
est
level
decid
architectur
ha
chosen
manner
compon
reus
fit
properli
togeth
compon
may
develop
architectur
also
facili-
tate
reus
among
product
similar
build
product
famili
common
part
differ
similar
product
reus
architectur
help
specifi
fix
variabl
differ
product
help
minim
set
variabl
element
differ
product
share
softwar
part
maximum
veri
hard
achiev
thi
type
reus
detail
level
construct
evolut
architectur
partit
system
part
architecture-provid
partit
natur
use
construct
system
also
requir
system
broken
part
differ
team
individu
separ
work
differ
part
suitabl
partit
architectur
provid
project
part
need
built
build
system
almost
definit
part
specifi
architectur
rel
indepen-
dent
depend
part
come
relationship
built
independ
analysi
highli
desir
import
properti
be-
havior
system
determin
befor
system
actual
built
thi
allow
design
consid
altern
select
one
best
suit
need
mani
engin
disciplin
use
model
analyz
design
product
cost
reliabl
perform
etc
archi-
tectur
open
possibl
softwar
also
possibl
though
method
fulli
develop
standard
yet
analyz
predict
properti
system
built
architectur
exam-
ple
reliabl
perform
system
analyz
analysi
help
determin
whether
system
meet
qualiti
perform
requir
need
done
meet
requir
exampl
build
websit
shop
possibl
analyz
respons
time
throughput
propos
archi-
tectur
given
assumpt
request
load
hardwar
decid
whether
perform
satisfactori
new
capabl
ad
exampl
differ
archi-
tectur
faster
server
back
end
improv
satisfactori
level
us
may
signific
project
us
pertin
project
depend
natur
project
project
commun
may
veri
import
detail
perform
analysi
may
unnecessari
becaus
system
small
meant
onli
user
system
perform
analysi
may
primari
use
architectur
gener
view
emerg
uniqu
architectur
system
definit
adopt
given
abov
also
express
thi
sentiment
consequ
one
architectur
draw
system
situat
similar
civil
construct
disciplin
origin
user
concept
architectur
concept
softwar
architectur
ha
borrow
build
want
see
floor
plan
shown
one
set
draw
electr
engin
want
see
electr
distribut
ha
plan
shown
anoth
set
draw
interest
safeti
firefight
anoth
set
draw
use
draw
independ
other—they
build
howev
draw
provid
differ
view
build
view
focu
explain
one
aspect
build
tri
good
job
divulg
much
aspect
one
draw
express
differ
aspects—such
draw
complex
ani
use
similar
situat
softwar
architectur
softwar
differ
draw
call
view
view
repres
system
compos
type
element
relationship
element
use
view
depend
view
want
highlight
differ
view
expos
differ
properti
attribut
therebi
allow
stakehold
ana-
lyst
properli
evalu
attribut
system
focus
onli
aspect
system
view
reduc
complex
reader
ha
deal
time
therebi
aid
system
understand
analysi
view
describ
structur
system
use
two
concepts—
view
structures—interchang
also
use
term
architectur
view
refer
view
mani
type
view
propos
propos
view
gener
belong
one
three
type
6
23
modul
view
system
view
collect
code
unit
implement
part
system
function
main
element
thi
view
modul
view
code-bas
explicitli
rep-
resent
ani
runtim
structur
system
exampl
modul
packag
class
procedur
method
collect
function
collect
class
relationship
modul
also
code-bas
de-
pend
code
modul
interact
anoth
modul
exampl
relationship
thi
view
part
i.e.
modul
b
part
modul
us
depend
modul
us
servic
modul
b
perform
function
correct
modul
depend
correct
modul
b
gener
special
modul
b
gener
modul
compon
connector
c
&
c
view
system
view
col-
lection
runtim
entiti
call
compon
compon
unit
ha
ident
execut
system
object
class
collec-
tion
object
process
exampl
compon
execut
compon
need
interact
support
system
servic
con-
nector
provid
mean
thi
interact
exampl
connector
pipe
socket
share
data
also
act
connector
compon
use
middlewar
commun
coordin
middlewar
connector
henc
primari
element
thi
view
compon
con-
nector
alloc
view
focu
differ
softwar
unit
alloc
resourc
like
hardwar
file
system
peopl
alloc
view
specifi
relationship
softwar
element
element
environ
softwar
system
execut
expos
structur
properti
like
process
run
processor
system
file
organ
file
system
architectur
descript
consist
view
differ
type
view
expos
structur
system
modul
view
show
soft-
ware
structur
set
implement
unit
c
&
c
view
show
softwar
structur
interact
runtim
element
alloc
view
show
softwar
relat
nonsoftwar
structur
three
type
view
system
form
architectur
system
note
differ
view
unrel
repres
system
henc
relationship
element
one
view
ele-
ment
anoth
view
relationship
may
simpl
may
complex
exampl
relationship
modul
compon
may
one
one
one
modul
implement
one
compon
hand
may
quit
complex
modul
use
multipl
compon
compon
use
multipl
modul
creat
differ
view
design
awar
thi
relationship
next
question
standard
view
express
describ
architectur
system
answer
thi
question
analog
build
may
help
one
build
simpl
small
hous
perhap
need
separ
view
describ
emerg
fire
system
similarli
air
condit
build
need
ani
view
hand
offic
build
perhap
requir
view
addit
view
describ
plumb
space
wire
etc
howev
despit
fact
multipl
draw
show
differ
view
build
one
view
predomin
construction—that
physic
structur
thi
view
form
basi
view
view
realli
complet
unless
thi
view
done
view
may
may
need
construct
build
depend
natur
project
henc
sens
view
give
build
structur
may
consid
primari
view
almost
alway
use
view
reli
thi
view
substanti
view
also
captur
perhap
import
properti
analyz
earli
stage
name
space
organ
situat
softwar
architectur
also
somewhat
similar
said
depend
properti
interest
differ
view
softwar
architectur
need
howev
view
c
&
c
view
ha
becom
defacto
primari
view
one
almost
alway
prepar
architectur
design
definit
even
view
architectur
onli
term
c
&
c
view
thi
chapter
focu
primarili
c
&
c
view
note
relationship
architectur
design
order
partit
system
smaller
part
compos
system
part
also
goal
design
natur
question
differ
design
architectur
aim
achiev
similar
object
seem
fundament
reli
divid
conquer
rule
first
clear
architectur
design
solut
domain
talk
structur
propos
system
furthermor
architectur
view
give
high-level
view
system
reli
abstract
convey
meaning—
someth
design
also
doe
architectur
design
view
architectur
veri
high-level
design
focus
onli
main
compon
architectur
activ
first
step
design
term
design
realli
modul
eventu
exist
code
concret
represent
implement
though
yet
implement
consequ
dure
design
lower-level
issu
like
data
structur
file
sourc
data
address
issu
gener
signific
architectur
level
also
take
view
design
consid
provid
modul
view
architectur
system
boundari
architectur
high-level
design
fulli
clear
way
field
ha
evolv
say
line
architec-
ture
design
realli
design
architect
architectur
level
one
need
show
onli
part
need
perform
desir
evalu
intern
structur
part
import
hand
dure
design
design
structur
part
lead
con-
struct
one
key
task
howev
part
structur
examin
reveal
dure
architectur
part
dure
design
matter
choic
gener
speak
detail
need
perform
type
analysi
wish
architectur
time
unnecessari
left
design
uncov
c
&
c
architectur
view
system
ha
two
main
elements—compon
connector
compon
usual
comput
element
data
store
presenc
dure
system
execut
connector
defin
mean
interact
compon
c
&
c
view
system
de-
fine
compon
compon
connect
connector
c
&
c
view
describ
runtim
structur
system—
compon
exist
system
execut
interact
dure
execut
c
&
c
structur
essenti
graph
compo-
nent
node
connector
edg
c
&
c
view
perhap
common
view
architectur
box-and-lin
draw
repres
architectur
attempt
captur
thi
view
often
peopl
talk
architectur
refer
c
&
c
view
architectur
descript
languag
also
focu
c
&
c
view
compon
gener
unit
comput
data
store
system
compon
ha
name
gener
chosen
repres
role
compon
function
perform
name
also
provid
uniqu
ident
compon
necessari
referenc
detail
compon
support
document
c
&
c
draw
onli
show
compon
name
compon
compon
type
type
repres
gener
compon
defin
gener
comput
interfac
compon
type
must
note
though
compon
ha
type
c
&
c
architectur
view
compon
i.e.
actual
instanc
type
exampl
type
client
server
filter
etc
differ
domain
may
gener
type
like
control
actuat
sensor
control
system
domain
diagram
repres
c
&
c
architectur
view
system
highli
desir
differ
represent
differ
compon
type
differ
type
identifi
visual
box-and-lin
diagram
often
compon
repres
rectangular
box
approach
requir
type
compon
describ
separ
reader
ha
read
descript
figur
type
compon
much
better
use
differ
symbol/not
differ
compon
type
common
symbol
use
repres
commonli
found
compon
type
shown
figur
make
sure
mean
differ
symbol
clear
reader
desir
key
differ
symbol
describ
differ
compon
system
like
interact
system
oper
provid
servic
expect
system
compon
exist
provid
part
servic
featur
system
must
combin
deliv
overal
system
function
compos
system
compon
inform
interact
compon
necessari
interact
compon
may
simpl
mean
support
underli
process
execut
infrastructur
oper
system
exampl
compon
may
interact
anoth
use
procedur
call
mechan
connector
provid
runtim
environ
program
languag
howev
interact
may
involv
complex
mechan
well
exampl
mechan
remot
procedur
call
tcp/ip
port
protocol
like
http
mechan
requir
fair
amount
underli
runtim
infrastructur
well
special
program
within
compon
use
infrastructur
consequ
extrem
import
identifi
explicitli
repres
connector
specif
connector
help
identifi
suitabl
infrastructur
need
implement
architectur
well
clarifi
program
need
compon
use
note
connector
need
binari
connector
may
provid
n-way
commun
multipl
compon
exampl
broadcast
bu
may
use
connector
allow
compon
broadcast
messag
compon
common
symbol
use
repres
commonli
found
connector
type
shown
figur
connector
also
ha
name
describ
natur
interact
connector
support
connector
also
ha
type
gener
de-
scription
interact
specifi
properti
like
whether
binari
n-way
type
interfac
support
etc
protocol
use
connector
type
explicitli
state
worth
point
implement
connector
may
quit
complex
connector
provid
underli
system
compon
ensur
use
connector
per
specif
howev
underli
system
doe
provid
connector
use
architectur
mention
abov
connector
implement
part
project
build
system
dure
develop
onli
compon
need
develop
resourc
assign
also
develop
connector
thi
situat
might
aris
special
system
requir
connector
specif
problem
domain
gener
creat
architectur
wise
architect
use
connector
avail
system
softwar
deploy
suppos
design
build
simpl
system
take
on-lin
survey
student
campu
set
multiple-choic
question
propos
system
provid
survey
form
student
fill
submit
on-lin
also
want
user
submit
form
he/sh
also
shown
current
result
survey
percentag
student
far
fill
option
differ
question
system
best
built
use
web
thi
like
choic
ani
develop
thi
simpl
system
tradit
3-tier
architectur
propos
consist
client
display
form
student
complet
submit
also
display
result
second
compon
server
process
data
submit
student
save
databas
third
compon
server
also
queri
databas
get
outcom
survey
send
result
proper
format
html
back
client
display
result
c
&
c
view
shown
figur
note
client
server
databas
differ
type
compo-
nent
henc
shown
use
differ
symbol
note
also
connec-
tor
compon
also
differ
type
diagram
make
differ
type
clear
make
diagram
stand
alon
easi
comprehend
note
architectur
level
host
detail
discuss
url
survey
set
modul
go
build
compon
languag
written
question
like
issu
thi
level
note
also
connector
client
server
explicitli
say
http
use
diagram
also
say
web
client
thi
impli
assum
web
browser
run
machin
student
take
survey
http
connector
also
impli
proper
http
server
run
server
thi
system
suitabl
attach
allow
access
client
word
entir
infrastructur
browser
http
server
purpos
thi
applic
mainli
provid
connector
client
server
virtual
machin
run
client
applic
implic
choic
thi
connector
compon
client
written
manner
send
request
use
http
thi
impli
use
type
script
languag
html
form
similarli
also
impli
server
ha
take
request
http
server
format
specifi
http
protocol
furthermor
server
ha
send
result
back
client
html
format
constraint
implement
thi
architectur
henc
discuss
final
accept
implic
infrastructur
well
implement
fulli
understood
action
taken
make
sure
assumpt
valid
abov
architectur
ha
secur
student
take
survey
mani
time
wish
furthermor
even
nonstud
take
survey
suppos
dean
student
want
thi
system
open
onli
regist
student
student
allow
take
survey
onc
identifi
student
wa
explain
student
ha
account
account
inform
avail
main
proxi
server
institut
architectur
quit
differ
propos
architec-
ture
ha
separ
login
form
user
separ
server
compon
doe
valid
valid
go
proxi
check
login
password
provid
valid
server
return
cooki
client
store
per
cooki
protocol
student
complet
survey
form
cooki
inform
valid
user
server
check
thi
student
ha
alreadi
complet
survey
architectur
thi
system
shown
figur
note
even
though
say
connect
client
server
http
somewhat
differ
connect
earlier
architectur
first
architectur
plain
http
suffici
thi
one
cooki
also
need
connector
realli
http
+
cooki
user
disabl
cooki
requir
connector
avail
thi
architectur
work
suppos
want
system
extend
differ
way
wa
found
databas
server
somewhat
unreli
frequent
wa
also
felt
student
given
result
survey
submit
form
somewhat
outdat
result
accept
result
realli
statist
data
littl
inaccuraci
matter
assum
survey
result
outdat
even
doe
includ
data
ok
dean
want
wa
make
system
reliabl
provid
facil
complet
survey
even
databas
make
system
reliabl
follow
strategi
wa
propos
student
submit
survey
server
interact
databas
befor
result
survey
howev
also
store
cach
server
databas
unavail
survey
data
store
local
cach
compon
result
save
cach
compon
use
provid
result
student
thi
done
survey
complet
anoth
compon
server
call
cach
manag
connect
server
thi
new
compon
call/return
type
thi
architectur
shown
figur
clear
use
cach
avail
system
improv
cach
also
impact
perform
exten-
sion
show
architectur
affect
avail
perform
properli
select
tune
architectur
help
meet
qualiti
goal
improv
qualiti
system
cours
detail-level
decis
like
particular
modul
implement
also
implic
perform
quit
distinct
orthogon
architecture-level
decis
later
formal
evalu
differ
architectur
see
impact
architectur
decis
qualiti
attribut
clear
differ
system
differ
architectur
gener
architectur
observ
mani
system
seem
repres
gener
structur
use
architectur
class
problem
call
architectur
style
style
defin
famili
architectur
satisfi
constraint
style
6
23
76
thi
section
discu
common
style
c
&
c
view
use
larg
set
problem
23
76
style
provid
idea
creat
architectur
view
problem
hand
style
also
combin
form
richer
view
pipe-and-filt
style
architectur
well
suit
system
primarili
data
transform
wherebi
input
data
receiv
goal
system
produc
output
data
suitabl
transform
input
data
system
use
pipe-and-filt
architectur
achiev
desir
transform
appli
network
smaller
transform
compos
manner
togeth
overal
desir
transform
achiev
pipe-and-filt
style
ha
onli
one
compon
type
call
filter
also
ha
onli
one
connector
type
call
pipe
filter
perform
data
transform
send
transform
data
filter
process
use
pipe
connector
word
filter
receiv
data
need
defin
input
pipe
perform
data
transform
send
output
data
filter
defin
output
pipe
filter
may
one
input
one
output
filter
independ
asynchron
entiti
concern
onli
data
arriv
pipe
filter
need
know
ident
filter
sent
input
data
ident
filter
consum
data
produc
pipe
connector
unidirect
channel
convey
stream
data
receiv
one
end
end
pipe
doe
chang
data
ani
manner
mere
transport
filter
receiv
end
order
data
element
receiv
filter
asynchron
work
without
knowledg
ident
produc
consum
buffer
synchron
need
ensur
smooth
function
producer-consum
relationship
embodi
connect
two
filter
pipe
ensur
pipe
filter
mere
consum
produc
data
constraint
thi
style
impos
first
mention
abov
filter
work
without
know
ident
consum
produc
onli
requir
data
element
need
second
pipe
two-way
connector
must
connect
output
port
filter
input
port
anoth
filter
pure
pipe-and-filt
structur
also
gener
constraint
filter
ha
independ
thread
control
process
data
come
implement
thi
requir
suitabl
underli
infrastructur
support
pipe
mechan
buffer
data
doe
synchron
need
exampl
block
produc
buffer
full
block
consum
filter
buffer
empti
use
thi
pipe
filter
builder
must
fulli
awar
properti
pipe
particularli
regard
buffer
synchron
input
output
mechan
symbol
end
data
howev
could
situat
constraint
filter
process
data
come
may
requir
without
thi
constraint
pipe-and-filt
style
view
may
filter
produc
data
complet
befor
pass
start
process
onli
complet
input
avail
system
filter
oper
concurr
system
like
batch-process
system
howev
consider
simplifi
pipe
easier
mechan
use
support
let
’
consid
exampl
system
need
count
frequenc
differ
word
file
architectur
use
pipes-and-filt
style
system
achiev
thi
given
figur
thi
architectur
propos
input
data
first
split
sequenc
word
compon
sequenc
thi
sequenc
word
sort
compon
sort
pass
output
sort
word
anoth
filter
count
count
number
occurr
differ
word
thi
structur
sort
word
first
ha
chosen
make
task
determin
frequenc
effici
even
though
involv
sort
oper
clear
thi
propos
architectur
implement
desir
function
later
chapter
discu
implement
issu
relat
thi
architectur
seen
thi
exampl
pipe-and-filt
architectur
style
well
suit
data
process
transform
consequ
use
text
process
applic
signal
process
applic
also
find
use
applic
typic
perform
encod
error
correct
transform
data
pipe-and-filt
style
due
constraint
allow
system
’
overal
transform
compos
smaller
transform
view
anoth
manner
allow
desir
transform
factor
smaller
transform
filter
built
smaller
transform
allow
techniqu
function
composit
decomposit
util
someth
mathemat
appeal
thi
style
two
type
components—data
repositori
data
accessor
compon
data
repositori
type
system
store
share
data—thes
could
file
system
databas
compon
pro-
vide
reliabl
perman
storag
take
care
ani
synchron
need
concurr
access
provid
data
access
support
compon
data
accessor
type
access
data
repositori
perform
comput
data
obtain
want
share
result
compon
put
result
back
depositori
word
accessor
computa-
tional
element
receiv
data
repositori
save
data
repositori
well
compon
directli
commun
other—th
data
repositori
compon
mean
commun
data
transfer
two
variat
thi
style
possibl
blackboard
style
data
post
data
repositori
accessor
compon
need
know
inform
word
share
data
sourc
activ
agent
well
either
inform
compon
arriv
interest
data
start
execut
compon
need
act
upon
thi
new
data
databas
thi
form
style
often
support
trigger
repositori
style
data
repositori
passiv
repositori
provid
perman
storag
relat
control
data
access
compon
access
repositori
want
imagin
mani
databas
applic
use
thi
architectur
style
databas
though
origin
like
repositori
act
repositori
well
blackboard
provid
trigger
act
effici
data
storag
well
mani
web
system
frequent
follow
thi
style
back
end—in
respons
user
request
differ
script
data
accessor
access
updat
share
data
mani
program
environ
also
organ
thi
way
common
represent
program
artifact
store
repositori
differ
tool
access
perform
desir
translat
obtain
desir
inform
year
back
wa
standard
defin
common
repositori
facilit
integr
tool
exampl
system
use
thi
style
architectur
let
u
consid
student
registr
system
univers
system
clearli
ha
central
repositori
contain
inform
cours
student
prerequisit
etc
ha
administr
compon
set
repositori
right
differ
peopl
etc
registr
compon
allow
student
reg-
ister
updat
inform
student
cours
approv
compon
grant
approv
cours
requir
instructor
’
consent
report
compon
produc
report
regard
student
regist
differ
cours
end
registr
compon
cours
feedback
use
take
feedback
student
end
cours
thi
architectur
shown
figur
note
differ
comput
compon
need
communi-
cate
even
need
know
’
presenc
exampl
later
decid
schedul
cours
auto-
mate
base
data
registr
inform
classroom
etc
anoth
compon
call
schedul
simpli
ad
ex-
ist
comput
compon
need
chang
inform
new
compon
ad
thi
exampl
base
system
actual
use
author
’
univers
realli
onli
one
connector
type
thi
style—read/writ
note
how-
ever
thi
gener
connector
style
may
take
precis
form
particular
architectur
exampl
though
databas
view
support
read
updat
program
interact
databas
system
may
provid
transact
servic
well
connector
use
thi
transact
servic
allow
complet
transact
may
involv
multipl
read
write
preserv
atom
perform
applic
note
also
mani
case
connector
involv
consider-
abl
amount
underli
infrastructur
exampl
read
write
file
system
involv
fair
amount
file
system
softwar
involv
issu
like
directori
buffer
lock
synchron
similarli
consider
amount
softwar
go
databas
support
type
connect
provid
queri
updat
transact
see
anoth
use
thi
style
later
discu
case
studi
anoth
veri
common
style
use
build
system
today
client-serv
style
client-serv
comput
one
basic
paradigm
distribut
com-
pute
thi
architectur
style
built
upon
thi
paradigm
thi
style
two
compon
types—cli
server
con-
straint
thi
style
client
onli
commun
server
commun
client
commun
client
compon
server
compon
initi
client
client
send
request
servic
server
support
server
receiv
request
defin
port
perform
servic
return
result
comput
client
request
servic
one
connector
type
thi
style—th
request/repli
type
con-
nector
connect
client
server
thi
type
connector
asymmetric—th
client
end
connector
onli
make
request
receiv
repli
server
end
onli
send
repli
respons
request
get
thi
connector
commun
frequent
synchronous—th
client
wait
server
return
result
befor
proceed
client
block
request
get
repli
gener
form
thi
style
n-tier
structur
thi
style
client
send
request
server
server
order
servic
request
send
request
anoth
server
server
also
act
client
next
tier
thi
hierarchi
continu
level
provid
n-tier
system
common
exampl
thi
3-tier
architectur
thi
style
client
make
request
receiv
final
result
resid
client
tier
middl
tier
call
busi
tier
contain
compon
process
data
submit
client
appli
necessari
busi
rule
third
tier
databas
tier
data
resid
busi
tier
interact
databas
tier
data
need
often
client-serv
architectur
client
server
com-
ponent
resid
differ
machin
even
resid
machin
design
manner
exist
differ
machin
henc
connector
client
server
expect
support
request/result
type
connect
across
differ
machin
consequ
connector
intern
quit
complex
involv
fair
amount
net-
work
support
mani
client-serv
system
today
use
tcp
port
connector
web
us
http
support
thi
connector
note
distinct
layer
architectur
tier
architectur
tier
style
compon
connector
architectur
view
tier
compon
compon
commun
adjac
one
defin
protocol
layer
architectur
modul
view
provid
modul
organ
use
layer
organiza-
tion
modul
organ
layer
modul
layer
allow
invok
servic
onli
modul
layer
henc
layer
tier
rep-
resent
two
differ
view
n-tier
architectur
tier
layer
architectur
exampl
client-serv
architectur
server
might
layer
architectur
modul
compos
server
organ
layer
style
publish-subscrib
style
thi
style
two
type
compon
one
type
compon
subscrib
set
defin
event
type
compo-
nent
gener
publish
event
respons
event
compon
publish
intent
process
event
invok
thi
type
style
natur
user
interfac
framework
mani
event
defin
like
mous
click
compon
assign
event
event
occur
associ
compon
execut
case
connector
task
runtim
infrastructur
ensur
thi
type
connector
i.e.
publish-subscrib
support
thi
style
seen
special
case
blackboard
style
except
repositori
aspect
use
peer-to-p
style
object-ori
style
take
client-serv
style
gener
compon
client
well
server
thi
style
thi
style
compon
peer
ani
compon
request
servic
ani
compon
object-ori
comput
model
repres
thi
style
well
view
compon
object
connector
method
invoc
thi
style
thi
model
one
primarili
support
middlewar
connector
like
corba
.net
commun
process
style
perhap
oldest
model
distribut
com-
pute
commun
process
thi
style
tri
captur
thi
model
comput
compon
thi
model
process
thread
commun
either
messag
pass
share
memori
thi
style
use
form
mani
complex
system
use
multipl
thread
process
far
focus
repres
view
diagram
de-
sign
diagram
inde
good
way
explor
option
encourag
discuss
brainstorm
architect
design
architectur
ha
properli
commun
stakehold-
er
negoti
agreement
thi
requir
architectur
precis
document
enough
inform
perform
type
analysi
dif-
ferent
stakehold
wish
make
satisfi
themselv
concern
adequ
address
without
properli
document
descript
architectur
possibl
clear
common
understand
henc
properli
document
architectur
import
creat
one
thi
section
discu
architectur
document
contain
discus-
sion
base
recommend
6
23
54
like
differ
project
requir
differ
view
differ
project
need
differ
level
detail
architectur
document
gener
howev
document
describ
architectur
contain
follow
know
architectur
system
driven
system
object
need
stakehold
henc
first
aspect
architectur
document
contain
identif
stakehold
concern
thi
portion
give
overview
system
differ
stakehold
system
properti
architectur
evalu
con-
text
diagram
establish
scope
system
boundari
key
actor
interact
system
sourc
sink
data
also
veri
use
context
diagram
frequent
repres
show
system
center
show
connect
peopl
system
includ
sourc
sink
data
context
defin
document
proceed
describ
differ
structur
view
state
befor
multipl
view
differ
type
may
need
view
chosen
depend
need
project
stakehold
descript
view
architectur
document
almost
alway
contain
pictori
represent
view
often
primari
present
view
discuss
earlier
ani
view
diagram
desir
differ
symbol
differ
element
type
provid
key
differ
type
type
differ
compon
repres
use
symbol
clear
reader
cours
highli
desir
keep
diagram
simpl
unclutt
necessari
keep
complex
view
manag
hierarch
approach
follow
make
main
view
simpl
provid
detail
structur
element
howev
pictori
represent
complet
descript
view
give
intuit
idea
design
suffici
provid
detail
exampl
purpos
function
modul
compon
indic
onli
name
suffici
henc
support
doc-
ument
need
view
diagram
thi
support
document
follow
element
catalog
provid
inform
element
shown
primari
represent
besid
describ
purpos
element
also
describ
element
’
interfac
rememb
element
interfac
interact
element
differ
interfac
provid
element
specifi
interfac
uniqu
ident
specif
give
syntact
semant
inform
syntact
inform
often
term
signa-
ture
describ
data
item
involv
interfac
type
semant
inform
must
describ
interfac
doe
de-
scription
also
clearli
state
error
condit
interfac
return
architectur
rational
though
view
specifi
element
rela-
tionship
doe
provid
ani
insight
whi
architect
chose
particular
structur
architectur
rational
give
reason
se-
lect
differ
element
compos
way
wa
done
thi
section
may
also
provid
discuss
altern
consid
whi
reject
thi
discuss
besid
explain
choic
also
use
later
analyst
make
chang
wonder
whi
architectur
chang
manner
might
make
chang
easi
behavior
view
give
structur
inform
doe
repres
actual
behavior
execut
consequ
structur
possibl
in-
teract
dure
execut
shown
sometim
necessari
get
idea
actual
behavior
system
scenario
descript
use
argu
properti
like
deadlock
behavior
de-
scription
provid
help
aid
understand
system
execut
often
diagram
like
collabor
diagram
sequenc
diagram
discu
chapter
use
inform
thi
may
includ
descript
decis
taken
dure
architectur
creation
deliber
left
futur
choic
server
protocol
thi
done
must
specifi
fix
impact
architectur
know
differ
view
relat
discuss
far
view
describ
independ
architectur
document
therefor
besid
describ
view
also
describ
relationship
differ
view
thi
primari
purpos
across
view
document
essenti
thi
document
describ
relationship
be-
tween
element
differ
view
exampl
modul
modul
view
relat
compon
compon
view
compon
c
&
c
view
relat
process
process
view
thi
part
document
also
describ
rational
overal
architectur
whi
select
view
chosen
ani
inform
cut
across
view
howev
often
relationship
differ
view
straightfor-
ward
veri
strong
situat
differ
structur
may
look
veri
similar
describ
view
separ
lead
repetit
situat
practic
reason
better
combin
differ
view
one
besid
elimin
duplic
thi
approach
also
help
clearli
show
strong
relationship
two
view
process
also
reduc
across
view
document
combin
view
also
use
analysi
requir
multipl
view
exampl
perform
analy-
si
frequent
requir
c
&
c
view
well
alloc
view
sometim
may
desir
show
combin
view
combin
view
howev
done
onli
relationship
be-
tween
view
strong
straightforward
otherwis
put
multipl
view
one
diagram
clutter
view
make
confus
objec-
tive
reveal
multipl
view
one
mere
reduc
number
view
done
primarili
aid
understand
show
relationship
exampl
combin
multipl
modul
modul
view
form
differ
layer
layer
view
situat
probabl
natur
show
one
view
consist
layer
overlay-
ing
modul
structur
layer
show
modul
structur
within
layer
mani
layer
system
’
architectur
actual
use
thi
ap-
proach
situat
best
show
togeth
creat
hybrid
style
modul
view
c
&
c
view
captur
overal
map
shown
easili
simpl
manner
differ
view
combin
sake
simplic
compact
howev
relationship
differ
view
complex
exampl
many-
to-mani
relationship
element
differ
view
best
keep
separ
specifi
relationship
separ
gener
structur
discuss
provid
guid
organ
architectur
document
howev
main
purpos
document
clearli
commun
architectur
stakehold
desir
analysi
done
section
redund
purpos
may
includ
similarli
inform
need
provid
done
final
word
languag
chosen
describ
differ
part
architectur
choic
vari
formal
architectur
descript
languag
adl
inform
notat
mani
peopl
use
uml
repre-
sent
architectur
allow
variou
possibl
show
primari
descript
view
also
allow
annot
capabl
support
document
believ
ani
method
use
long
object
met
allow
flexibl
suggest
use
problem-specif
notat
follow
guidelin
good
view
represent
use
combin
header
definit
text
support
document
architectur
softwar
system
impact
key
nonfunct
qual-
iti
attribut
like
modifi
perform
reliabl
portabl
etc
architectur
ha
much
signific
impact
properti
design
code
choic
even
though
choic
algorithm
data
structur
etc.
import
mani
attribut
often
le
impact
architectur
choic
clearli
evalu
propos
architectur
properti
benefici
impact
project—ani
architectur
chang
requir
meet
desir
goal
attribut
done
dure
architectur
design
mani
nonfunct
qualiti
attribut
af-
fect
architectur
significantli
attribut
architectur
ha
signific
impact
perform
reliabl
avail
secur
aspect
modifi
reusabl
portabl
attribut
like
usabl
onli
mildli
affect
architectur
propos
architectur
evalu
attribut
attribut
like
perform
reliabl
possibl
build
formal
model
use
techniqu
like
queu
network
use
assess
valu
attribut
howev
model
requir
inform
beyond
architectur
descript
gener
form
execut
time
reliabl
compon
anoth
approach
procedural—a
sequenc
step
follow
subjec-
tive
evalu
impact
architectur
attribut
one
inform
analysi
approach
often
use
follow
first
identifi
attribut
interest
architectur
evalu
attribut
usual
determin
stakehold
’
interests—th
attribut
differ
stakehold
interest
attribut
list
tabl
attribut
experience-bas
subject
quantit
analysi
done
ass
level
support
architectur
analysi
might
mention
level
attribut
e.g.
good
averag
poor
might
simpli
mention
whether
satisfactori
base
outcom
thi
analysi
architectur
either
accept
reject
reject
may
enhanc
improv
perform
attribut
propos
architectur
wa
unsatisfactori
mani
techniqu
propos
evalu
survey
given
29
architectur
softwar
system
provid
veri
high-level
view
system
term
part
system
relat
form
whole
system
depend
system
partit
get
differ
architectur
view
system
consequ
architectur
softwar
system
defin
structur
system
compris
softwar
element
extern
visibl
properti
relationship
among
architectur
facilit
develop
high-qual
system
also
allow
analysi
mani
system
properti
like
perform
depend
mostli
architectur
done
earli
softwar
life
cycl
three
main
architectur
view
system—modul
compon
connector
alloc
modul
view
system
view
structur
program
modul
like
packag
class
function
etc
compon
connector
c
&
c
view
system
collect
runtim
entiti
call
compon
interact
connector
alloc
view
describ
differ
softwar
unit
alloc
hardwar
resourc
system
c
&
c
view
common
often
centerpiec
architectur
descript
thi
view
often
describ
block
diagram
specifi
differ
compon
differ
connector
compon
common
style
c
&
c
view
found
use
creat
thi
architectur
view
system
includ
pipe
filter
share
data
client-serv
publish-subscrib
peer
peer
communicat-
ing
process
style
style
describ
type
compon
connector
exist
constraint
use
pipe
filter
ha
one
type
compon
filter
one
type
connector
pipe
compon
connect
pipe
client-serv
style
ha
two
type
compon
client
server
one
connector
request/repli
client
onli
commun
server
interact
initi
client
share
data
style
two
compon
type
repositori
data
accessor
data
accessor
read/writ
repositori
share
inform
among
themselv
repositori
architectur
form
foundat
system
rest
design
develop
activ
need
properli
document
proper
architectur
document
describ
context
architectur
wa
design
differ
architectur
view
creat
differ
view
relat
architectur
descript
specifi
differ
type
element
extern
behavior
architectur
rational
architectur
evalu
see
satisfi
requir
common
approach
subject
evalu
respect
desir
properti
whi
architectur
one
structur
consist
differ
part
relationship
differ
architectur
style
compon
connector
struc-
ture
system
consid
interact
websit
provid
mani
differ
featur
perform
variou
task
show
architectur
thi
repres
shared-
data
style
well
client-serv
style
one
prefer
whi
architectur
document
system
contain
suggest
evalu
propos
architectur
modifi
per-
spectiv
design
activ
begin
requir
document
softwar
develop
avail
architectur
ha
design
dure
design
refin
architectur
gener
design
focu
call
modul
view
chapter
5
dure
design
determin
modul
system
develop
often
modul
view
may
effect
modul
structur
compon
architectur
case
design
exercis
determin
modul
structur
compon
howev
thi
simpl
map
compon
modul
may
alway
hold
case
ensur
modul
view
creat
design
consist
architectur
design
system
essenti
blueprint
plan
solut
system
consid
system
set
modul
clearli
defin
behavior
interact
defin
manner
produc
behavior
servic
environ
design
process
softwar
system
often
ha
two
level
first
level
focu
decid
modul
need
system
specif
modul
modul
interconnect
thi
may
call
modul
design
high-level
design
second
level
intern
design
modul
specif
modul
satisfi
decid
thi
design
level
often
call
detail
design
logic
design
detail
design
essenti
expand
system
design
contain
detail
descript
process
logic
data
structur
design
suffici
complet
code
design
methodolog
systemat
approach
creat
design
p.
jalot
concis
introduct
softwar
engin
appli
set
techniqu
guidelin
design
methodolog
focu
modul
design
reduc
design
activ
sequenc
step
blindli
follow
design
key
design
concept
modular
cohes
coupl
open-clos
principl
structur
chart
notat
express
structur
function-
orient
system
structur
design
methodolog
design
structur
chart
system
develop
key
concept
relat
object-orient
unifi
model
languag
uml
use
express
object-ori
design
methodolog
creat
object-ori
design
system
util
uml
metric
quantifi
complex
design
design
system
correct
system
built
precis
accord
design
satisfi
requir
system
clearli
goal
dure
design
phase
produc
correct
design
howev
correct
sole
criterion
dure
design
phase
mani
correct
design
goal
design
process
simpli
produc
design
system
instead
goal
find
best
possibl
design
within
limit
im-
pose
requir
physic
social
environ
system
oper
evalu
design
specifi
evalu
criterion
focu
modular
system
decid
mostli
design
main
criterion
evalu
system
consid
modular
consist
discret
modul
modul
implement
separ
chang
one
modul
ha
minim
impact
modul
modular
clearli
desir
properti
modular
help
system
debugging—isol
system
problem
modul
easier
system
modular
system
repair—chang
part
system
easi
affect
part
system
building—a
modular
system
easili
built
put
modul
togeth
softwar
system
made
modular
simpli
chop
set
modul
modular
modul
need
support
well-defin
abstract
clear
interfac
interact
modul
produc
modular
design
criterion
must
use
select
modul
modul
support
well-defin
abstract
solv-
abl
modifi
separ
coupl
cohes
two
modular
criterion
often
use
togeth
also
discu
open-clos
princi-
ple
anoth
criterion
modular
two
modul
consid
independ
one
function
complet
with-
presenc
obvious
two
modul
independ
solvabl
modifi
separ
howev
modul
system
independ
must
interact
togeth
produc
desir
extern
behavior
system
connect
modul
depend
sens
knowl-
edg
one
modul
requir
understand
solv
modul
henc
fewer
simpler
connect
modul
easier
understand
one
without
understand
notion
coupl
79
88
attempt
captur
thi
concept
strongli
differ
modul
interconnect
coupl
modul
strength
interconnect
mod-
ule
measur
interdepend
among
modul
gener
must
know
modul
order
understand
modul
b
close
connect
b
highli
coupl
modul
join
strong
interconnect
loos
coupl
modul
weak
interconnect
independ
modul
interconnect
solv
modifi
modul
separ
would
like
modul
loos
coupl
mod-
ule
choic
modul
decid
coupl
modul
becaus
modul
softwar
system
creat
dure
system
design
cou-
pling
modul
larg
decid
dure
system
design
reduc
dure
implement
coupl
increas
complex
obscur
interfac
be-
tween
modul
keep
coupl
low
would
like
minim
number
interfac
per
modul
complex
interfac
interfac
modul
use
pa
inform
modul
coupl
reduc
onli
defin
entri
interfac
modul
use
modul
exampl
pass
inform
modul
exclus
pa-
ramet
coupl
would
increas
modul
use
modul
via
indirect
obscur
interfac
like
directli
use
intern
modul
use
share
variabl
complex
interfac
anoth
factor
affect
coupl
complex
interfac
higher
degre
coupl
exampl
complex
entri
interfac
procedur
depend
number
item
pass
paramet
complex
item
level
complex
interfac
requir
support
commun
need
be-
tween
modul
howev
often
thi
minimum
use
exampl
field
record
need
procedur
often
entir
record
pass
rather
pass
field
record
pass
record
increas
coupl
unnecessarili
essenti
keep
interfac
modul
simpl
small
possibl
type
inform
flow
along
interfac
third
major
factor
affect
coupl
two
kind
inform
flow
along
interfac
data
control
pass
receiv
control
inform
mean
action
modul
depend
thi
control
inform
make
difficult
understand
modul
provid
abstract
transfer
data
inform
mean
modul
pass
input
data
anoth
modul
get
return
data
output
thi
allow
modul
treat
simpl
input-output
function
perform
transform
input
data
produc
output
data
gener
interfac
onli
data
commun
result
lowest
degre
coupl
follow
interfac
onli
transfer
control
data
coupl
consid
highest
data
hybrid
data
item
control
item
pass
modul
effect
three
factor
coupl
summar
tabl
79
type
type
complex
connect
commun
manifest
coupl
oo
system
somewhat
differ
object
semant
richer
function
oo
system
three
differ
type
coupl
exist
modul
30
interact
coupl
occur
due
method
class
invok
method
class
mani
way
thi
situat
similar
function
call
an-
function
henc
thi
coupl
similar
coupl
function
modul
discuss
abov
like
function
worst
form
coupl
method
directli
access
intern
part
method
coupl
lowest
method
commun
directli
paramet
within
thi
categori
discuss
abov
coupl
lower
onli
data
pass
higher
control
inform
pass
sinc
invok
method
impact
execut
sequenc
call
method
also
coupl
higher
amount
data
pass
increas
whole
data
structur
pass
onli
part
need
coupl
unnecessarili
increas
similarli
object
pass
method
onli
compon
object
use
within
method
coupl
increas
unnecessarili
least
coupl
situat
therefor
commun
paramet
onli
onli
necessari
variabl
pass
paramet
onli
pa
data
compon
coupl
refer
interact
two
class
class
ha
variabl
class
three
clear
situat
exist
thi
happen
class
c
compon
coupl
anoth
class
c1
c
ha
instanc
variabl
type
c1
c
ha
method
whose
paramet
type
c1
c
ha
method
ha
local
variabl
type
c1
note
c
compon
coupl
c1
ha
potenti
compon
coupl
subclass
c.
clear
whenev
compon
coupl
like
interact
coupl
compon
coupl
consid
weakest
i.e
desir
class
c
variabl
class
c
attribut
c.
interact
local
variabl
thi
interact
visibl
outsid
therefor
increas
coupl
inherit
coupl
due
inherit
relationship
class
two
class
consid
inherit
coupl
one
class
direct
indirect
subclass
inherit
add
coupl
one
ask
question
whi
away
inherit
altogeth
reason
inherit
may
reduc
overal
coupl
system
let
u
consid
two
situat
class
coupl
anoth
class
b
b
hierarchi
b
b
method
factor
b
coupl
drop
onli
coupl
b
wherea
earlier
wa
coupl
b2
similarli
b
class
hierarchi
support
specialization-gener
relationship
new
subclass
ad
b
chang
need
made
class
call
method
b
chang
b
’
hierarchi
need
disturb
without
thi
hierarchi
chang
b
would
like
result
chang
within
inherit
coupl
situat
wors
worst
form
subclass
b
delet
method
thi
situat
easili
lead
runtim
error
besid
violat
true
spirit
is-a
relationship
signatur
preserv
implement
method
chang
also
violat
is-a
relationship
though
may
lead
runtim
error
avoid
least
coupl
scenario
subclass
onli
add
instanc
variabl
method
doe
modifi
ani
inherit
one
seen
coupl
reduc
relationship
among
element
differ
modul
minim
coupl
reduc
element
differ
modul
littl
bond
anoth
way
achiev
thi
effect
strengthen
bond
element
modul
maxim
relationship
element
modul
cohes
concept
tri
captur
thi
intramodul
79
88
cohes
interest
determin
close
element
modul
relat
cohes
modul
repres
tightli
bound
intern
element
modul
one
anoth
cohes
modul
give
design
idea
whether
differ
element
modul
belong
togeth
modul
cohes
coupl
clearli
relat
usual
greater
cohes
modul
system
lower
coupl
modul
thi
correl
perfect
ha
observ
practic
sever
level
cohes
coincident
lowest
level
function
highest
coincident
co-
hesion
occur
meaning
relationship
among
element
modul
coincident
cohes
occur
exist
program
mod-
ular
chop
piec
make
differ
piec
modul
modul
creat
save
duplic
code
combin
part
code
occur
mani
differ
place
modul
like
coincident
cohes
modul
ha
logic
cohes
logic
relationship
element
modul
element
perform
function
fall
logic
class
typic
exampl
thi
kind
cohes
modul
perform
input
output
situat
want
input
output
particular
record
somehow
convey
thi
modul
often
thi
done
pass
kind
special
statu
flag
use
determin
statement
execut
modul
besid
result
hybrid
inform
flow
modul
gener
worst
form
coupl
modul
modul
usual
tricki
clumsi
code
gener
logic
cohes
modul
avoid
possibl
tempor
cohes
logic
cohes
except
element
also
relat
time
execut
togeth
modul
perform
activ-
iti
like
initi
cleanup
termin
usual
tempor
bound
even
though
element
tempor
bound
modul
logic
relat
tempor
cohes
higher
logic
cohes
becaus
element
execut
togeth
thi
avoid
problem
pass
flag
code
usual
simpler
procedur
cohes
modul
contain
element
belong
common
procedur
unit
exampl
loop
sequenc
decis
statement
modul
may
combin
form
separ
modul
procedur
cohes
modul
often
occur
modular
structur
determin
form
flowchart
procedur
cohes
often
cut
across
function
line
modul
onli
procedur
cohes
may
contain
onli
part
complet
function
part
sever
function
modul
commun
cohes
ha
element
relat
refer
input
output
data
commun
bound
modul
element
togeth
becaus
oper
input
output
data
exampl
thi
could
modul
print
punch
record.
commun
cohes
modul
may
perform
one
function
howev
commun
cohes
suffici
high
gener
accept
altern
structur
higher
cohes
easili
identifi
element
togeth
modul
becaus
output
one
form
input
anoth
get
sequenti
cohes
sequenc
element
output
one
form
input
anoth
sequenti
cohes
doe
provid
ani
guidelin
combin
modul
function
cohes
strongest
cohes
function
bound
mod-
ule
element
modul
relat
perform
singl
function
function
mean
simpli
mathemat
function
modul
accom-
plish
singl
goal
also
includ
function
like
comput
squar
root
sort
array
clear
exampl
function
cohes
modul
doe
one
determin
cohes
level
modul
math-
emat
formula
use
use
judgment
thi
use
techniqu
determin
modul
ha
function
cohes
write
sentenc
describ
fulli
accur
function
purpos
modul
modul
function
cohes
alway
describ
simpl
sentenc
describ
use
simpl
sentenc
modul
like
function
cohes
cohes
object-ori
system
ha
three
aspect
30
method
cohes
cohes
function
modul
focu
whi
differ
code
element
method
togeth
within
method
highest
form
cohes
method
implement
clearli
defin
function
statement
method
contribut
implement
thi
function
class
cohes
focu
whi
differ
attribut
method
togeth
thi
class
goal
class
implement
singl
concept
abstract
element
contribut
toward
support
thi
concept
gener
whenev
multipl
concept
encapsul
within
class
cohes
class
high
could
design
tri
chang
design
class
encapsul
singl
concept
one
symptom
situat
class
ha
multipl
abstract
set
method
partit
two
group
access
distinct
subset
attribut
set
method
attribut
partit
separ
group
encapsul
differ
concept
clearli
situat
separ
class
encapsul
separ
concept
modul
improv
cohes
mani
situat
even
though
two
concept
may
encapsu-
late
within
class
method
access
attribut
encapsul
concept
thi
happen
class
repres
differ
entiti
relationship
cohes
best
repres
two
separ
class
relationship
among
multipl
class
method
class
access
object
class
way
thi
improv
cohes
result
increas
coupl
howev
modifi
understand
better
class
encapsul
singl
concept
inherit
cohes
focu
reason
whi
class
togeth
hierarchi
two
main
reason
inherit
model
generalization-
special
relationship
code
reus
cohes
consid
high
hierarchi
support
generalization-speci
concept
like
natur
lead
reus
code
consid
lower
hierarchi
primarili
share
code
weak
conceptu
relationship
superclass
subclass
word
desir
oo
system
class
hierarchi
support
clearli
identifi
generalization-speci
relationship
thi
design
concept
came
exist
oo
context
like
cohes
coupl
basic
goal
promot
build-
ing
system
easili
modifi
modif
chang
happen
frequent
design
easili
accommod
chang
result
system
die
fast
abl
easili
adapt
chang
world
basic
principl
state
bertrand
meyer
softwar
entiti
open
extens
close
modif
66
modul
open
extens
mean
behavior
extend
accommod
new
demand
place
thi
modul
due
chang
requir
sys-
tem
function
modul
close
modif
mean
exist
sourc
code
modul
chang
make
enhanc
doe
one
make
enhanc
modul
without
chang
exist
sourc
code
thi
principl
restrict
chang
modul
extens
onli
i.e
allow
addit
code
disallow
chang
exist
code
thi
done
clearli
valu
tremend
code
chang
involv
heavi
risk
ensur
chang
ha
broken
thing
work
often
requir
lot
regress
test
thi
risk
minim
chang
made
exist
code
chang
made
enhanc
made
thi
principl
say
enhanc
made
ad
new
code
rather
alter
old
code
anoth
side
benefit
thi
programm
typic
prefer
write
new
code
rather
modifi
old
code
realiti
system
built
today
built
top
exist
softwar
thi
principl
satisfi
expand
exist
system
mostli
ad
new
code
old
system
minim
need
chang
code
thi
principl
satisfi
oo
design
properli
use
inherit
polymorph
inherit
allow
creat
new
class
extend
behavior
exist
class
without
chang
origin
class
thi
properti
use
support
thi
principl
exampl
consid
applic
client
object
type
client
interact
printer
object
class
printer1
invok
necessari
method
complet
print
need
class
diagram
thi
shown
figur
thi
design
client
directli
call
method
printer
object
print
someth
suppos
system
ha
enhanc
allow
anoth
printer
use
client
thi
design
implement
thi
chang
new
class
printer
thi
design
doe
support
open-clos
principl
client
class
close
chang
design
thi
system
howev
done
anoth
manner
support
open-clos
principl
thi
design
instead
directli
imple-
ment
printer
creat
abstract
class
printer
defin
interfac
printer
specifi
method
printer
object
sup-
port
printer
thi
design
printer
ad
anoth
subclass
type
printer
client
doe
need
awar
thi
subtyp
interact
ob-
ject
type
printer
client
onli
deal
gener
printer
interact
whether
object
actual
type
printer2
class
diagram
thi
shown
figur
thi
inherit
properti
oo
leverag
support
open-
close
principl
basic
idea
class
encapsul
abstract
concept
thi
abstract
extend
extens
done
creat
new
subclass
abstract
therebi
keep
exist
code
unchang
inherit
hierarchi
built
thi
manner
said
satisfi
liskov
substitut
principl
65
accord
thi
principl
program
use
object
base
class
c
program
remain
unchang
o1
c.
thi
principl
satisfi
class
hierarchi
hierarchi
use
prop-
erli
open-clos
principl
support
also
note
recommend
inherit
coupl
inherit
cohes
support
thi
principl
follow
class
hierarchi
creat
softwar
system
design
major
concern
design
phase
mani
design
techniqu
propos
year
provid
disciplin
handl
complex
design
larg
system
aim
design
methodolog
reduc
process
design
sequenc
mechan
step
provid
guidelin
aid
design
dure
design
process
discu
structur
design
methodolog
79
88
develop
function-ori
system
design
methodolog
employ
structur
chart
notat
creat
design
befor
discu
methodolog
describ
thi
notat
graphic
design
notat
frequent
use
dure
design
process
repres
design
design
decis
design
commun
stakehold
succinct
manner
evalu
function-ori
design
design
repres
graphic
structur
chart
structur
program
made
modul
program
togeth
interconnect
modul
everi
comput
program
ha
structur
given
program
structur
determin
structur
chart
program
graphic
represent
structur
structur
chart
modul
repres
box
modul
name
written
box
arrow
modul
modul
b
repres
modul
invok
modul
b
b
call
subordin
call
superordin
b
arrow
label
paramet
receiv
b
input
paramet
return
b
output
direct
flow
input
output
paramet
repres
small
arrow
paramet
shown
data
unfil
circl
tail
label
control
fill
circl
tail
exampl
consid
structur
follow
program
whose
structur
shown
figur
readnum
&
n
sort
n
scanf
&
n
sum
=
add_n
n
printf
sum
>
switch
/
add
first
n
number
/
add_n
n
gener
procedur
inform
repres
structur
chart
focu
repres
hierarchi
modul
howev
situat
design
may
wish
commun
certain
procedur
inform
explicitli
like
major
loop
decis
inform
also
repres
structur
chart
exampl
let
u
consid
situat
modul
ha
subordin
b
c
repeatedli
call
modul
c
d.
thi
repres
loop
arrow
around
arrow
join
subordin
c
shown
figur
subordin
modul
activ
within
common
loop
enclos
loop
arrow
major
decis
repres
similarli
exampl
invoc
modul
c
modul
depend
outcom
decis
repres
small
diamond
box
arrow
join
c
come
thi
diamond
shown
figur
modul
system
categor
class
modul
obtain
inform
subordin
pa
superordin
thi
kind
modul
input
modul
similarli
output
modul
take
inform
superordin
pa
subordin
name
suggest
input
output
mod-
ule
typic
use
input
output
data
environ-
ment
input
modul
get
data
sourc
get
readi
process
output
modul
take
output
produc
prepar
proper
present
environ
modul
exist
sole
sake
transform
data
form
modul
call
transform
modul
comput
modul
typic
fall
thi
categori
final
modul
whose
primari
concern
manag
flow
data
differ
subordin
modul
call
coordin
modul
modul
perform
function
one
type
modul
structur
chart
nice
represent
design
us
function
abstract
show
modul
call
hierarchi
interfac
be-
tween
modul
inform
pass
modul
softwar
system
onc
structur
decid
modul
interfac
depend
get
fix
object
structur
design
methodolog
control
eventu
structur
system
fix
structur
dur-
ing
design
aim
design
system
program
implement
design
would
hierarch
structur
function
cohes
modul
interconnect
modul
possibl
design
methodolog
reduc
design
seri
step
mechan-
ical
execut
design
methodolog
best
set
guidelin
appli
like
produc
design
modular
simpl
basic
principl
behind
structur
design
methodolog
methodolog
problem
partit
structur
design
methodolog
partit
system
veri
top
level
variou
subsystem
one
manag
major
input
one
manag
major
output
one
major
transform
modul
perform
transform
deal
data
abstract
level
henc
focu
conceptu
problem
perform
transform
without
bother
obtain
clean
input
present
output
rational
behind
thi
partit
mani
system
particularli
data
process
system
good
part
system
code
deal
manag
input
output
modul
deal
input
deal
issu
screen
read
data
format
error
except
complet
inform
structur
inform
etc
similarli
modul
deal
output
prepar
output
present
format
make
chart
produc
report
etc
henc
mani
system
inde
case
good
part
softwar
ha
deal
input
output
actual
transfor-
mation
system
frequent
veri
complex—it
deal
data
get
proper
form
perform
transform
produc
output
desir
form
requir
consider
process
thi
partit
heart
structur
design
methodolog
four
major
step
methodolog
factor
input
output
transform
branch
discu
step
detail
restat
problem
data
flow
diagram
use
thi
methodolog
first
step
construct
data
flow
diagram
problem
studi
data
flow
diagram
chapter
3
howev
fundament
differ
dfd
drawn
dure
requir
analysi
drawn
dure
structur
design
requir
analysi
dfd
drawn
model
problem
domain
analyst
ha
littl
control
problem
henc
hi
task
extract
problem
inform
repres
dfd
dure
design
activ
longer
model
problem
domain
deal
solut
domain
develop
model
eventu
system
dfd
dure
design
repres
data
flow
system
built
thi
model
major
transform
function
softwar
decid
dfd
show
major
transform
softwar
data
flow
differ
transform
dfd
atm
shown
figur
two
major
stream
input
data
thi
diagram
first
account
number
code
second
amount
debit
notic
use
differ
place
dfd
exampl
trans-
form
valid
verifi
account
number
code
valid
need
onli
account
number
code
also
inform
sys-
tem
databas
valid
transform
debit
account
ha
two
output
one
use
record
transact
updat
account
identifi
abstract
input
output
data
element
system
basic
transform
perform
requir
oper
how-
ever
case
transform
easili
appli
actual
physic
input
produc
desir
physic
output
instead
input
first
convert
form
transform
appli
eas
similarli
main
transform
modul
often
produc
output
convert
desir
physic
output
goal
thi
second
step
separ
transform
data
flow
diagram
convert
input
output
desir
format
one
perform
actual
transform
thi
separ
onc
data
flow
diagram
readi
next
step
identifi
highest
abstract
level
input
output
abstract
input
data
element
data
element
data
flow
diagram
farthest
remov
physic
input
still
consid
input
system
abstract
input
data
element
often
littl
resem-
blanc
actual
physic
data
often
data
element
obtain
oper
like
error
check
data
valid
proper
format
convers
complet
abstract
input
data
element
recogn
start
phys-
ical
input
travel
toward
output
data
flow
diagram
data
element
reach
longer
consid
incom
aim
go
far
possibl
physic
input
without
lose
incom
natur
data
element
thi
process
perform
input
stream
identifi
abstract
data
item
repres
valu
judgment
part
design
often
choic
obviou
similarli
identifi
abstract
output
data
element
start
output
data
flow
diagram
travel
toward
input
data
element
remov
actual
output
still
consid
outgo
data
element
may
also
consid
logic
output
data
item
transform
data
flow
diagram
data
item
basic
convert
logic
output
form
system
requir
produc
output
usual
transform
left
abstract
input
output
data
item
central
transform
perform
basic
transforma-
tion
system
take
abstract
input
transform
abstract
output
purpos
central
transform
deal
abstract
data
item
modul
implement
transform
concentr
perform
transform
without
concern
convert
data
proper
format
valid
data
forth
consid
data
flow
diagram
autom
teller
shown
figur
two
abstract
input
dollar
amount
valid
account
number
valid
account
number
abstract
input
rather
account
number
read
still
input—but
guarante
account
number
valid
two
abstract
output
obviou
abstract
input
output
mark
data
flow
diagram
first-level
factor
identifi
central
transform
abstract
input
output
data
item
readi
identifi
modul
system
first
specifi
main
modul
whose
purpos
invok
subordin
main
modul
therefor
coordin
modul
abstract
input
data
item
immedi
subordin
modul
main
modul
specifi
modul
input
modul
whose
purpos
deliv
main
modul
abstract
data
item
creat
similarli
abstract
output
data
item
subordin
modul
output
modul
accept
data
main
modul
specifi
arrow
connect
input
output
subordin
modul
label
respect
abstract
data
item
flow
proper
direct
final
central
transform
modul
subordin
main
one
specifi
modul
transform
modul
whose
purpos
accept
data
main
modul
return
appropri
data
back
main
modul
data
item
come
transform
modul
main
modul
incom
arc
correspond
transform
data
flow
diagram
data
item
return
outgo
arc
transform
note
modul
creat
transform
input/output
modul
creat
data
item
let
u
examin
data
flow
diagram
atm
alreadi
seen
thi
ha
two
abstract
input
two
abstract
output
two
central
transform
draw
modul
get
structur
chart
shown
figur
see
first-level
factor
straightforward
abstract
input
output
data
item
identifi
data
flow
diagram
main
modul
overal
control
modul
form
main
program
procedur
implement
design
coordin
modul
invok
input
modul
get
abstract
data
item
pass
appropri
transform
modul
deliv
result
transform
modul
transform
modul
abstract
data
item
obtain
pass
output
modul
factor
input
output
transform
branch
first-level
factor-
ing
result
veri
high
level
structur
subordin
modul
ha
lot
process
simplifi
modul
must
factor
subordin
modul
distribut
work
modul
input
output
transform
modul
must
consid
factor
let
u
start
input
modul
purpos
input
modul
view
main
program
produc
data
factor
input
modul
transform
data
flow
diagram
produc
data
item
treat
central
transform
process
perform
first-level
factor
repeat
thi
new
central
transform
input
modul
consid
main
modul
subordin
input
modul
creat
input
data
stream
come
thi
new
central
transform
subordin
transform
modul
creat
new
central
transform
new
input
modul
creat
factor
physic
input
reach
factor
input
modul
usual
yield
ani
output
subordin
modul
factor
output
modul
symmetr
factor
input
modul
output
modul
look
next
transform
appli
output
bring
closer
ultim
desir
output
thi
becom
central
transform
output
modul
creat
data
stream
go
thi
transform
dure
factor
output
modul
usual
input
modul
data
flow
diagram
problem
suffici
detail
factor
input
output
modul
straightforward
howev
rule
factor
central
transform
goal
determin
subtrans-
form
togeth
compos
overal
transform
repeat
process
newli
found
transform
reach
atom
modul
factor
central
transform
essenti
exercis
function
decom-
posit
depend
design
’
experi
judgment
one
way
factor
transform
modul
treat
problem
right
start
data
flow
diagram
input
data
flow
diagram
data
come
modul
output
data
return
modul
transform
thi
data
flow
diagram
repres
subtransform
thi
transform
central
transform
factor
creat
subordin
transform
modul
transform
thi
data
flow
diagram
thi
process
repeat
new
transform
modul
creat
reach
atom
modul
exampl
consid
problem
determin
number
differ
word
input
file
data
flow
diagram
thi
problem
shown
figur
thi
problem
ha
onli
one
input
data
stream
input
file
desir
output
count
differ
word
file
transform
input
desir
output
first
thing
form
list
word
file
best
sort
list
thi
make
identifi
differ
word
easier
thi
sort
list
use
count
number
differ
word
output
thi
transform
desir
count
print
thi
sequenc
data
transform
data
flow
diagram
arc
data
flow
diagram
abstract
input
abstract
output
choic
abstract
input
obviou
start
follow
input
first
input
file
convert
word
list
essenti
input
differ
form
sort
word
list
still
basic
input
still
list
differ
order
thi
appear
abstract
input
becaus
next
data
i.e.
count
anoth
form
input
data
choic
abstract
output
even
obviou
count
natur
choic
data
form
input
usual
candid
abstract
output
thu
one
cen-
tral
transform
count-number-of-different-word
ha
one
input
one
output
data
item
structur
chart
first-level
factor
word
count
prob-
lem
shown
figur
thi
structur
one
input
modul
return
sort
word
list
main
modul
output
modul
take
main
modul
valu
count
onli
one
central
transform
thi
exampl
modul
drawn
note
data
item
travel
thi
transform
modul
data
item
go
central
transform
factor
input
modul
get-sorted-list
first-level
structur
shown
figur
transform
produc
input
return
thi
modul
i.e.
sort
transform
treat
central
transform
input
word
list
thu
first
factor
input
modul
get
list
transform
modul
sort
list
input
modul
factor
modul
need
perform
two
function
get
word
ad
list
note
loop
arrow
use
show
iter
thi
exampl
onli
one
transform
abstract
output
factor
output
need
done
factor
central
transform
count-the-number-of-different-word
shown
figur
thi
wa
rel
simpl
transform
need
draw
data
flow
diagram
determin
number
word
get
word
repeatedli
determin
previou
word
sort
list
thi
check
suffici
determin
word
differ
word
count
word
differ
three
differ
function
subordin
modul
get
structur
shown
figur
object-ori
oo
approach
softwar
develop
becom
ex-
treme
popular
recent
year
much
new
develop
done
use
oo
techniqu
languag
mani
advantag
oo
system
offer
oo
model
close
repres
problem
domain
make
easier
produc
understand
design
requir
chang
object
system
le
immun
chang
therebi
permit
chang
easili
inherit
close
associ
object
design
problem
domain
entiti
encourag
re-us
i.e.
new
applic
use
exist
modul
effect
therebi
reduc
develop
cost
cycl
time
object-ori
approach
believ
natur
provid
richer
structur
think
abstract
common
design
pattern
also
uncov
allow
reusabl
higher
level
design
pattern
advanc
topic
discu
interest
reader
refer
38
object-ori
design
approach
fundament
differ
function-ori
design
approach
primarili
due
differ
abstract
use
requir
differ
way
think
partit
said
think
object-ori
term
import
produc
truli
object-ori
design
thi
section
first
discu
import
concept
form
basi
object-orient
describ
uml
notat
use
object-ori
design
follow
oo
design
methodolog
veri
briefli
discu
main
concept
behind
object-orient
read-
er
familiar
oo
languag
familiar
concept
class
object
class
object
basic
build
block
oo
design
like
function
procedur
function-ori
design
object
entiti
encapsul
state
provid
servic
use
client
could
anoth
object
program
user
basic
properti
object
encapsul
encapsul
data
inform
contain
support
well-defin
abstract
set
servic
request
outsid
object
form
interfac
object
object
may
oper
defin
onli
intern
use
use
outsid
oper
form
part
interfac
major
advantag
encapsul
access
encapsul
data
limit
oper
defin
data
henc
becom
much
easier
ensur
integr
data
preserv
someth
veri
hard
ani
program
outsid
directli
manipul
data
structur
object
encapsul
separ
interfac
implement
also
allow
implement
chang
without
affect
client
long
interfac
preserv
encapsul
data
object
defin
state
object
import
properti
object
thi
state
persist
contrast
data
defin
function
procedur
gener
lost
onc
function
stop
activ
finish
current
execut
object
state
preserv
persist
life
object
i.e.
unless
object
activ
destroy
state
servic
object
togeth
defin
behavior
say
behavior
object
object
react
term
state
chang
act
act
object
request
servic
oper
gener
object
defin
oper
togeth
specifi
behavior
object
object
repres
basic
runtim
entiti
oo
system
occupi
space
memori
keep
state
oper
defin
opera-
tion
object
class
hand
defin
possibl
set
object
seen
object
attribut
whose
valu
constitut
much
state
object
attribut
object
ha
defin
class
object
similarli
oper
allow
object
servic
provid
defin
class
object
class
mere
definit
doe
creat
ani
object
hold
ani
valu
object
creat
get
privat
copi
instanc
variabl
oper
defin
class
perform
object
perform
state
particular
object
relationship
class
object
class
similar
relationship
type
element
type
class
repres
set
object
share
common
structur
common
behavior
wherea
object
instanc
class
relationship
among
object
object
stand-alon
entiti
ha
veri
limit
capabilities—it
onli
provid
servic
defin
ani
complex
system
compos
mani
object
differ
class
object
interact
overal
system
object
met
object-ori
system
object
interact
anoth
send
messag
object
perform
servic
provid
receiv
request
messag
object
invok
request
servic
method
send
result
need
thi
form
client-serv
interact
direct
fall
encapsul
abstract
support
object
object
invok
servic
object
say
two
object
relat
way
object
us
servic
anoth
object
associ
two
object
thi
associ
also
call
link—a
link
exist
one
object
anoth
object
us
servic
object
link
frequent
show
pointer
program
link
captur
fact
messag
flow
one
object
anoth
howev
link
exist
though
messag
flow
direct
link
inform
flow
direct
e.g.
server
may
return
result
associ
come
issu
visibl
object
visibl
basic
issu
link
object
object
b
client
object
abl
send
messag
b
supplier
object
b
must
visibl
final
program
differ
way
provid
thi
visibl
import
possibl
15
supplier
object
paramet
oper
client
send
messag
supplier
object
part
client
object
supplier
object
local
declar
oper
link
object
captur
client/serv
type
relationship
an-
type
relationship
object
aggreg
reflect
whole/part-of
relationship
though
necessari
aggreg
gener
im-
pli
contain
object
aggreg
object
b
c
object
b
c
gener
within
object
though
situa-
tion
conceptu
relationship
aggreg
may
get
reflect
actual
contain
object
main
implic
thi
contain
object
surviv
without
contain
object
link
case
inherit
polymorph
inherit
relat
class
allow
definit
implement
one
class
base
definit
exist
class
62
class
b
inherit
anoth
class
b
refer
subclass
deriv
class
refer
superclass
base
class
gener
subclass
b
two
part
deriv
part
increment
part
62
deriv
part
part
inherit
increment
part
new
code
definit
specif
ad
b
thi
shown
figur
62
object
type
b
deriv
part
well
increment
part
henc
defin
onli
increment
part
inherit
deriv
part
exist
class
defin
object
contain
inherit
often
call
relat
impli
object
type
b
also
instanc
type
instanc
subclass
though
instanc
superclass
also
instanc
superclass
inherit
relat
class
form
hierarchi
discuss
earlier
import
hierarchi
repres
structur
present
applic
domain
creat
simpli
reus
part
exist
class
hierarchi
object
class
also
object
superclass
problem
domain
power
inherit
lie
fact
common
featur
subclass
accumul
superclass
word
featur
place
higher
level
abstract
onc
thi
done
featur
inherit
parent
class
use
subclass
directli
thi
impli
mani
abstract
class
definit
avail
new
class
need
possibl
new
class
special
one
exist
class
case
exist
class
tailor
inherit
defin
new
class
inherit
broadli
classifi
two
type
strict
inherit
nonstrict
inherit
77
strict
inherit
subclass
take
featur
parent
class
add
addit
featur
special
data
member
oper
avail
base
class
also
avail
deriv
class
thi
form
support
is-a
relat
easiest
form
inherit
nonstrict
inherit
occur
subclass
doe
featur
parent
class
featur
redefin
form
satisfi
liskov
’
substitut
principl
class
hierarchi
need
simpl
tree
structur
may
graph
impli
class
may
inherit
multipl
class
thi
type
in-
herit
subclass
inherit
mani
superclass
call
multipl
inherit
multipl
inherit
complic
matter
use
gener
discourag
assum
multipl
inherit
use
inherit
bring
polymorph
gener
concept
wide
use
type
theori
deal
abil
object
differ
type
oo
program
polymorph
come
form
refer
refer
object
differ
type
differ
time
object-ori
system
inherit
polymorph
avoided—it
must
support
rea-
son
relat
support
inheritance—an
object
x
declar
class
b
also
object
ani
class
superclass
b
henc
anywher
instanc
expect
x
use
polymorph
entiti
ha
static
type
dynam
type
62
static
type
object
type
object
declar
program
text
remain
unchang
dynam
type
entiti
hand
chang
time
time
known
onli
refer
time
onc
entiti
declar
compil
time
set
type
thi
entiti
belong
determin
inherit
hierarchi
ha
defin
dynam
type
object
one
thi
set
actual
dynam
type
defin
time
refer
object
thi
type
polymorph
requir
dynam
bind
oper
dy-
namic
bind
mean
code
associ
given
procedur
call
known
moment
call
62
let
u
illustr
exampl
suppos
x
polymorph
refer
whose
static
type
b
whose
dynam
type
could
either
b
suppos
oper
defin
class
redefin
class
b
oper
in-
voke
x
known
static
code
execut
code
execut
statement
x.o
decid
runtim
depend
dynam
type
x—if
dynam
type
code
oper
class
execut
dynam
type
b
code
opera-
tion
class
b
execut
thi
dynam
bind
use
quit
effect
dure
applic
develop
reduc
size
code
thi
featur
polymorph
essenti
overload
featur
i.e.
featur
mean
differ
thing
differ
context
exact
mean
determin
onli
runtim
caus
problem
strict
inheri-
tanc
becaus
featur
superclass
avail
subclass
nonstrict
inherit
caus
problem
becaus
child
may
lose
featur
becaus
bind
featur
determin
runtim
thi
caus
runtim
error
situat
may
aris
object
bound
superclass
featur
present
uml
graphic
notat
express
object-ori
design
35
call
model
languag
design
notat
allow
repres
variou
aspect
system
design
ha
implement
oo
design
specif
class
exist
system
might
suffic
howev
model
dure
design
process
design
also
tri
understand
differ
class
relat
interact
provid
desir
function
thi
aspect
model
help
build
design
like
satisfi
requir
system
due
abil
uml
creat
differ
model
ha
becom
aid
understand
system
design
system
well
notat
repres
design
though
uml
ha
evolv
fairli
comprehens
larg
mod-
ele
notat
focu
central
concept
notat
relat
class
relationship
interact
detail
discuss
uml
reader
refer
35
class
diagram
class
diagram
uml
central
piec
design
model
name
suggest
diagram
describ
class
design
final
code
oo
implement
mostli
class
diagram
veri
close
relationship
final
code
mani
tool
translat
class
diagram
code
skeleton
therebi
avoid
error
might
get
introduc
class
diagram
manual
translat
class
definit
programm
class
diagram
defin
class
exist
system—besid
class
name
diagram
capabl
describ
key
field
well
import
method
class
associ
classes—what
type
associ
exist
dif-
ferent
class
subtyp
supertyp
relationship—class
may
also
form
subtyp
give
type
hierarchi
use
polymorph
class
diagram
repres
hierarchi
also
class
repres
rectangular
box
divid
three
area
top
part
give
class
name
convent
class
name
word
first
letter
uppercas
gener
class
name
combin
mani
word
first
letter
word
uppercas
middl
part
list
key
attribut
field
class
attribut
state
holder
object
class
convent
name
attribut
start
lowercas
multipl
word
join
new
word
start
uppercas
bottom
part
list
method
oper
class
repres
behavior
class
provid
name
convent
attribut
show
function
name
end
paramet
method
also
specifi
desir
class
interfac
specif
bodi
thi
specifi
mark
class
stereotyp
<
<
interfac
>
>
gener
written
abov
class
name
similarli
class/method/attribut
ha
properti
want
specifi
done
tag
entiti
specifi
properti
next
entiti
name
within
use
special
symbol
exampl
class
tag
valu
interfac
shown
figur
figur
6.12
class
stereotyp
tag
valu
divided-box
notat
describ
key
featur
class
stand-alon
entiti
howev
class
relationship
ob-
ject
differ
class
interact
therefor
model
system
applica-
tion
must
repres
relationship
class
one
common
relationship
generalization-speci
relationship
class
final
get
reflect
inherit
hierarchi
thi
hierarchi
properti
gen-
eral
signific
assign
gener
class—th
superclass—whil
properti
special
object
put
subclass
properti
superclass
inherit
subclass
subclass
contain
properti
well
superclass
generalization-speci
relationship
specifi
arrow
come
subclass
superclass
empti
triangle-shap
arrowhead
touch
superclass
often
multipl
subclass
class
thi
may
specifi
one
arrowhead
superclass
draw
line
thi
differ
subclass
thi
hierarchi
often
special
done
basi
discriminator—a
distinguish
properti
use
special
superclass
differ
subclass
word
use
discrimin
object
superclass
type
partit
set
object
differ
subclass
type
discrimin
use
generalization-speci
relationship
specifi
label
arrow
exampl
thi
relationship
model
uml
shown
figur
thi
exampl
iitkperson
class
repres
peopl
belong
iitk
broadli
divid
two
subclasses—stud
employe
type
mani
differ
properti
com-
mon
one
also
differ
behavior
similarli
student
two
differ
subclass
undergradu
postgradu
requir
differ
attribut
differ
constraint
employe
class
ha
subtyp
repres
faculti
staff
research
staff
thi
hierarchi
actual
work
system
develop
institut
besid
generalization-speci
relationship
anoth
common
re-
lationship
associ
allow
object
commun
associ
two
class
mean
object
one
class
need
servic
object
class
perform
servic
relationship
peer
object
class
use
servic
associ
shown
line
two
class
associ
may
name
specifi
label
associ
line
associ
also
assign
attribut
role
two
end
associ
need
name
also
done
associ
end
may
also
multipl
allow
rela-
tionship
like
1
etc.
model
fix
multipl
repres
put
number
end
zero
mani
multipl
repres
figur
6.14
aggreg
associ
among
class
anoth
type
relationship
part-whol
relationship
repres
situat
object
compos
mani
part
part
object
thi
situat
repres
contain
aggreg
i.e.
object
class
contain
insid
object
anoth
class
contain
ag-
gregat
treat
separ
shown
differ
consid
repres
thi
aggreg
relationship
class
repres
whole
shown
top
line
eman
littl
diamond
connect
class
repres
part
often
implement
thi
relationship
implement
manner
as-
sociat
henc
thi
relationship
also
sometim
model
associ
associ
aggreg
shown
figur
expand
exampl
given
abov
object
iitkperson
type
contain
two
object
type
address
repres
perman
address
current
address
also
contain
object
type
biometricinfo
keep
inform
like
person
’
pictur
signatur
object
common
peopl
belong
parent
class
rather
subclass
iitkperson
allow
take
advanc
institut
meet
expens
travel
medic
etc
henc
advanc
differ
class
incid
ha
hierarchi
iitkperson
class
ha
1-to-m
associ
relat
class
diagram
focu
class
confus
object
diagram
object
specif
instanc
class
sometim
desir
model
specif
object
relationship
object
diagram
use
object
repres
like
class
except
name
also
specifi
name
class
belong
gener
object
name
start
lowercas
class
name
specifi
colon
clarifi
entir
name
underlin
exampl
mylist
list
attribut
object
may
specif
valu
valu
specifi
give
along
attribut
name
e.g.
name
=
john
sequenc
collabor
diagram
class
diagram
repres
static
structur
system
captur
structur
code
may
implement
differ
class
code
relat
class
diagram
howev
repres
dynam
behavior
system
system
behav
perform
function
repres
class
diagram
thi
done
sequenc
diagram
collabor
diagram
togeth
call
interact
diagram
interact
diagram
typic
captur
behavior
use
case
model
differ
object
system
collabor
implement
use
case
let
u
first
discu
sequenc
diagram
perhap
common
two
interact
diagram
sequenc
diagram
show
seri
messag
exchang
object
tempor
order
object
collabor
provid
desir
system
function
implement
use
case
sequenc
diagram
gener
drawn
model
interact
object
particular
use
case
note
sequenc
diagram
also
collabor
diagram
object
particip
class
captur
dynam
behavior
role
class
limit
dure
execut
object
exist
sequenc
diagram
object
particip
interact
shown
top
box
object
name
object
vertic
bar
repres
lifelin
drawn
downward
messag
one
object
anoth
repres
arrow
lifelin
one
lifelin
messag
label
messag
name
typic
name
method
class
target
object
object
also
make
self
call
shown
messag
start
end
object
’
lifelin
clarifi
sequenc
messag
rel
time
time
repres
increas
one
move
farther
away
downward
object
name
object
life
time
repres
y-axi
increas
downward
figur
6.15
sequenc
diagram
print
graduat
report
use
lifelin
object
arrow
one
model
object
’
life
messag
flow
one
object
anoth
howev
frequent
messag
sent
one
object
anoth
onli
condit
thi
condit
repres
sequenc
diagram
specifi
within
bracket
befor
messag
name
messag
sent
multipl
receiv
object
thi
multipl
shown
befor
messag
name
messag
ha
return
oper
finish
return
valu
ani
invok
object
though
often
thi
messag
impli
sometim
may
desir
show
return
messag
explicitli
thi
done
use
dash
arrow
exampl
sequenc
diagram
shown
figur
thi
exampl
concern
print
graduat
report
student
object
gradreport
ha
respons
print
report
send
messag
student
object
relev
inform
request
coursetaken
object
cours
student
ha
taken
object
get
inform
cours
cours
object
collabor
diagram
also
show
object
commun
instead
use
timeline-bas
represent
use
sequenc
diagram
col-
labor
diagram
look
like
state
diagram
object
repres
diagram
messag
sent
one
object
anoth
shown
number
arrow
one
object
word
chrono-
logic
order
messag
captur
messag
number
contrast
sequenc
diagram
order
messag
shown
pictori
clear
two
type
interact
diagram
semant
equival
represent
power
collabor
diagram
abov
exampl
shown
figur
year
howev
sequenc
diagram
becom
popular
peopl
find
visual
represent
sequenc-
ing
quicker
grasp
figur
6.16
collabor
diagram
print
graduat
report
see
interact
diagram
model
intern
dynam
behavior
system
system
perform
function
intern
dynam-
ic
system
repres
term
object
interact
interact
diagram
one
clearli
see
system
inter-
nalli
implement
oper
messag
sent
differ
object
convinc
interact
diagram
construct
system
oper
class
identifi
class
diagram
safe
say
system
structur
capabl
support
thi
oper
must
enhanc
use
valid
system
structur
design
class
diagram
capabl
provid
desir
servic
system
ha
mani
function
involv
differ
object
differ
way
dynam
model
function
use
case
word
wherea
one
class
diagram
captur
structur
system
’
code
dynam
behavior
mani
diagram
need
howev
may
feasibl
practic
draw
interact
diagram
use
case
scenario
typic
dure
design
interact
diagram
key
use
case
function
drawn
make
sure
class
exist
inde
support
desir
use
case
understand
dynam
diagram
capabl
uml
extens
quit
elabor
model
notat
abov
discuss
notat
relat
two
common
model
develop
model
system—class
diagram
interact
diagram
two
togeth
help
model
static
structur
system
well
dynam
behavior
howev
mani
aspect
might
need
model
extra
notat
requir
uml
provid
notat
mani
differ
type
model
model
build
system
seen
compon
may
also
use
compon
encapsul
larger
element
semant
simpler
class
compon
often
encapsul
subsystem
provid
clearli
defin
interfac
compon
use
com-
ponent
system
design
architectur
seen
com-
ponent
veri
use
uml
provid
notat
specifi
compon
separ
notat
specifi
subsystem
larg
system
mani
class
may
combin
togeth
form
packag
packag
collec-
tion
mani
element
possibl
differ
type
uml
also
provid
notat
specifi
packag
shown
figur
discuss
chapter
5
deploy
view
system
distinct
compon
modul
view
deploy
view
focu
softwar
element
us
hardwar
system
deploy
uml
ha
notat
repres
deploy
view
main
element
node
repres
name
cube
repres
comput
resourc
like
cpu
physic
exist
name
cube
identifi
resourc
well
type
within
cube
node
softwar
element
deploy
compon
packag
class
etc
shown
use
respect
notat
differ
node
commun
thi
shown
connect
node
line
notat
packag
deploy
view
etc.
provid
structur
view
system
differ
perspect
uml
also
provid
notat
ex-
press
differ
type
behavior
state
diagram
model
entiti
model
view
set
state
transit
state
take
place
event
occur
state
repres
rectangl
round
edg
ellipsi
circl
transit
repres
arrow
con-
nect
two
state
detail
also
attach
transit
state
diagram
often
use
model
behavior
object
class—th
state
repres
differ
state
object
transit
captur
perform
differ
oper
object
wherea
interact
diagram
captur
object
collabor
state
diagram
model
object
evolv
oper
perform
thi
help
clearli
understand
specifi
behavior
class
activ
diagram
thi
anoth
diagram
model
dynam
behavior
aim
model
system
model
activ
take
place
system
execut
perform
function
activ
repres
oval
name
activ
within
activ
system
proce
activ
often
activ
perform
next
depend
decis
thi
decis
shown
diamond
lead
multipl
activ
option
thi
decis
repeat
execut
activ
also
shown
diagram
like
flow-chart
also
notat
specifi
parallel
execut
activ
system
specifi
activ
split
multipl
activ
mani
activ
join
synchron
complet
uml
extens
notat
allow
model
flexibl
repres
newer
concept
well
mani
situat
model
need
notat
similar
exist
one
exactli
exampl
case
one
may
want
specifi
class
abstract
class
interfac
instead
special
notat
concept
uml
ha
concept
stereotyp
exist
notat
use
model
differ
concept
exist
notat
exampl
class
use
repres
similar
concept
specifi
stereotyp
give
name
new
concept
within
<
<
>
>
alreadi
seen
exampl
earlier
metaclass
specifi
similar
manner
util
class
one
ha
util
function
directli
use
whose
object
creat
tag
valu
use
specifi
addit
properti
element
attach
attach
ani
name
spec-
ifi
within
though
tag
valu
anyth
model
want
best
limit
use
clearli
defin
pre-agre
properti
like
privat
abstract
queri
readonli
etc
note
also
attach
differ-
ent
element
model
earlier
seen
use
tag
valu
figur
use
case
diagram
also
part
uml
discuss
use
case
earlier
chapter
use
case
diagram
use
case
shown
node
relationship
actor
use
case
shown
arc
mostli
use
provid
high-level
summari
use
case
mani
design
analysi
methodolog
propos
state
earlier
methodolog
basic
us
concept
oo
thi
case
pro-
vide
guidelin
design
activ
though
methodolog
use
reduc
activ
design
sequenc
step
follow
mechan
briefli
discu
one
methodolog
even
though
one
earlier
methodolog
basic
concept
still
applic
15
assum
dure
architectur
design
system
ha
divid
high-level
subsystem
compon
problem
address
produc
object-ori
design
subsystem
discuss
earlier
oo
design
consist
specif
class
object
exist
system
implement
complet
oo
design
implement
phase
onli
detail
method
attribut
need
ad
low-level
object
may
ad
later
class
object
relationship
identifi
dure
design
approach
creat
oo
design
consist
follow
sequenc
step
develop
dynam
model
use
defin
oper
class
develop
function
model
use
defin
oper
class
identifi
class
relationship
identifi
class
re-
lationship
requir
identif
object
type
problem
domain
structur
class
inherit
aggreg
attribut
differ
class
associ
differ
class
servic
class
need
provid
support
system
basic
thi
step
tri
defin
initi
class
diagram
design
identifi
analysi
object
start
look
problem
descrip-
tion
descript
consid
phrase
repres
entiti
includ
entiti
object
system
need
rememb
someth
system
need
servic
perform
servic
ha
mul-
tipl
attribut
system
doe
need
keep
inform
real-world
entiti
doe
need
ani
servic
entiti
need
consid
object
design
care
consid
object
onli
one
attribut
object
frequent
includ
attribut
object
though
analysi
focu
identifi
object
model
class
object
repres
class
attribut
attribut
add
detail
class
repositori
data
object
exampl
object
class
person
attribut
could
name
sex
address
data
store
form
valu
attribut
hidden
outsid
object
access
manipul
onli
servic
function
object
attribut
use
defin
class
object
depend
problem
need
done
exampl
model
hospit
system
class
person
attribut
height
weight
date
birth
may
need
although
may
need
databas
counti
keep
track
popul
variou
neighborhood
identifi
attribut
consid
class
see
attribut
need
problem
domain
thi
frequent
simpl
task
posi-
tion
attribut
properli
use
structur
attribut
common
attribut
place
superclass
specif
special-
ize
object
place
subclass
identifi
attribut
new
class
may
also
get
defin
old
class
may
disappear
e.g.
find
class
realli
attribut
anoth
class
diagram
also
need
identifi
structur
associ
class
identifi
classif
structur
consid
class
identifi
gener
see
class
consid
special
thi
special
meaning
problem
domain
exampl
problem
domain
doe
care
materi
use
make
object
point
special
class
base
materi
made
similarli
consid
class
special
see
class
similar
attribut
see
gener
class
identifi
special
onc
structur
obtain
must
natur
reflect
hierarchi
problem
domain
extract
simpli
becaus
class
attribut
name
identifi
assembl
structur
similar
approach
taken
consid
object
class
assembl
identifi
part
see
system
need
keep
track
part
doe
part
must
reflect
object
part
model
separ
object
consid
object
class
part
see
class
’
object
consid
belong
onc
thi
separ
maintain
onli
system
need
befor
structur
identifi
natur
reflect
hierarchi
problem
domain
forc
associ
need
identifi
relationship
instanc
variou
class
exampl
instanc
class
compani
may
relat
instanc
class
person
employ
relationship
thi
similar
done
er
model
like
er
model
instanc
connec-
tion
may
1
could
1
indic
one
instanc
thi
class
may
relat
mani
instanc
class
connect
sometim
multiway
connect
veri
common
associ
object
deriv
problem
domain
directli
onc
object
identifi
associ
may
attribut
typic
attribut
natur
belong
either
object
although
mani
situat
forc
belong
one
two
object
without
lose
ani
inform
done
unless
attribut
natur
belong
object
dynam
model
class
diagram
obtain
give
initi
module-level
design
thi
design
shape
event
system
design
ha
ensur
expect
behavior
event
support
model
dynam
behavior
system
help
refin
design
dynam
model
system
aim
specifi
state
variou
object
chang
event
occur
event
someth
happen
time
instanc
object
event
essenti
request
oper
event
typic
occurr
someth
ha
time
durat
associ
event
ha
initi
respond
event
intern
system
case
event
initi
event
respond
within
system
event
extern
event
case
event
initi
outsid
system
e.g.
user
sensor
scenario
sequenc
event
occur
particular
execut
system
seen
discuss
use
case
chapter
3
scenario
differ
event
perform
differ
object
identifi
use
identifi
servic
object
differ
scenario
togeth
complet
character
behavior
system
design
support
scenario
sure
desir
dynam
behavior
system
support
design
thi
basic
reason
perform
dynam
model
use
case
dynam
model
involv
prepar
interact
diagram
import
scenario
best
start
model
scenario
trigger
extern
event
scenario
necessarili
cover
possibl
major
one
consid
first
main
success
scenario
model
scenario
except
case
model
exampl
restau-
rant
main
success
scenario
place
order
could
follow
sequenc
action
custom
read
menu
custom
place
order
order
sent
kitchen
prepar
order
item
serv
custom
re-
quest
bill
order
bill
prepar
thi
order
custom
given
bill
custom
pay
bill
except
scenario
could
order
item
wa
avail
custom
cancel
hi
order
scenario
event
identifi
event
interact
outsid
world
object-to-object
interact
event
effect
flow
control
system
group
singl
event
type
event
type
alloc
object
class
initi
servic
event
thi
done
scenario
repres
sequenc
collabor
diagram
show
event
take
place
differ
object
execut
correspond
scenario
possibl
sequenc
diagram
main
success
scenario
restaur
given
figur
figur
6.18
sequenc
diagram
restaur
onc
main
scenario
model
variou
event
object
need
support
execut
correspond
variou
scenario
known
thi
inform
use
expand
view
class
design
gener
speak
event
sequenc
diagram
oper
object
event
invok
use
scenario
sequenc
diagram
refin
view
object
add
oper
need
support
scenario
may
identifi
dure
initi
model
exampl
event
trace
diagram
figur
see
place
order
getbil
two
oper
requir
object
type
order
thi
interact
support
effect
differ
event
class
model
use
state
diagram
believ
state
transit
diagram
limit
use
dure
system
design
may
use
dure
detail
design
henc
discu
state
model
class
later
function
model
function
model
system
specifi
output
valu
comput
system
input
valu
without
consid
control
aspect
comput
thi
repres
function
view
system—th
map
input
output
variou
step
involv
map
gener
transform
input
output
complex
consist
mani
step
function
model
like
use
system
transform
input
output
complex
function
model
like
straightforward
seen
function
model
system
repres
data
flow
diagram
dfd
use
dfd
problem
model
structur
design
methodolog
discuss
earlier
dynam
model
basic
purpos
function
model
use
model
make
sure
object
model
perform
transform
requir
system
process
repres
oper
object-ori
system
process
done
oper
class
process
show
oper
class
oper
might
appear
singl
oper
object
might
appear
multipl
oper
differ
class
depend
level
abstract
dfd
dfd
suffici
detail
process
occur
oper
class
dfd
also
specifi
abstract
signatur
oper
identifi
input
output
defin
intern
class
oper
class
identifi
far
one
come
problem
domain
method
identifi
object
one
need
satisfi
interact
environ
user
support
desir
function
howev
final
design
blueprint
implement
henc
implement
issu
con-
sider
consid
implement
issu
algorithm
optim
issu
aris
issu
handl
thi
step
first
class
critic
evalu
see
need
present
form
final
implement
class
might
discard
design
feel
need
dure
implement
implement
oper
class
consid
thi
rough
algorithm
implement
might
consid
thi
complex
oper
may
get
defin
term
lower-level
oper
simpler
class
word
effect
implement
oper
may
requir
heavi
interact
data
structur
data
structur
consid
object
right
class
identifi
consid
implement
concern
larg
support
class
may
need
store
intermedi
result
model
aspect
object
whose
oper
implement
onc
implement
class
oper
class
ha
consid
ha
satisfi
implement
system
design
complet
detail
design
might
also
uncov
veri
low-level
object
object
identifi
dure
system
optim
packag
dure
design
ineffici
may
crept
thi
final
step
issu
effici
consid
keep
mind
final
structur
deviat
much
logic
structur
produc
variou
optim
possibl
design
exercis
hi
judgment
keep
mind
modular
aspect
also
befor
appli
methodolog
exampl
rememb
design
methodolog
reduc
activ
produc
design
seri
step
mechan
execut
step
requir
amount
engin
judgment
methodolog
essenti
guidelin
help
design
design
activ
hard-and-fast
rule
exampl
present
rel
small
aspect
methodol-
ogi
get
reflect
word
count
problem
let
u
first
consid
word
count
problem
discuss
earlier
exampl
structur
design
methodolog
initi
analysi
clearli
show
file
object
aggreg
mani
word
object
one
consid
counter
object
keep
track
number
differ
word
matter
prefer
opinion
whether
counter
object
count
im-
plement
oper
count
treat
oper
question
object
belong
doe
belong
natur
either
class
word
class
file
forc
one
class
thi
reason
kept
counter
separ
object
basic
problem
statement
find
onli
three
object
howev
analysi
servic
reveal
histori
mechan
need
check
word
uniqu
class
diagram
obtain
initi
model
shown
figur
let
u
consid
dynam
model
thi
problem
thi
essen-
tialli
batch
process
problem
file
given
input
output
given
system
henc
use
case
scenario
thi
problem
straightforward
exampl
scenario
normal
case
system
prompt
file
name
user
enter
file
name
figur
6.19
class
diagram
word
count
problem
thi
simpl
scenario
new
oper
uncov
class
diagram
stay
unchang
consid
function
model
one
possibl
function
model
shown
figur
model
reinforc
need
object
histori
word
seen
record
thi
object
use
check
uniqu
word
also
show
variou
oper
like
increment
isuniqu
addtohistori
need
oper
appear
oper
class
support
combin
oper
thi
exampl
process
reflect
oper
class
alreadi
incorpor
design
last
two
step
design
methodolog
implemen-
tation
optim
concern
use
enhanc
object
model
first
decis
take
histori
mechan
implement
bi-
nari
search
tree
henc
instead
class
histori
differ
class
btree
class
word
variou
oper
need
compar
dif-
ferent
word
oper
also
need
set
string
valu
word
retriev
final
class
diagram
similar
structur
one
shown
figur
except
chang
final
step
design
activ
specifi
thi
design
thi
part
design
methodolog
essenti
step
design
specif
form
major
part
design
document
design
specif
mention
earlier
specifi
class
design
method
class
along
interfac
use
c++
class
figur
6.20
function
model
word
count
problem
structur
specif
final
specif
thi
design
given
thi
specif
use
basi
implement
design
char
string
//
string
repres
word
public
bool
oper
==
word
//
check
equal
bool
oper
<
word
word
oper
=
word
//
assign
oper
void
setword
char
//
set
string
word
char
getword
//
get
string
word
word
getword
//
get
word
invok
oper
word
bool
iseof
//
check
end
file
class
btree
gener
<
element_typ
>
privat
btree
<
element_typ
>
left
btree
<
element_typ
>
right
void
insert
element_typ
//
insert
element
bool
lookup
element_typ
//
check
element
exist
see
class
definit
complet
data
member
oper
major
declar
given
design
specif
onli
implement
method
provid
thi
design
wa
later
implement
c++
convers
code
requir
onli
minor
addit
modif
design
final
code
wa
240
line
c++
code
count
noncom
nonblank
line
onli
rate
return
problem
let
u
consid
slightli
larger
problem
deter-
mine
rate
return
invest
investor
ha
made
invest
compani
invest
file
name
compani
money
ha
invest
initi
purchas
well
subsequ
purchas
money
ha
withdrawn
sale
share
div-
idend
given
along
date
transact
current
valu
invest
given
end
along
date
goal
find
rate
return
investor
get
invest
well
rate
return
entir
portfolio
addit
amount
ha
invest
initi
amount
ha
invest
subsequ
amount
ha
withdrawn
current
valu
portfolio
also
output
thi
practic
problem
frequent
need
investor
rate
return
calcul
easili
form
import
compon
larger
financi
manag
system
comput
rate
return
straight-
forward
easili
done
spreadsheet
henc
softwar
practic
use
initi
problem
analysi
easili
throw
object
class
interest—
portfolio
invest
transact
portfolio
consist
mani
in-
vestment
invest
consist
mani
transact
henc
class
portfolio
aggreg
mani
invest
invest
aggreg
mani
transact
transact
withdraw
type
deposit
type
result
class
hierarchi
invest
superclass
withdraw
deposit
subclass
object
class
invest
major
oper
need
perform
find
rate
return
class
portfolio
need
oper
comput
rate
return
total
initi
invest
total
withdraw
total
current
valu
portfolio
henc
need
oper
class
diagram
obtain
analysi
problem
shown
figur
figur
6.21
class
diagram
rate
return
problem
thi
problem
interact
environ
much
dynam
model
signific
henc
omit
dynam
model
thi
problem
possibl
function
model
given
figur
class
enhanc
make
sure
process
function
model
reflect
oper
variou
object
see
process
alreadi
exist
oper
perform
last
two
step
design
methodolog
implement
optim
concern
use
enhanc
class
consid
implement
comput
total
initi
invest-
ment
comput
overal
return
rate
overal
withdraw
notic
appropri
data
invest
need
figur
6.22
function
model
rate
return
problem
henc
class
invest
appropri
oper
need
ad
note
comput
total
initi
invest
total
current
valu
done
togeth
essenti
ad
valu
variou
invest
henc
combin
singl
oper
portfolio
correspond
singl
oper
invest
studi
class
hierarchi
observ
onli
differ
two
sub-
class
withdraw
deposit
one
case
amount
subtract
ad
situat
two
type
easili
consid
singl
type
keep
amount
neg
withdraw
posit
deposit
remov
subclass
therebi
simplifi
design
implement
instead
give
class
diagram
final
design
provid
specif
class
int
amount
//
money
amount
transact
int
month
//
month
transact
char
investmentnam
//
name
compani
transact
transactarray
//
list
transact
int
nooftransact
//
total
number
transact
float
rateofreturn
//
rate
return
gettransactdetail
//
set
detail
transact
computer
float
getrat
//
return
rate
return
comput
initv
totwithdrawl
totcurv
totdeposit
int
noofinvest
//
total
number
invest
int
totalinitinvest
int
totaldeposit
int
totalcurv
int
totalwithdrawl
float
rateofreturn
//
overal
rate
return
public
getinvestdetail
char
fname
//
pars
input
file
computer
//
comput
rate
return
printresult
//
print
return
rate
total
valu
etc
design
self-explanatori
thi
design
wa
later
implement
c++
code
found
onli
minor
implement
detail
got
ad
dure
implement
show
correct
complet
design
final
size
program
wa
470
line
c++
code
count
noncom
nonblank
line
onli
previou
two
section
discuss
two
differ
approach
system
design—on
base
function
abstract
one
base
object
sys-
tem
design
concentr
modul
system
interact
onc
modul
identifi
specifi
dure
high-
level
design
intern
logic
implement
given
specif
design
focu
thi
section
detail
design
activ
often
perform
formal
archiv
almost
imposs
keep
detail
design
document
consist
code
due
thi
develop
detail
design
use
complex
import
modul
often
done
inform
programm
part
person
process
develop
code
basic
goal
detail
design
specifi
logic
differ
modul
specifi
dure
system
design
specifi
logic
requir
develop
algorithm
implement
given
specif
consid
principl
design
algorithm
logic
implement
given
specif
term
algorithm
quit
gener
applic
wide
varieti
area
softwar
consid
algorithm
unambigu
proce-
dure
solv
problem
42
procedur
finit
sequenc
well-defin
step
oper
requir
finit
amount
memori
time
complet
thi
definit
assum
termin
essenti
prop-
erti
procedur
use
procedur
algorithm
logic
interchang
number
step
one
ha
perform
develop
algorithm
42
start
step
design
algorithm
statement
problem
problem
algorithm
devis
ha
precis
clearli
state
properli
understood
person
respons
design
algorithm
detail
design
problem
statement
come
system
design
problem
statement
alreadi
avail
detail
design
modul
commenc
next
step
develop-
ment
mathemat
model
problem
model
one
ha
select
mathemat
structur
best
suit
problem
help
look
similar
problem
solv
case
model
construct
take
model
similar
problem
modifi
model
suit
current
problem
next
step
design
algorithm
dur-
ing
thi
step
data
structur
program
structur
decid
onc
algorithm
design
correct
verifi
clear
procedur
given
design
algorithm
pro-
cedur
amount
autom
problem
algorithm
develop
possibl
current
method
howev
heurist
method
provid
help
design
design
algorithm
modul
common
method
design
algorithm
logic
modul
use
stepwis
refin
techniqu
84
stepwis
refin
techniqu
break
logic
design
problem
seri
step
develop
done
gradual
process
start
convert
specif
modul
abstract
descrip-
tion
algorithm
contain
abstract
statement
step
one
sever
statement
algorithm
develop
far
decompos
detail
instruct
success
refin
termin
in-
struction
suffici
precis
easili
convert
pro-
gram
languag
statement
dure
refin
data
instruct
refin
guidelin
refin
step
amount
decomposit
easili
handl
rep-
resent
one
two
design
decis
gener
detail
design
specifi
use
formal
program
languag
use
languag
formal
program
languag
like
outer
structur
like
loop
condit
etc
freer
format
intern
descript
thi
allow
design
focu
logic
represent
program
languag
object-ori
design
approach
discuss
obtain
de-
tail
design
use
design
logic
method
class
function
abstract
view
mere
collect
function
method
techniqu
get
detail
understand
class
whole
without
talk
logic
differ
method
ha
differ
refinement-bas
approach
object
class
ha
state
mani
oper
better
understand
class
relationship
state
variou
oper
effect
interact
variou
opera-
tion
understood
thi
view
one
object
detail
design
activ
object-ori
develop
onc
overal
class
better
understood
algorithm
variou
method
develop
method
understand
behavior
class
view
finit
state
automaton
consist
state
transit
state
model
object
state
valu
attribut
event
perform
oper
object
state
diagram
relat
event
state
show
state
chang
event
perform
state
diagram
object
gener
initi
state
state
reachabl
i.e.
path
initi
state
state
state
diagram
object
doe
repres
actual
state
object
mani
possibl
state
state
diagram
attempt
repres
onli
logic
state
object
logic
state
object
combin
state
behavior
object
similar
possibl
event
two
logic
state
differ
behavior
least
one
event
exampl
object
repres
stack
state
repres
stack
size
0
le
defin
maximum
similar
behavior
oper
defin
stack
similar
state
e.g.
push
add
element
pop
remov
one
etc.
howev
state
repres
empti
stack
differ
behavior
top
pop
oper
differ
error
messag
may
return
similarli
state
repres
full
stack
differ
state
model
thi
bound
size
stack
shown
figur
finit
state
model
object
aid
understand
effect
variou
oper
defin
class
state
object
good
un-
derstand
thi
aid
develop
logic
oper
develop
logic
oper
regular
approach
algorithm
develop
use
model
also
use
valid
logic
oper
correct
see
later
state
model
use
gener
test
case
valid
output
design
activ
verifi
befor
proceed
activ
next
phase
design
express
formal
notat
analysi
tool
avail
tool
check
intern
consist
e.g.
modul
use
anoth
defin
interfac
modul
consist
way
use
data
usag
consist
declar
etc
design
specifi
formal
execut
languag
process
tool
mean
verif
use
common
approach
verif
purpos
design
review
ensur
design
satisfi
re-
quirement
good
qualiti
error
made
dure
design
process
ultim
reflect
themselv
code
final
system
cost
remov
fault
caus
error
occur
dure
design
increas
delay
detect
error
best
design
error
detect
earli
befor
manifest
themselv
system
detect
error
design
purpos
design
review
system
design
review
process
similar
inspect
process
group
peopl
get
togeth
discu
design
aim
reveal
design
error
undesir
properti
review
group
must
includ
member
system
design
team
detail
design
team
author
requir
document
author
respons
maintain
design
document
independ
softwar
qualiti
engin
ani
review
kept
mind
aim
meet
uncov
design
error
tri
fix
fix
done
later
number
way
error
enter
design
limit
onli
creativ
design
import
design
error
howev
design
doe
fulli
support
requir
exampl
except
case
scenario
handl
design
constraint
ha
satisfi
design
qualiti
modular
main
criterion
howev
sinc
need
valid
whether
perform
requir
met
design
effici
anoth
key
properti
design
evalu
discu
metric
extract
design
could
use
evalu
design
discu
standard
metric
effort
defect
collect
per
project
plan
project
monitor
size
alway
product
metric
interest
size
design
total
number
modul
commonli
use
metric
use
averag
size
modul
thi
metric
final
size
loc
estim
compar
project
estim
anoth
metric
interest
complex
possibl
use
complex
met-
ric
design
time
improv
design
reduc
complex
modul
found
complex
thi
directli
improv
testabl
maintain
describ
metric
propos
quantifi
complex
design
first
discu
metric
function-ori
design
oo
design
network
metric
network
metric
complex
metric
tri
captur
good
structur
chart
coupl
modul
increas
call
modul
good
structur
consid
one
ha
exactli
one
caller
call
graph
structur
simplest
pure
tree
structur
chart
deviat
tree
complex
system
deviat
tree
defin
graph
impur
design
87
graph
impur
defin
n
number
node
structur
chart
e
number
edg
pure
tree
total
number
node
one
number
edg
graph
impur
tree
0
time
modul
ha
fan-in
one
graph
impur
increas
major
drawback
thi
approach
ignor
common
use
routin
like
librari
support
routin
approach
handl
thi
consid
lowest-level
node
graph
impur
becaus
often
lowest-level
modul
one
use
mani
differ
modul
particularli
structur
chart
wa
factor
librari
routin
also
lowest
level
structur
chart
even
structur
doe
show
structur
chart
applic
use
routin
network
metric
also
defin
metric
signific
correl
properti
interest
establish
henc
use
limit
get
idea
structur
design
inform
flow
metric
network
metric
graph
impur
basi
graph
impur
increas
coupl
increas
howev
veri
good
approxim
coupl
coupl
modul
increas
complex
interfac
total
number
modul
modul
coupl
whether
caller
calle
want
metric
better
quantifi
coupl
modul
handl
inform
flow
metric
attempt
defin
complex
term
total
inform
flow
modul
one
earliest
work
inform
flow
metric
48
49
com-
plexiti
modul
consid
depend
intramodul
complex
intermodul
complex
intramodul
complex
approxim
size
modul
line
code
intermodul
complex
modul
depend
total
inform
flow
modul
inflow
total
inform
flow
modul
outflow
inflow
mod-
ule
total
number
abstract
data
element
flow
modul
i.e.
whose
valu
use
modul
outflow
total
number
abstract
data
element
flow
modul
i.e.
whose
valu
defin
thi
modul
use
modul
modul
design
complex
dc
defin
term
inflow
outflow
refer
total
number
combin
input
sourc
output
destin
thi
term
squar
interconnect
modul
consid
import
factor
compar
intern
complex
determin
complex
modul
thi
base
common
experi
modul
interconnect
harder
test
modifi
compar
similar-s
modul
fewer
interconnect
metric
defin
earlier
defin
complex
modul
pure
term
total
amount
data
flow
modul
modul
size
variant
thi
wa
propos
base
hypothesi
modul
complex
depend
onli
inform
flow
also
number
modul
flow
modul
size
consid
insignific
factor
complex
dc
modul
defin
89
fan
repres
number
modul
call
thi
modul
fan
number
modul
thi
modul
call
thi
metric
use
design
one
method
highlight
modul
wa
suggest
89
let
avg
complex
averag
complex
modul
design
evalu
let
std
deviat
standard
deviat
design
complex
modul
system
propos
method
classifi
modul
three
categori
error-pron
complex
normal
dc
complex
modul
classifi
follow
note
thi
definit
error-pron
complex
independ
met-
ric
definit
use
comput
complex
modul
thi
approach
design
evalu
overal
design
qualiti
draw
at-
tention
error-pron
complex
modul
thi
inform
use
redesign
system
reduc
complex
modul
also
result
overal
complex
reduct
thi
approach
ha
found
veri
effect
identifi
error-pron
modul
89
attempt
made
propos
metric
object-ori
softwar
1
21
64
present
metric
propos
evalu
complex
ood
design
class
central
issu
ood
major
output
ani
ood
methodolog
class
definit
metric
focu
evalu
class
metric
discuss
propos
21
discu
metric
experiment
found
use
predict
fault-pron
3
weight
method
per
class
wmc
effort
develop
class
sens
determin
number
method
class
ha
complex
method
henc
complex
metric
combin
number
method
complex
method
use
estim
overal
complex
class
weight
method
per
class
wmc
metric
doe
precis
thi
suppos
class
c
ha
method
m1
m2
...
mn
defin
let
com-
plexiti
method
mi
ci
method
like
regular
function
pro-
cedur
ani
complex
metric
applic
function
use
defin
ci
e.g.
estim
size
interfac
complex
data
flow
complex
wmc
defin
complex
method
consid
1
wmc
give
total
number
method
class
depth
inherit
tree
dit
inherit
mention
one
uniqu
featur
object-ori
paradigm
said
befor
inherit
one
main
mechan
reus
ood—th
deeper
particular
class
class
hierarchi
method
ha
avail
reus
therebi
provid
larger
reus
potenti
time
mention
inherit
increas
coupl
make
chang
class
harder
word
class
deep
hierarchi
ha
lot
method
inherit
make
difficult
predict
behavior
reason
use
metric
quantifi
inherit
depth
inherit
tree
dit
one
metric
dit
class
c
inherit
hierarchi
depth
root
class
inherit
tree
word
length
shortest
path
root
tree
node
repres
c
number
ancestor
c
ha
case
multipl
inherit
dit
metric
maximum
length
root
c
coupl
class
cbc
coupl
class
cbc
metric
tri
quantifi
coupl
exist
class
cbc
valu
class
c
total
number
class
class
coupl
two
class
consid
coupl
method
one
class
use
method
instanc
variabl
defin
class
gener
whether
two
class
coupl
easili
determin
look
code
definit
method
two
class
howev
note
indirect
form
coupl
pointer
etc
hard
identifi
evalu
code
respons
class
rfc
although
cbc
class
captur
number
class
thi
class
coupl
doe
quantifi
strength
interconnect
word
doe
explain
degre
connect
method
class
class
respons
class
rfc
tri
quantifi
thi
captur
total
number
method
invok
object
thi
class
rfc
valu
class
c
cardin
respons
set
class
respons
set
class
c
set
method
invok
messag
sent
object
thi
class
thi
includ
method
c
class
ani
method
c
send
messag
clear
even
cbc
valu
class
1
coupl
onli
one
class
rfc
valu
may
quit
high
indic
volum
interact
two
class
veri
high
clear
like
harder
test
class
higher
rfc
valu
design
system
plan
solut
plan
implement
implement
system
satisfi
requir
system
preserv
architectur
module-level
design
specifi
modul
system
implement
architectur
detail
design
process
logic
modul
system
consid
modular
modul
ha
well-defin
abstrac-
tion
chang
one
modul
ha
minim
impact
modul
two
criterion
use
evalu
modular
design
coupl
cohe-
sion
coupl
reflect
interdepend
modul
cohes
measur
strength
differ
element
modul
relat
gener
design
coupl
minim
cohes
maxim
design
also
support
open-clos
principl
modul
open
extens
close
modif
structur
chart
procedur
system
repres
modul
system
call
relationship
structur
design
methodolog
give
guidelin
creat
design
repres
structur
chart
modul
minimum
depend
low
coupl
high
level
cohes
thi
methodolog
partit
system
veri
top
level
variou
subsystem
one
manag
major
input
one
manag
major
output
one
major
transform
thi
cleanli
partit
system
part
independ
deal
differ
concern
univers
model
languag
uml
ha
variou
type
diagram
model
differ
properti
allow
static
structur
well
dynam
behavior
model
repres
static
structur
main
diagram
class
diagram
repres
class
system
relationship
class
model
dynam
behavior
sequenc
collabor
diagram
may
use
show
scenario
implement
involv
differ
object
use
uml
notat
oo
design
system
creat
oo
design
methodolog
focu
identifi
class
relationship
valid
class
definit
use
dynam
function
mod-
ele
detail
design
procedur
logic
implement
procedur
specifi
semiform
notat
class
state
diagram
use
model
relationship
method
common
method
verifi
design
design
review
team
peopl
review
design
purpos
find
defect
number
metric
use
evalu
complex-
iti
design
network
metric
evalu
structur
chart
consid
deviat
tree
metric
signifi
qualiti
design
inform
flow
complex
metric
defin
design
complex
base
intern
complex
modul
number
connect
modul
use
identifi
error-pron
modul
improv
design
reduc
complex
complex
object-ori
design
metric
like
weight
method
per
class
depth
inherit
tree
class
maximum
depth
class
hierarchi
thi
class
use
relationship
architectur
module-level
design
given
design
implement
sr
criterion
use
evalu
qualiti
thi
design
consid
program
contain
mani
modul
global
variabl
x
must
use
share
data
two
modul
b
would
design
interfac
modul
minim
coupl
cohes
follow
modul
would
chang
modul
increas
cohes
procedur
file
file
ptr
file
name
op
name
begin
open
perform
activ
open
file
close
perform
activ
open
file
print
print
file
draw
structur
chart
follow
program
would
modifi
thi
program
improv
modular
list
practic
follow
develop
softwar
system
use
object-ori
approach
increas
cohes
reduc
coupl
final
object-ori
implement
mostli
class
code
dure
design
role
dynam
model
use
uml
measur
inform
flow
complex
full
design
specifi
structur
chart
describ
two
metric
quantifi
complex
object-ori
design
use
one
identifi
highly-complex
error-pron
modul
goal
code
program
activ
implement
design
best
possibl
manner
code
activ
affect
test
main-
tenanc
profoundli
saw
earlier
time
spent
code
small
percentag
total
softwar
cost
test
mainten
consum
major
portion
thu
clear
goal
dure
code
reduc
implement
cost
help
reduc
cost
later
phase
dure
code
kept
mind
program
construct
easi
write
manner
easi
read
understand
program
read
lot
often
lot
peopl
dure
later
phase
readabl
understand
clear
object
cod-
ing
activ
help
achiev
famou
experi
weinberg
show
programm
specifi
clear
object
program
usual
satisfi
82
experi
five
differ
team
given
problem
develop
program
howev
team
wa
specifi
differ
object
satisfi
differ
object
given
minim
effort
requir
complet
program
minim
number
statement
minim
memori
requir
maxim
program
clariti
maxim
output
clariti
wa
found
case
team
best
object
wa
specifi
rank
differ
team
differ
object
shown
tabl
experi
clearli
show
object
clear
programm
tend
achiev
object
henc
readabl
object
code
activ
like
programm
develop
easili
understand
p.
jalot
concis
introduct
softwar
engin
program
also
show
focu
minim
code
effort
program
clariti
take
big
hit
purpos
eas
understand
modif
basic
goal
program
activ
principl
like
structur
program
inform
hide
use
cod-
ing
standard
help
develop
readabl
program
programmer-level
process
like
increment
develop
test-
driven
develop
effici
develop
high-qual
code
manag
evolv
code
use
proper
sourc
code
control
refac-
tore
unit
test
modul
use
unit
test
framework
structur
code
inspect
process
use
effect
improv
qualiti
code
main
task
befor
programm
write
readabl
code
bug
addit
goal
write
code
quickli
write
solid
code
skill
onli
acquir
practic
howev
base
experi
gener
rule
guidelin
given
programm
good
program
produc
correct
simpl
program
practic
independ
target
program
languag
although
well-structur
program
languag
make
programm
’
job
simpler
thi
section
discu
concept
practic
help
programm
write
higher-qu
code
also
easier
understand
state
earlier
basic
object
code
activ
produc
pro-
gram
easi
understand
ha
argu
mani
structur
program
practic
help
develop
program
easier
understand
structur
program
movement
start
1970
much
ha
said
written
concept
pervad
much
gener
accepted—even
implied—that
program
structur
though
lot
emphasi
ha
place
structur
program
con-
cept
motiv
behind
structur
program
often
well
under-
stood
structur
program
often
regard
goto-less
program
although
extens
use
goto
certainli
desir
structur
program
written
use
goto
provid
brief
discuss
structur
program
program
ha
static
structur
well
dynam
structur
static
structur
structur
text
program
linear
orga-
nizat
statement
program
dynam
structur
program
sequenc
statement
execut
dure
execut
program
word
static
structur
dynam
behavior
sequenc
statement
sequenc
repres
static
structur
program
fix
sequenc
statement
execut
chang
execut
execut
clearli
easier
understand
dynam
behavior
structur
dynam
behavior
resembl
static
structur
closer
corre-
spondenc
execut
text
structur
easier
program
understand
differ
structur
dure
execut
harder
argu
behavior
program
text
goal
structur
program
ensur
static
structur
dynam
structur
object
structur
program
write
program
sequenc
statement
execut
dure
ex-
ecut
program
sequenc
statement
text
program
statement
program
text
linearli
organ
object
structur
program
becom
develop
program
whose
control
flow
dure
execut
linear
follow
linear
organ
program
text
real
motiv
structur
program
howev
wa
formal
ver-
ific
program
show
program
correct
need
show
program
execut
behavior
expect
specifi
behavior
need
specifi
condit
output
program
satisfi
program
usual
oper
arbitrari
set
input
data
may
produc
valid
result
onli
rang
input
gener
need
also
state
input
condit
program
invok
program
expect
produc
valid
result
assert
expect
final
state
program
call
post-condit
pro-
gram
assert
input
condit
call
pre-condit
program
often
program
verif
determin
pre-condit
post-condit
satisfi
goal
proof
use
hoar
’
notat
50
verifi
program
basic
assert
program
segment
form
interpret
thi
assert
p
true
befor
execut
assert
q
true
execut
execut
termin
assert
p
pre-condit
program
q
post-condit
assert
valu
taken
variabl
program
befor
execut
assert
gener
specifi
par-
ticular
valu
variabl
specifi
gener
properti
valu
relationship
among
verif
larger
program
would
like
make
assert
program
assert
compon
statement
program
sequenc
statement
determin
semant
composit
program
becom
easier
statement
compos
two
statement
s2
execut
sequenc
semant
s2
easili
determin
semant
thi
rule
call
rule
composit
50
follow
explan
thi
notat
state
numer
prove
denomin
infer
use
thi
rule
prove
p2
determin
semant
s1
s2
need
show
q2
claim
befor
execut
pre-condit
p
execut
s1
s-condit
q
word
prove
p
s1
onc
determin
behavior
s2
need
one
addit
step
thi
allow
build
proof
larger
program
proof
element
note
rule
handl
strict
sequenc
statement
onli
want
appli
thi
need
construct
program
sequenc
statement
verif
motiv
want
linear
control
flow
program
clearli
meaning
program
written
sequenc
simpl
statement
without
ani
branch
repetit
also
involv
branch
object
linear
control
flow
achiev
make
use
structur
construct
structur
program
statement
simpl
assign
statement
structur
statement
key
properti
structur
statement
ha
single-entri
single-exit
dure
execut
execut
structur
statement
start
one
defin
point
execut
termin
one
defin
point
single-entri
single-exit
statement
view
program
sequenc
structur
statement
statement
structur
statement
dure
execut
sequenc
execut
statement
sequenc
program
text
henc
use
single-entri
single-exit
statement
correspond
static
dynam
structur
obtain
commonli
use
single-entri
single-exit
statement
shown
three
basic
construct
suffici
program
ani
conceiv
algorithm
modern
languag
construct
help
linear
control
flow
program
gener
speak
make
easier
understand
program
henc
program
written
far
possibl
single-entri
single-exit
control
construct
use
basic
goal
tri
emphas
make
logic
program
simpl
understand
hard-and-fast
rule
formul
applic
circumst
structur
program
practic
form
good
basi
guidelin
write
program
clearli
final
note
structur
construct
ani
piec
code
single-
entri
single-exit
consid
structur
construct
case
one
could
alway
defin
appropri
unit
ani
program
make
ap-
pear
sequenc
unit
worst
case
whole
program
could
defin
unit
basic
object
use
structur
construct
linear
control
flow
execut
behavior
easier
under-
stand
argu
linear
control
flow
understand
behavior
basic
construct
properli
behavior
program
consid
composit
behavior
differ
statement
thi
approach
work
impli
clearli
understand
specifi
behavior
construct
thi
requir
abl
succinctli
captur
describ
behavior
construct
unless
thi
possibl
compos
clearli
arbitrari
structur
thi
mere
becaus
ha
single-entri
single-exit
thi
view-
point
structur
mention
earlier
chosen
structur
statement
well-defin
rule
specifi
statement
behav
dure
execut
allow
u
argu
larger
program
overal
said
structur
program
lead
program
easier
understand
unstructur
program
program
easier
formal
prove
howev
kept
mind
structur
program
end
basic
object
program
easi
understand
structur
program
safe
approach
achiev
thi
object
still
common
program
practic
well
understood
make
use
unstructur
construct
e.g.
break
statement
continu
statement
although
effort
made
avoid
use
statement
effect
violat
single-entri
single-exit
properti
use
statement
simplest
way
organ
program
point
view
readabl
construct
use
main
point
ani
unstructur
construct
use
onli
structur
altern
harder
understand
thi
view
taken
onli
becaus
focus
readabl
object
wa
formal
verifi
structur
program
probabl
necessari
softwar
solut
problem
alway
contain
data
structur
meant
repres
inform
problem
domain
softwar
develop
solv
problem
softwar
us
data
structur
captur
inform
problem
domain
gener
onli
certain
oper
perform
inform
piec
inform
problem
domain
use
onli
limit
number
way
problem
domain
exampl
ledger
account
’
offic
ha
veri
defin
us
debit
credit
check
current
balanc
etc
oper
debit
multipli
togeth
divid
sum
credit
typic
perform
ani
inform
problem
domain
typic
ha
small
number
defin
oper
perform
inform
repres
data
structur
principl
appli
onli
defin
oper
perform
data
structur
thi
essenti
principl
inform
hide
inform
captur
data
structur
hidden
rest
system
onli
access
function
data
structur
repres
oper
perform
inform
visibl
word
inform
captur
data
structur
data
structur
repres
inform
oper
inform
access
function
provid
rest
system
problem
domain
onli
perform
defin
oper
inform
rest
modul
softwar
onli
use
access
function
access
manipul
data
structur
inform
hide
reduc
coupl
modul
make
system
maintain
inform
hide
also
effect
tool
manag
complex
develop
software—bi
use
inform
hide
separ
concern
manag
data
concern
use
data
produc
desir
result
mani
older
languag
like
pascal
c
fortran
pro-
vide
mechan
support
data
abstract
languag
informa-
tion
hide
support
onli
disciplin
use
languag
access
restrict
impos
programm
lan-
guag
doe
provid
modern
oo
languag
provid
linguist
mechan
implement
inform
hide
concept
discuss
abov
help
write
simpl
clear
code
bug
mani
program
practic
also
help
toward
object
discu
rule
found
make
code
easier
read
well
avoid
error
control
construct
discuss
earlier
desir
much
possibl
single-entri
single-exit
construct
use
also
desir
use
standard
control
construct
rather
use
wide
varieti
construct
becaus
avail
languag
goto
goto
use
sparingli
disciplin
manner
onli
altern
use
goto
complex
goto
use
ani
case
altern
must
thought
befor
final
use
goto
goto
must
use
forward
transfer
jump
later
statement
accept
backward
jump
inform
hide
discuss
earlier
inform
hide
support
possibl
onli
access
function
data
structur
made
visibl
hide
data
structur
behind
function
user-defin
type
modern
languag
allow
user
defin
type
like
enumer
type
facil
avail
ex-
ploit
applic
exampl
work
date
type
defin
day
week
use
type
make
program
much
clearer
defin
code
day
work
code
nest
nest
if-then-els
construct
becom
deep
logic
becom
harder
understand
case
deepli
nest
if-then-els
often
difficult
determin
statement
particular
els
claus
associ
possibl
deep
nest
avoid
even
mean
littl
ineffici
exampl
consid
follow
construct
nest
if-then-els
differ
condit
disjoint
often
thi
structur
convert
follow
structur
thi
sequenc
statement
produc
result
earlier
sequenc
condit
disjoint
much
easier
understand
price
littl
ineffici
modul
size
discuss
thi
issu
dure
system
design
programm
care
examin
ani
function
mani
statement
say
100
larg
modul
often
function
cohes
hard-and-fast
rule
modul
size
guid
principl
cohes
coupl
modul
interfac
modul
complex
interfac
care
examin
rule
thumb
ani
modul
whose
interfac
ha
five
paramet
care
examin
broken
multipl
modul
simpler
interfac
possibl
side
effect
modul
invok
sometim
ha
side
effect
modifi
program
state
beyond
modif
paramet
list
modul
interfac
definit
exampl
modifi
global
variabl
side
effect
avoid
possibl
modul
ha
side
effect
properli
document
robust
program
robust
doe
someth
plan
even
except
condit
program
might
encount
except
condit
form
incorrect
input
incorrect
valu
variabl
overflow
situat
aris
program
crash
core
dump
produc
meaning
messag
exit
grace
switch
case
default
default
case
switch
statement
behavior
unpredict
case
aris
point
time
wa
predict
develop
stage
practic
result
bug
like
null
derefer
memori
leak
well
type
seriou
bug
good
practic
alway
includ
default
case
0
=
/
null
derefer
default
occur
/
empti
catch
block
except
caught
action
may
repres
scenario
oper
done
perform
whenev
except
caught
good
practic
take
default
action
even
print
error
messag
file
inputstream
fi
=
new
file
inputstream
``
inputfil
``
empti
statement
condit
check
noth
done
base
check
thi
often
occur
due
mistak
caught
similar
error
includ
empti
final
tri
synchron
empti
static
method
etc
useless
check
avoid
x
==
0
/
noth
done
check
x
/
els
read
return
check
often
return
valu
read
check
assum
read
return
desir
valu
sometim
result
read
differ
expect
thi
caus
failur
later
may
case
neglect
thi
condit
may
result
seriou
error
exampl
read
scanf
expect
may
caus
buffer
overflow
henc
valu
read
check
befor
access
data
read
thi
reason
whi
languag
provid
return
valu
read
oper
return
final
block
one
return
final
block
creat
fals
belief
exampl
consid
code
throw
new
except
``
except
``
thi
exampl
valu
return
except
nonexcept
sce-
nario
henc
caller
site
user
abl
distinguish
two
anoth
interest
case
aris
return
tri
block
thi
case
return
final
also
valu
final
return
instead
valu
tri
correl
paramet
often
implicit
correl
paramet
exampl
code
segment
given
length
rep-
resent
size
buffer
correl
doe
hold
run
seriou
problem
like
buffer
overflow
illustr
code
fragment
henc
good
practic
valid
thi
correl
rather
assum
hold
gener
desir
counter
check
implicit
assumpt
paramet
void
char
src
int
length
char
destn
strcpi
destn
src
/
caus
buffer
overflow
trust
data
sourc
counter
check
made
befor
access
input
data
particularli
input
data
provid
user
obtain
network
exampl
string
copi
oper
check
sourc
string
null
termin
size
expect
similar
case
network
data
may
snif
prone
modif
corrupt
avoid
problem
due
chang
put
check
like
pariti
check
hash
etc.
ensur
valid
incom
data
give
import
except
programm
tend
give
le
attent
possibl
except
case
tend
work
main
flow
event
control
data
though
main
work
done
main
path
except
path
often
caus
softwar
system
fail
make
softwar
system
reliabl
programm
consid
possibl
write
suitabl
except
handler
prevent
failur
loss
programm
spend
far
time
read
code
write
code
life
code
author
spend
consider
time
read
dure
debug
enhanc
peopl
author
also
spend
consider
effort
read
code
becaus
code
often
maintain
someon
author
short
prime
import
write
code
manner
easi
read
understand
code
standard
provid
rule
guidelin
aspect
program
order
make
code
easier
read
organ
develop
softwar
regularli
develop
standard
gener
code
standard
provid
guidelin
programm
regard
name
file
organ
statement
declar
layout
com-
ment
give
idea
code
standard
often
call
convent
style
guidelin
discu
guidelin
java
base
publicli
avail
standard
java.sun.com/doc
name
convent
standard
name
convent
fol-
low
often
packag
name
lowercas
e.g.
mypackag
edu.iitk.math
type
name
noun
start
uppercas
e.g.
day
dateofbirth
eventhandl
variabl
name
noun
start
lowercas
e.g.
name
amount
constant
name
uppercas
e.g.
pi
max
iter
method
name
verb
start
lowercas
e.g.
getvalu
privat
class
variabl
suffix
e.g.
privat
int
valu
standard
requir
thi
prefix
variabl
larg
scope
long
name
variabl
small
scope
short
name
loop
iter
name
j
k
etc
prefix
use
boolean
variabl
method
avoid
confus
e.g.
isstatu
use
instead
statu
neg
boolean
variabl
name
e.g.
isnotcorrect
avoid
term
comput
use
method
someth
com-
pute
term
find
use
someth
look
e.g.
computemean
findmin
except
class
suffix
except
e.g.
outofboundex-
ception
file
convent
file
name
file
contain
reader
get
idea
file
con-
tain
exampl
convent
java
sourc
file
extens
.java—thi
enforc
compil
tool
file
contain
one
outer
class
class
name
file
name
line
length
limit
le
80
column
special
charac-
ter
avoid
line
longer
continu
continu
made
veri
clear
statement
guidelin
declar
execut
state-
ment
sourc
code
exampl
given
note
howev
everyon
agre
whi
organ
gener
develop
guidelin
follow
without
restrict
flexibl
programm
type
work
organ
doe
variabl
initi
declar
declar
smallest
possibl
scope
declar
relat
variabl
togeth
common
statement
unrel
vari-
abl
declar
statement
loop
variabl
initi
immedi
befor
loop
avoid
complex
condit
expressions—introduc
temporari
boolean
vari-
abl
instead
comment
layout
comment
textual
statement
meant
program
reader
aid
understand
code
purpos
com-
ment
explain
english
logic
program—if
logic
complex
requir
comment
explain
better
rewrit
simplifi
code
instead
gener
comment
explain
code
whi
code
code
becom
almost
stan-
dalon
understand
system
comment
gener
provid
block
code
mani
case
onli
comment
modul
need
provid
provid
comment
modul
use
modul
form
unit
test
compil
verif
modif
comment
modul
often
call
prologu
modul
describ
function
purpos
modul
public
interfac
modul
use
paramet
interfac
assumpt
make
paramet
ani
side
effect
ha
featur
may
also
includ
note
prologu
use
onli
kept
consist
logic
modul
modul
modifi
prologu
also
modifi
necessari
java
provid
document
comment
delimit
/
...
/
could
extract
html
file
comment
mostli
use
prologu
class
method
field
meant
provid
document
user
class
may
access
sourc
code
addit
prologu
modul
code
standard
may
specifi
comment
locat
guidelin
singl
line
comment
block
code
align
code
meant
comment
major
variabl
explain
rep-
resent
block
comment
preced
blank
comment
line
/
end
line
contain
/
trail
comment
statement
short
line
shift
far
enough
separ
statement
layout
guidelin
focu
program
indent
use
blank
line
white
space
etc.
make
easili
readabl
indent
guidelin
sometim
provid
type
program
construct
howev
programm
learn
see
code
code
fragment
book
document
mani
becom
fairli
standard
year
discu
except
say
programm
use
convent
use
consist
code
activ
start
form
design
ha
done
specif
modul
develop
avail
design
modul
assign
develop
code
modul
assign
develop
use
process
develop
code
clearli
wide
rang
process
possibl
achiev
thi
goal
discu
effect
process
develop
use
increment
develop
code
process
follow
mani
develop
write
code
current
assign
modul
done
perform
unit
test
fix
bug
found
code
check
project
repositori
make
avail
project
explain
process
check
later
better
process
code
often
follow
experienc
develop
develop
code
increment
write
code
im-
plement
onli
part
function
modul
thi
code
compil
test
quick
test
check
code
ha
written
far
code
pass
test
develop
proce
add
function
code
test
word
code
develop
increment
test
built
thi
code
process
shown
figur
basic
advantag
develop
code
increment
test
done
everi
round
code
facilit
debugging—an
error
found
test
safe
attribut
code
wa
ad
sinc
last
success
test
howev
follow
thi
process
essenti
test
done
test
script
run
easili
test
script
test
done
frequent
desir
new
test
case
ad
easili
test
script
also
tremend
aid
code
enhanc
future—through
test
script
quickli
check
earlier
function
still
work
test
script
also
use
enhanc
final
unit
test
often
done
befor
check
modul
test-driven
develop
tdd
8
code
process
turn
around
common
approach
code
instead
write
code
develop
test
case
check
code
tdd
way
around—a
programm
first
write
test
script
write
code
pa
test
whole
process
done
increment
test
written
base
specif
code
written
pa
test
tdd
process
shown
figur
thi
rel
new
approach
ha
adopt
extrem
program
xp
methodolog
7
concept
tdd
howev
gener
tie
ani
particular
methodolog
point
worth
note
tdd
first
approach
say
write
enough
code
pa
test
follow
thi
code
alway
sync
test
thi
alway
case
code-first
approach
common
write
long
piec
code
onli
write
test
cover
onli
part
code
encourag
code
written
onli
pa
test
respons
ensur
requir
function
built
shift
activ
design
test
case
task
test
case
check
code
develop
ha
function
need
thi
write
test
case
befor
code
written
make
develop
usage-driven
sinc
test
case
written
first
specif
code
use
get
attent
first
thi
help
ensur
interfac
perspect
user
code
key
usag
scenario
thi
help
reduc
interfac
error
tdd
type
priorit
code
develop
natur
hap-
pen
like
first
test
like
focu
use
main
function
gener
test
case
lower-prior
featur
func-
tional
develop
later
consequ
code
high-prior
featur
develop
first
lower-prior
item
develop
later
thi
ha
benefit
higher-prior
item
get
done
first
ha
drawback
lower-prior
featur
special
case
test
case
written
may
get
handl
code
code
written
satisfi
test
case
complet
code
depend
thorough
test
case
often
hard
tediou
write
test
case
scenario
special
condit
highli
unlik
develop
write
test
case
special
case
tdd
goal
write
enough
code
pa
test
case
special
case
may
get
handl
also
step
code
written
primarili
pa
test
may
later
found
earlier
algorithm
well
suit
case
code
improv
befor
new
function
ad
shown
figur
pair
program
also
code
process
ha
propos
key
tech-
niqu
extrem
program
xp
methodolog
7
pair
program
code
written
individu
programm
pair
programm
code
work
assign
individu
pair
individu
thi
pair
togeth
write
code
process
envisag
one
person
type
program
activ
particip
constantli
review
type
error
notic
point
correct
need
pair
discu
algorithm
data
structur
strategi
use
code
written
role
rotat
frequent
make
equal
partner
similar
role
basic
motiv
pair
program
code
read
code
review
found
veri
effect
detect
defect
pair
program
situat
code
get
review
type
instead
write
code
get
review
anoth
programm
programm
constantli
review
code
written
like
increment
develop
test
increment
review
take
place
besid
ongo
code
review
two
programm
appli
themselv
program
task
hand
like
result
better
decis
taken
data
structur
algorithm
interfac
logic
etc
special
condit
frequent
result
error
also
like
dealt
better
manner
potenti
drawback
pair
program
may
result
loss
product
assign
two
peopl
program
task
clear
pair
produc
better
code
compar
code
develop
singl
programm
open
question
whether
thi
increas
product
due
improv
code
qualiti
offset
loss
incur
put
two
peopl
task
also
issu
account
code
ownership
particularli
pair
fix
rotat
ha
propos
xp
impact
pair
program
activ
area
research
particularli
experiment
softwar
engin
dure
code
process
code
written
programm
pair
evolves—start
noth
eventu
well-test
modul
dure
thi
process
code
undergo
chang
besid
chang
due
develop
process
code
chang
also
need
due
chang
modul
specif
may
come
due
requir
chang
dynam
scenario
manag
evolv
code
challeng
discu
two
aspect
this—how
manag
differ
version
get
creat
maintain
code
qualiti
chang
project
mani
differ
peopl
develop
sourc
code
programm
cre-
ate
differ
sourc
file
eventu
combin
togeth
creat
execut
programm
keep
chang
sourc
file
code
evolv
seen
process
discuss
abov
often
make
chang
sourc
file
well
order
keep
control
sourc
evolut
sourc
code
control
almost
alway
use
project
use
tool
like
cv
unix
www.cvshome.org
visual
sourc
safe
vss
window
msdn.microsoft.com/vstudio/previous/ssaf
give
brief
descript
tool
use
code
process
discuss
base
cv
modern
sourc
code
control
system
contain
repositori
essen-
tialli
control
directori
structur
keep
full
revis
histori
file
produc
differ
programm
project
team
effici
file
histori
gener
kept
delta
increment
base
file
thi
allow
ani
older
version
file
re-creat
therebi
give
flexibl
easili
discard
chang
need
aris
repositori
also
offici
sourc
file
project
repositori
ha
set
permiss
differ
peopl
project
file
repositori
contain
also
specified—
file
whose
evolut
repositori
maintain
programm
use
repositori
make
sourc
file
chang
avail
well
obtain
sourc
file
type
command
gener
perform
programm
get
local
copi
programm
project
work
local
copi
file
command
provid
make
local
copi
repositori
make
local
copi
gener
call
checkout
exampl
command
cv
checkout
<
modul
>
copi
set
file
belong
<
modul
>
local
machin
user
get
latest
copi
file
howev
user
want
ani
older
version
file
obtain
repositori
complet
histori
maintain
mani
user
check
file
make
chang
file
chang
made
local
file
programm
remain
local
chang
commit
back
repositori
commit
e.g.
cv
commit
<
file
>
chang
made
local
file
made
repositori
henc
avail
thi
oper
also
refer
check
updat
local
copi
chang
commit
project
member
repositori
reflect
local
copi
made
befor
chang
commit
get
chang
local
copi
file
updat
e.g.
cv
updat
command
updat
chang
made
file
reflect
local
copi
get
report
sourc
control
tool
provid
host
command
provid
dif-
ferent
report
evolut
file
includ
report
like
differ
local
file
latest
version
file
chang
made
file
along
date
reason
chang
typ-
ical
provid
commit
chang
note
onc
chang
commit
becom
avail
member
team
suppos
use
sourc
file
reposi-
tori
henc
essenti
programm
commit
sourc
file
onli
state
usabl
normal
behavior
project
member
follow
check
latest
version
file
chang
make
plan
chang
valid
chang
desir
effect
file
may
copi
system
tri
local
commit
chang
back
repositori
clear
two
peopl
check
file
make
chang
possibl
conflict—differ
chang
made
part
file
tool
detect
conflict
second
person
tri
commit
chang
inform
user
user
ha
manual
resolv
conflit
i.e.
make
file
chang
conflict
exist
chang
commit
file
conflict
usual
rare
occur
onli
differ
chang
made
line
file
sourc
code
control
system
programm
doe
need
maintain
versions—at
ani
time
chang
need
undon
older
version
easili
recov
repositori
alway
back
also
provid
protect
accident
loss
furthermor
record
chang
maintained—who
made
chang
whi
wa
chang
made
actual
chang
etc
importantli
repositori
provid
central
place
latest
authorit
file
project
thi
invalu
product
long
life
evolv
mani
year
besid
use
repositori
maintain
differ
version
also
use
construct
softwar
system
sources—an
activ
often
call
build
build
get
latest
version
desir
version
number
sourc
repositori
creat
execut
sourc
build
final
execut
sourc
file
often
done
tool
like
makefil
34
specifi
depend
file
final
execut
construct
sourc
file
tool
capabl
recogn
file
chang
recompil
whenev
file
chang
creat
execut
sourc
code
control
tool
gener
get
latest
copi
repositori
use
creat
discuss
one
simplest
approach
sourc
code
control
build
often
larg
system
built
elabor
method
sourc
code
control
may
need
seen
code
often
involv
make
chang
exist
code
code
also
chang
requir
chang
new
function
ad
due
chang
done
modul
even
start
good
design
time
often
end
code
whose
design
good
could
onc
design
embodi
code
becom
complex
enhanc
code
accommod
requir
chang
becom
complex
time
consum
error
prone
word
product
qualiti
start
decreas
refactor
techniqu
improv
exist
code
prevent
thi
design
decay
time
refactor
part
code
perform
dure
code
activ
regular
code
refactor
ha
practic
past
programm
recent
ha
taken
concret
shape
ha
propos
key
step
xp
practic
7
refactor
also
play
import
role
test-driven
development—cod
improv
step
tdd
process
realli
refactor
discu
key
concept
method
refactor
36
detail
avail
refactor
defin
chang
made
intern
structur
softwar
make
easier
understand
cheaper
modifi
without
chang
observ
behavior
36
key
point
chang
made
design
embodi
sourc
code
i.e.
intern
structur
exclus
improv
purpos
basic
object
refactor
improv
design
howev
note
thi
improv
design
dure
design
stage
creat
design
later
implement
focu
design
method-
olog
improv
design
code
alreadi
exist
word
refactor
though
done
sourc
code
ha
object
improv
design
code
implement
therefor
basic
principl
design
guid
refactor
process
consequ
refactor
gener
result
one
follow
refactor
involv
chang
code
improv
one
design
proper-
tie
keep
extern
behavior
refactor
often
trigger
code
chang
done
enhanc
made
exist
code
felt
code
structur
wa
differ
better
chang
could
done
easier
time
refactor
improv
code
structur
even
though
refactor
trigger
need
chang
softwar
extern
behavior
confus
mix
chang
enhanc
best
keep
two
type
chang
separ
develop
code
refactor
need
programm
ceas
write
new
function
first
refactor
add
new
code
main
risk
refactor
exist
work
code
may
break
due
chang
made
thi
main
reason
whi
often
refactor
done
reason
may
view
addit
unnecessari
cost
mitig
thi
risk
two
golden
rule
test
script
avail
test
exist
function
good
test
suit
avail
whether
refactor
preserv
exist
function
check
easili
refactor
done
effect
with-
autom
test
suit
without
suit
determin
extern
behavior
ha
chang
becom
costli
affair
refactor
seri
small
step
test
step
mistak
refactor
easili
identifi
rectifi
thi
refactor
make
onli
small
chang
seri
refactor
significantli
transform
program
structur
refactor
code
becom
continu
improv
design
rather
decay
time
evolv
improv
time
refac-
tore
qualiti
design
improv
make
easier
make
chang
code
well
find
bug
extra
cost
refactor
paid
save
achiev
later
reduc
test
debug
cost
higher
qualiti
reduc
effort
make
chang
refactor
practic
usag
also
eas
design
task
design
stage
often
design
spend
consider
effort
tri
make
design
good
possibl
tri
think
futur
chang
tri
make
design
flexibl
enough
accommod
type
futur
chang
envisag
thi
make
design
activ
veri
complex
often
result
complex
design
refactor
design
doe
terribl
worri
make
best
flexibl
design—th
goal
tri
come
good
simpl
design
later
new
chang
requir
thought
befor
shortcom
found
design
design
chang
refactor
often
extra
flexibl
envisag
design
never
need
result
system
unduli
complex
note
refactor
techniqu
bug
fix
improv
code
veri
bad
shape
done
code
mostli
working—th
basic
purpos
make
code
live
longer
make
structur
healthier
start
healthi
code
instead
let
becom
weak
continu
keep
healthi
refactor
need
easy-to-spot
sign
code
sometim
call
bad
smell
36
often
indic
desir
design
properti
may
get
violat
potenti
improv
design
word
smell
one
bad
smell
may
sign
refactor
need
bad
smell
36
given
duplic
code
thi
quit
common
one
reason
thi
small
function
execut
multipl
place
e.g.
age
date
birth
may
comput
place
need
date
anoth
common
reason
multipl
subclass
class
subclass
may
end
similar
thing
duplic
code
mean
thi
logic
function
ha
chang
chang
place
exist
make
chang
much
harder
costlier
long
method
method
larg
often
repres
situat
tri
mani
thing
therefor
cohes
long
class
similarli
larg
class
may
indic
encapsul
multipl
concept
make
class
cohes
long
paramet
list
complex
interfac
clearli
desirable—they
make
code
harder
understand
often
complex
intrins
sign
improp
design
switch
statement
object-ori
program
polymorph
use
properli
like
result
switch
statement
everywher
behavior
differ
depend
properti
presenc
simi-
lar
switch
statement
differ
place
sign
instead
use
class
hierarchi
switch
statement
use
presenc
switch
statement
make
much
harder
extend
code—if
new
categori
ad
switch
statement
modifi
specul
gener
class
hierarchi
may
exist
becaus
object
subclass
seem
differ
howev
behavior
object
differ
subclass
immedi
reason
think
behavior
might
chang
case
unnecessari
complex
much
commun
object
method
one
class
make
mani
call
method
anoth
object
find
state
thi
sign
strong
coupl
possibl
thi
may
unnecessari
henc
situat
examin
refactor
messag
chain
one
method
call
anoth
method
simpli
pass
thi
call
anoth
object
thi
chain
potenti
result
unnecessari
coupl
bad
smell
gener
indic
poor
design
clearli
unlimit
possibl
code
refactor
improv
design
howev
standard
refactor
appli
mani
situat
catalog
common
refactor
step
perform
reader
refer
36
onc
programm
ha
written
code
modul
ha
verifi
befor
use
test
remain
common
method
thi
verif
programm
level
test
done
check
code
programm
ha
develop
compar
check
entir
softwar
system
call
unit
test
unit
test
like
regular
test
program
execut
test
case
except
focu
test
smaller
program
modul
typic
assign
one
programm
pair
code
program
process
discuss
earlier
test
wa
essenti
unit
test
unit
may
function
small
collect
function
proce-
dural
languag
class
small
collect
class
object-ori
languag
test
modul
softwar
system
difficult
challeng
task
select
test
case
key
issu
ani
form
test
discu
problem
test
case
select
detail
next
chapter
discu
test
suffic
dure
unit
test
tester
gener
programm
execut
unit
varieti
test
case
studi
actual
behavior
unit
test
test
case
base
behavior
tester
decid
whether
unit
work
correctli
behavior
expect
test
case
programm
find
defect
program
activ
call
debug
fix
remov
defect
programm
gener
execut
test
case
caus
unit
fail
ensur
fix
ha
inde
made
unit
behav
correctli
issu
unit
test
unit
test
com-
plete
system
part
execut
furthermor
execut
may
use
modul
develop
yet
due
thi
unit
test
often
requir
driver
stub
written
driver
play
role
call
modul
often
respons
get
test
data
execut
unit
test
data
report
result
stub
essenti
dummi
modul
use
place
actual
modul
facilit
unit
test
modul
us
servic
anoth
modul
n
ha
yet
develop
unit
test
stub
n
written
invok
servic
manner
n
unit
test
proceed
need
stub
avoid
code
test
proce
bottom-up
manner—th
modul
lower
level
code
test
first
modul
higher
level
hierarchi
test
code
lower-level
modul
alreadi
avail
increment
code
practic
discuss
abov
unit
test
need
perform
everi
time
programm
add
code
clearli
much
effici
instead
execut
unit
give
input
manual
execut
test
case
autom
test
case
execut
easili
everi
time
test
need
done
tool
avail
facilit
thi
discu
approach
unit
test
use
test
framework
previou
chapter
seen
use
procedur
unit
modul
program
view
structur
chart
node
function
edg
repres
call
relationship
unit
test
one
small
collect
modul
test
set
test
case
behavior
modul
depend
valu
paramet
well
overal
state
system
part
e.g.
state
global
variabl
test
case
modul
f
involv
set
state
system
behavior
f
depend
well
valu
paramet
actual
valu
state
system
test
case
depend
purpos
tester
ha
design
thi
test
case
addit
modul
f
ha
modul
structur
chart
modul
call
modul
say
g
h
execut
f
must
code
g
h
also
avail
thi
handl
two
way
first
test
bottom-up
manner
i.e.
test
modul
bottom
structur
chart
first
move
thi
approach
test
f
test
code
g
h
avail
use
dure
test
approach
write
stub
g
h
stub
throwaway
code
written
call
function
onli
facilit
test
caller
function
often
stub
function
print
statement
valu
return
valu
return
caller
proceed
often
valu
hard
code
stub
caller
ensur
stub
call
valu
ha
code
assum
former
approach
follow
test
f
test
code
g
h
alreadi
avail
test
modul
f
test
case
involv
follow
step
declar
whether
test
case
ha
succeed
fail
simplest
commonli
use
approach
execut
thi
sequenc
step
write
main
program
execut
first
three
step
valu
given
input
tester
read
file
hard
code
program
print
import
valu
programm
execut
last
two
step
name
compar
result
expect
decid
whether
test
ha
succeed
fail
due
need
programm
intervent
evalu
output
possibl
also
give
input
thi
approach
easi
scale
onc
test
case
design
thi
sequenc
step
remain
fix
henc
ideal
complet
autom
test
framework
often
test
case
declar
function
thi
sequenc
step
execut
test
case
includ
check
outcom
declar
result—thi
done
often
help
assert
statement
provid
framework
test
suit
collect
function
execut
test
suit
mean
function
execut
test
suit
succe
test
case
succeed
test
case
fail
test
framework
decid
whether
continu
execut
stop
function
test
case
easili
defined—it
execut
sequenc
step
given
abov
howev
execut
modul
test
test
case
straightforward
suitabl
execut
form
execut
function
repres
test
case
report
result
success
failur
one
would
like
thi
without
chang
modul
test
file
thi
modul
contain
sourc
code
file
remain
unchang
dure
unit
test
integr
process
remain
unaffect
unit
test
otherwis
unit
test
ani
chang
made
file
remov
thi
type
unit
test
facilit
test
framework
procedur
languag
like
c
common
unit
test
framework
cutest
cunit
cutest
check
etc
test
framework
test
case
defin
function
function
end
assert
provid
framework
test
condit
declar
whether
test
ha
fail
succeed
function
repres
unit
test
ad
array
structur
test
suit
multipl
test
suit
also
creat
often
one
driver
function
suit
pass
execut
test
case
object-ori
program
unit
test
usual
object
class
test
object
defin
process
exercis
routin
provid
object
goal
uncov
error
implement
routin
state
object
78
test
class
programm
need
creat
object
class
take
object
particular
state
invok
method
check
whether
state
object
expect
thi
sequenc
ha
execut
mani
time
method
ha
perform
method
thi
facilit
use
framework
like
junit
www.junit.org
though
junit
java
similar
framework
develop
languag
like
c++
c
#
briefli
describ
junit
use
test
class
give
exampl
test
class
cut
class
test
junit
tester
ha
creat
anoth
class
inherit
junit
e.g.
class
cuttest
extend
junit
junit
framework
ha
import
thi
class
thi
class
driver
test
cut
must
constructor
object
need
test
case
creat
setup
method
typic
use
creat
ani
object
set
valu
befor
execut
test
case
suit
main
execut
suit
use
testrunn
provid
junit
besid
method
method
actual
test
case
method
often
name
testxxxx
method
typ-
ical
focu
test
method
state
typic
name
method
and/or
state
contain
xxx
thi
method
first
set
state
alreadi
setup
setup
execut
method
test
check
result
junit
provid
two
special
method
assert-
true
boolean
express
assertfals
boolean
express
use
func-
tion
logic
express
state
object
tester
test
state
correct
assert
method
succeed
junit
declar
test
ha
pass
ani
assert
statement
fail
junit
declar
test
ha
fail
specifi
assert
ha
fail
get
idea
work
consid
test
class
matrix.java
provid
standard
oper
matrix
main
attribut
class
main
method
given
figur
unit
test
matrix
class
clearli
need
test
standard
oper
like
creation
matrix
set
valu
etc
also
need
test
whether
oper
like
add
subtract
multipli
determin
perform
expect
test
case
want
execut
program
set
valu
perform
oper
result
oper
check
assert
statement
exampl
test
add
creat
method
testadd
privat
doubl
matrix
//matrix
element
privat
int
row
col
//order
matrix
public
matrix
int
int
j
//
set
#
row
#
col
public
matrix
int
int
j
doubl
//
set
2d
array
public
matrix
matrix
//construct
matrix
anoth
public
void
read
//read
elt
consol
set
matrix
public
void
setel
int
int
j
doubl
valu
//
set
elt
j
public
int
noofrow
//
return
row
public
int
noofcol
//
return
col
public
matrix
add
matrix
//
add
matrix
public
matrix
sub
matrix
//
subtract
matrix
public
matrix
mul
matrix
b
//
multipli
b
matrix
public
matrix
transpos
//
transpos
matrix
public
matrix
minor
int
int
b
//
return
x
b
sub-matrix
public
doubl
determin
//
determin
matrix
public
matrix
invers
throw
except
//
invers
matrix
public
void
print
//
print
matrix
consol
public
boolean
equal
matrix
//
check
equal
matrix
ad
anoth
correct
result
store
priori
anoth
matrix
addit
check
result
obtain
perform
add
equal
correct
result
method
thi
shown
figur
programm
may
want
perform
test
add
test
method
need
similarli
method
written
test
method
test
also
shown
figur
see
junit
encourag
autom
test
onli
execu-
tion
test
case
autom
check
result
also
autom
thi
make
run
test
fulli
automat
build
test
script
continu-
ousli
updat
class
evolv
alway
test
script
run
quickli
whenev
make
ani
chang
code
quickli
check
past
test
case
run
click
button
thi
becom
almost
essenti
increment
code
test-driven
develop
discuss
earlier
chapter
practic
public
class
matrixtest
extend
testcas
matrix
b
c
e
/
test
matrix
/
public
matrixtest
string
testcas
doubl
=
new
doubl
9
,6
7
,5
=
new
matrix
2
,2
doubl
b
=
new
doubl
16
,21
3
,12
b
=
new
matrix
2
,2
b
doubl
=
new
doubl
2
,2
,3
4
,8
,6
7
,8
,9
res=new
matrix
doubl
c
=
new
doubl
25
,27
10
,17
c
=
new
matrix
2
,2
c
res=a
add
b
asserttru
=
null
asserttru
c.
equal
c=new
matrix
2
,2
int
i=0
<
2
i++
int
j=0
j
<
2
j++
c.
setel
j
a.
getel
j
doubl
c
=
new
doubl
162
,261
127
,207
c
=
new
matrix
2
,2
c
res=a
mul
b
asserttru
=
null
asserttru
c.
equal
res=a
transpos
res=r
transpos
asserttru
equal
doubl
dd
=
new
doubl
1
,0
0
,1
matrix
dd=new
matrix
2
,2
dd
asserttru
equal
dd
code
inspect
anoth
techniqu
often
appli
unit
level
view
static
test
defect
detect
code
execut
code
manual
process
code
inspect
unlik
test
appli
almost
entir
unit
level
i.e.
onli
program
unit
subject
inspect
henc
consid
anoth
form
unit
test
howev
practic
often
employ
particularli
critic
modul
point
inspect
gener
verif
approach
appli
detect
defect
ani
document
howev
wa
first
util
detect
defect
code
code
inspect
remain
even
today
industri
best
practic
wide
employ
inspect
found
help
improv
onli
qualiti
also
product
see
report
39
44
83
code
inspect
first
propos
fagan
31
32
book
topic
describ
great
detail
code
inspect
review
code
group
peer
follow
clearli
defin
process
basic
goal
inspect
improv
qualiti
code
find
defect
key
characterist
inspect
code
inspect
conduct
programm
programm
structur
process
defin
role
particip
focu
identifi
defect
fix
inspect
data
record
use
monitor
effect
inspect
process
inspect
perform
team
review
inspector
includ
author
one
moder
moder
ha
overal
respons
ensur
review
done
proper
manner
step
review
process
follow
method
inspect
similar
minor
variat
discu
inspect
process
employ
commerci
organ
58
differ
stage
thi
process
plan
self-review
group
review
meet
rework
follow-up
stage
gener
execut
linear
order
discu
phase
object
plan
phase
prepar
inspect
inspect
team
form
includ
programm
whose
code
review
team
consist
least
three
peopl
though
sometim
four-or-f
member
team
also
form
moder
appoint
author
code
ensur
code
readi
inspect
entri
criterion
satisfi
commonli
use
entri
criterion
code
compil
correctli
avail
static
analysi
tool
appli
moder
check
entri
criterion
satisfi
code
packag
prepar
distribut
inspect
team
packag
typic
consist
code
inspect
specif
code
wa
develop
checklist
use
inspect
packag
review
given
review
moder
may
ar-
rang
open
meet
need
author
may
provid
brief
overview
product
ani
special
area
need
look
care-
fulli
checklist
use
dure
inspect
may
prepar
readi
checklist
may
use
aim
code
inspect
improv
qualiti
addit
code
defect
qualiti
issu
code
inspect
usual
look
like
effici
complianc
code
standard
etc
type
defect
code
inspect
focu
contain
checklist
provid
inspector
thi
phase
review
doe
self-review
code
dure
self-
review
review
go
entir
code
log
potenti
defect
find
self-prepar
log
often
review
mark
defect
work
product
may
provid
summari
self-review
log
review
also
record
time
spent
self-review
standard
form
may
use
self-prepar
log
exampl
form
shown
figur
58
ideal
self-review
done
one
continu
time
span
recommend
time
le
two
hours—that
work
product
small
enough
fulli
examin
le
two
hour
thi
phase
review
process
end
review
properli
perform
self-
review
fill
self-review
log
basic
purpos
group
review
meet
come
final
defect
list
base
initi
list
defect
report
review
new
one
found
dure
discuss
meet
entri
criterion
thi
step
moder
satisfi
review
readi
meet
main
output
thi
phase
defect
log
defect
summari
report
moder
first
check
see
review
prepar
thi
done
brief
examin
effort
defect
data
self-review
log
confirm
suffici
time
attent
ha
gone
prepara-
tion
prepar
adequ
group
review
defer
particip
fulli
prepar
everyth
readi
group
review
meet
held
moder
charg
meet
ha
make
sure
meet
stay
focus
basic
purpos
defect
identif
doe
degener
gener
brainstorm
session
person
attack
author
meet
conduct
follow
team
member
call
reader
go
code
line
line
ani
conveni
small
unit
para-
phrase
line
team
sometim
paraphras
done
team
go
code
line
line
ani
line
ani
review
ha
ani
issu
befor
find
ani
new
issu
meet
listen
review
rais
issu
could
discuss
issu
rais
author
accept
issu
defect
clarifi
whi
defect
discuss
agreement
reach
one
member
review
team
call
scribe
record
identifi
defect
defect
log
end
meet
scribe
read
defect
record
defect
log
final
review
team
member
note
dure
entir
process
review
defect
onli
identifi
purpos
group
identifi
solutions—that
done
later
author
final
defect
log
offici
record
defect
identifi
inspect
may
also
use
track
defect
closur
analyz
effect
inspect
howev
onli
summary-level
inform
need
summari
report
prepar
summari
report
describ
code
total
effort
spent
breakup
differ
review
process
activ
total
number
defect
found
categori
size
type
defect
also
record
number
defect
categori
also
record
summari
partial
fill
summari
report
shown
figur
58
summari
report
self-explanatori
total
number
minor
defect
found
wa
8
total
number
major
defect
found
wa
3
defect
densiti
found
8/0.250
=
3
3/0.25
=
1
experi
rate
within
rang
seen
past
henc
assum
review
wa
conduct
properli
review
team
spent
1
..
thi
mean
prepar
rate
wa
180
loc
per
hour
group
review
rate
wa
250
loc
per
hour
past
experi
also
seem
accept
modif
requir
fix
defect
address
is-
sue
group
review
statu
accepted.
modif
requir
mani
follow-up
meet
moder
re-review
might
necessari
verifi
whether
chang
incorpor
correctli
moder
recommend
done
addit
recommend
regard
review
next
stage
may
also
made
e.g.
detailed-
design
review
may
recommend
code
modul
undergo
tradit
work
metric
ha
focus
final
product
name
code
sens
metric
intermedi
product
requir
design
basic
use
ensur
final
product
ha
high
qualiti
product
project
stay
high
basic
goal
metric
intermedi
product
predict
get
idea
metric
final
product
code
commonli
use
metric
size
complex
discu
size
complex
measur
size
product
simpl
measur
easi
calcul
main
reason
interest
size
measur
size
major
factor
affect
cost
project
size
littl
use
relationship
size
cost
qualiti
make
size
import
metric
also
use
measur
product
dure
project
e.g.
kloc
per
person-month
final
qualiti
deliv
process
also
frequent
normal
respect
size
number
defect
per
kloc
reason
size
one
import
frequent
use
metric
common
measur
size
deliv
line
sourc
code
number
line
code
loc
final
deliv
troubl
loc
number
line
code
project
depend
heavili
languag
use
exampl
program
written
assembl
languag
larg
compar
program
written
higher-level
languag
loc
use
size
measur
even
languag
size
vari
consider
depend
line
count
despit
defici
loc
remain
handi
reason
size
measur
use
extens
current
perhap
wide
use
count
method
determin
size
count
noncom
nonblank
line
onli
halstead
46
ha
propos
metric
length
volum
program
base
number
oper
operand
program
defin
follow
measur
quantiti
f1
j
number
occurr
jth
frequent
oper
f2
j
number
occurr
jth
frequent
operand
vocabulari
n
program
defin
measur
paramet
list
earlier
two
new
paramet
defin
length
vocabulari
volum
v
program
defin
thi
definit
volum
program
repres
minimum
number
bit
necessari
repres
program
log2
n
number
bit
need
repres
everi
element
program
uniqu
n
total
occur-
renc
differ
element
volum
use
size
metric
program
experi
shown
volum
program
highli
correl
size
loc
product
measur
onli
term
line
code
per
unit
time
vari
lot
depend
complex
system
develop
clearli
programm
produc
lesser
amount
code
highli
complex
system
program
compar
simpl
applic
program
similarli
complex
ha
great
impact
cost
maintain
program
quantifi
complex
beyond
fuzzi
notion
eas
program
construct
comprehend
metric
measur
complex
program
need
number
metric
propos
quantifi
complex
program
47
studi
done
correl
complex
mainten
effort
discu
complex
measur
propos
cyclomat
complex
base
capabl
human
mind
experi
peopl
gener
recogn
condit
control
statement
add
complex
program
given
two
program
size
program
larger
number
decis
statement
like
complex
simplest
measur
complex
number
construct
repres
branch
control
flow
program
like
els
repeat
goto
statement
refin
measur
cyclomat
complex
measur
propos
mccabe
graph-theoretic–bas
concept
graph
g
n
node
e
edg
p
connect
compon
cyclomat
number
v
g
defin
use
thi
defin
cyclomat
complex
modul
control
flow
graph
g
modul
first
drawn
construct
control
flow
graph
program
modul
break
modul
block
delimit
statement
affect
control
flow
like
repeat
goto
block
form
node
graph
control
block
branch
block
j
draw
arc
node
node
j
graph
control
flow
program
construct
mechan
exampl
consid
c-like
function
bubbl
sort
given
next
control
flow
graph
thi
given
figur
graph
modul
ha
entri
node
exit
node
correspond
first
last
block
statement
creat
artifici
node
simplic
exampl
graph
path
entri
node
ani
node
path
ani
node
exit
node
assum
program
ha
anomali
like
unreach
code
graph
cyclomat
number
0
code
linear
sequenc
statement
without
ani
control
statement
draw
arc
exit
node
entri
node
graph
strongli
connect
becaus
path
ani
two
node
cyclomat
number
graph
ani
program
nonzero
desir
nonzero
complex
simpl
program
without
ani
condit
complex
program
henc
comput
cyclomat
complex
program
arc
ad
exit
node
start
node
make
strongli
connect
graph
modul
cyclomat
complex
defin
cyclomat
number
graph
modul
turn
cyclomat
complex
modul
cyclomat
num-
ber
graph
equal
maximum
number
linearli
independ
circuit
graph
set
circuit
linearli
independ
circuit
total
contain
anoth
circuit
combin
circuit
calcul
cyclomat
number
modul
draw
graph
make
connect
draw
arc
exit
node
entri
node
either
count
number
circuit
comput
count
number
edg
node
graph
shown
figur
cyclomat
complex
ckt
1
b
c
e
b
ckt
2
b
c
e
b
ckt
3
b
f
ckt
4
g
also
shown
cyclomat
complex
modul
number
decis
modul
plu
one
decis
effect
ani
condi-
tional
statement
modul
26
henc
also
comput
cyclomat
complex
simpli
count
number
decis
modul
thi
exampl
see
get
cyclomat
complex
modul
add
modul
ha
three
decis
two
two
statement
one
statement
cyclomat
number
one
quantit
measur
modul
complex
extend
comput
complex
whole
program
though
suitabl
modul
level
mccabe
propos
cyclomat
complex
modul
gener
kept
10
cyclomat
number
also
use
number
path
test
dure
test
cyclomat
complex
one
wide
use
complex
mea-
sure
experi
indic
cyclomat
complex
highli
correl
size
modul
loc
line
code
greater
number
decis
ha
also
found
correl
number
fault
found
modul
halstead
’
measur
halstead
also
propos
number
measur
base
hi
softwar
scienc
46
consid
complex
mea-
sure
given
earlier
number
variabl
defin
softwar
scienc
n1
number
uniqu
oper
n2
number
uniqu
operand
n1
total
frequenc
oper
n2
total
frequenc
operand
ani
program
must
least
two
operators—on
function
call
one
end
statement—th
ratio
n1/-
ficulti
due
larger
number
oper
program
ratio
n2/n
program
variabl
chang
frequent
thi
ratio
larger
program
harder
understand
eas
read
write
defin
halstead
’
complex
measur
focus
intern
complex
modul
doe
mccabe
’
complex
measur
thu
complex
modul
’
connect
environ
given
much
import
halstead
’
measur
modul
’
connect
environ
reflect
term
operand
oper
call
anoth
modul
consid
oper
paramet
consid
operand
thi
oper
live
variabl
comput
program
typic
assign
statement
us
modifi
onli
variabl
howev
gener
statement
much
larger
context
construct
understand
statement
programm
must
keep
track
number
variabl
directli
use
statement
statement
data
item
call
live
variabl
intuit
live
variabl
statement
harder
understand
program
henc
concept
live
variabl
use
metric
program
complex
first
let
u
defin
live
variabl
precis
variabl
consid
live
first
last
refer
within
modul
includ
statement
first
last
statement
variabl
referenc
use
thi
definit
set
live
variabl
statement
comput
easili
analysi
modul
’
code
procedur
determin
live
variabl
easili
autom
statement
number
live
variabl
repres
degre
dif-
ficulti
statement
thi
notion
extend
entir
modul
defin
averag
number
live
variabl
averag
number
live
vari-
abl
sum
count
live
variabl
execut
statement
divid
number
execut
statement
thi
complex
measur
modul
live
variabl
defin
point
view
data
usag
logic
modul
explicitli
includ
logic
use
onli
determin
first
last
statement
refer
variabl
henc
thi
concept
complex
quit
differ
cyclomat
complex
base
entir
logic
consid
data
secondari
anoth
data
usage-ori
concept
span
number
statement
two
success
us
variabl
variabl
referenc
n
differ
place
modul
variabl
n
1
span
averag
span
size
averag
number
execut
statement
two
success
refer
variabl
larg
span
impli
reader
program
ha
rememb
definit
variabl
larger
period
time
statement
word
span
consid
complex
measur
larger
span
complex
modul
knot
count
method
quantifi
complex
base
locat
control
transfer
program
ha
propos
85
wa
design
larg
fortran
program
explicit
transfer
control
shown
use
goto
statement
programm
understand
given
program
typic
draw
arrow
point
control
transfer
destin
help
creat
mental
pictur
program
control
transfer
accord
thi
metric
intertwin
arrow
becom
complex
program
thi
notion
captur
concept
knot.
knot
essenti
intersect
two
control
transfer
arrow
statement
program
written
separ
line
thi
notion
formal
follow
jump
line
line
b
repres
pair
b
two
jump
b
p
q
give
rise
knot
either
min
b
<
min
p
q
<
max
b
max
p
q
>
max
b
min
b
<
max
p
problem
aris
determin
knot
count
program
use
structur
construct
one
method
convert
program
one
explicitli
show
control
transfer
comput
knot
count
basic
scheme
gener
flow
graph
though
flow
graph
onli
bound
obtain
topolog
complex
complex
measur
sensit
nest
structur
ha
propos
20
like
cyclomat
complex
base
flow
graph
modul
program
complex
program
consid
maxim
intersect
number
min
comput
maxim
intersect
flow
graph
convert
strongli
connect
graph
draw
arrow
termin
node
initi
node
strongli
connect
graph
divid
graph
finit
number
region
number
region
edg
node
+
2
draw
line
enter
region
exactli
onc
number
time
thi
line
intersect
arc
graph
maxim
intersect
min
taken
complex
program
read
program
much
common
activ
write
program
goal
code
activ
produc
program
besid
free
defect
easi
understand
modifi
use
structur
program
program
sequenc
suitabl
single-entri
single-exit
construct
make
program
easi
understand
verifi
practic
like
use
inform
hide
suitabl
code
stan-
dard
good
program
practic
also
help
improv
code
readabl
qualiti
develop
effect
develop
code
increment
thi
done
write
code
small
increment
test
debug
increment
befor
write
code
altern
test-driven
develop
may
follow
test
case
written
first
code
written
pa
test
case
though
code
modul
gener
done
individu
programm
altern
pair
program
code
done
pair
programmers—both
togeth
evolv
strategi
data
structur
algorithm
etc
evolv
code
need
properli
manag
thi
done
proper
sourc
code
control
tool
allow
easi
manag
differ
version
get
creat
well
easi
undo
chang
need
roll
back
code
chang
time
ensur
code
qualiti
doe
continu
degrad
due
evolut
refactor
may
done
dure
refactor
new
function
added—onli
improv
done
design
code
improv
reduct
coupl
increas
cohes
better
use
hierarchi
unit
test
veri
popular
often
use
practic
programm
verifi
code
written
unit
test
programm
test
his/her
code
isol
procedur
languag
thi
often
small
set
procedur
function
object-ori
languag
thi
gener
class
small
set
class
unit
test
requir
driver
stub
facilit
use
framework
allow
autom
test
script
execut
good
framework
like
cunit
junit
exist
procedur
languag
object-ori
languag
number
metric
exist
quantifi
differ
qualiti
code
commonli
use
size
metric
becaus
use
ass
produc-
tiviti
peopl
often
use
cost
estim
common
size
measur
line
code
loc
also
use
cost
model
goal
complex
metric
quantifi
complex
softwar
com-
plexiti
import
factor
affect
product
project
factor
cost
estim
number
differ
metric
exist
common
cyclomat
complex
base
intern
logic
program
defin
complex
number
independ
cycl
flow
graph
program
structur
program
doe
help
improv
code
readabl
doe
use
inform
hide
code
standard
help
improv
readabl
suggest
possibl
tdd
function
program
done
pair
write
class/procedur
use
tdd
test
framework
anoth
programm
use
increment
code
first
approach
com-
pare
code
class/procedur
respect
size
code
effort
requir
number
test
case
use
consid
code
class
describ
two
situat
thi
code
suggest
refactor
may
desir
suggest
natur
refactor
perform
role
test
framework
autom
script
refactor
use
favorit
unit
test
framework
use
unit
test
procedure/class
requir
least
one
procedure/class
give
flowchart
describ
code
inspect
process
write
rule
evalu
summari
report
code
review
consid
follow
two
algorithm
search
element
e
sort
array
contain
n
integ
first
procedur
implement
simpl
linear
search
algorithm
second
perform
binari
search
binari
search
gener
much
effici
term
execut
time
compar
linear
search
found
≤
n
begin
=
e
found
=
true
determin
cyclomat
complex
live
variabl
complex
two
function
ratio
two
complex
measur
similar
two
func-
tion
halstead
’
size
measur
two
modul
compar
thi
size
size
measur
loc
softwar
develop
project
error
introduc
ani
stage
dur-
ing
develop
though
error
detect
phase
techniqu
like
inspect
error
remain
undetect
ultim
remain
error
reflect
code
henc
final
code
like
re-
quirement
error
design
error
addit
error
introduc
dure
code
activ
ensur
qualiti
final
deliv
softwar
defect
remov
two
type
approach
identifi
defect
software—
static
dynam
static
analysi
code
execut
evalu
process
tool
locat
defect
code
inspect
discuss
previou
chapter
one
static
approach
anoth
static
analysi
code
use
tool
dynam
analysi
code
execut
execut
use
determin
defect
test
common
dynam
techniqu
employ
inde
test
commonli
use
techniqu
detect
defect
perform
veri
critic
role
ensur
qualiti
dure
test
softwar
test
sut
execut
finit
set
test
case
behavior
system
test
case
evalu
determin
system
perform
expect
basic
purpos
test
increas
confid
function
sut
test
extrem
expens
consum
unlimit
amount
effort
addit
practic
goal
achiev
desir
confid
effici
possibl
clearli
effect
effici
test
depend
critic
test
case
select
much
thi
chapter
therefor
devot
test
case
select
p.
jalot
concis
introduct
softwar
engin
basic
concept
definit
relat
test
like
error
fault
failur
test
case
test
suit
test
har
etc
test
process—how
test
plan
test
unit
done
test
case
select
use
black-box
test
approach
metric
like
coverag
reliabl
employ
dure
test-
ing
thi
section
first
defin
term
commonli
use
discuss
test
discu
basic
issu
relat
test
perform
import
psycholog
tester
discuss
test
commonli
use
term
like
error
fault
failur
etc
let
u
start
defin
concept
clearli
52
term
error
use
two
differ
way
refer
discrep
comput
observ
measur
valu
true
specifi
theoret
correct
valu
error
refer
differ
actual
output
softwar
correct
output
thi
interpret
error
essenti
measur
differ
actual
ideal
error
also
use
refer
human
action
result
softwar
contain
defect
fault
thi
definit
quit
gener
encompass
phase
fault
condit
caus
system
fail
perform
requir
function
fault
basic
reason
softwar
malfunct
practic
synonym
commonli
use
term
bug
somewhat
gener
term
defect
term
error
also
often
use
refer
defect
take
variat
second
definit
error
thi
book
continu
use
term
manner
commonli
use
explicit
distinct
made
error
fault
unless
necessari
failur
inabl
system
compon
perform
requir
function
accord
specif
softwar
failur
occur
behavior
softwar
differ
specifi
behavior
failur
may
caus
function
perform
factor
note
definit
doe
impli
failur
must
observ
possibl
failur
may
occur
detect
implic
definit
presenc
error
state
impli
failur
must
occur
observ
failur
impli
fault
must
present
system
howev
presenc
fault
doe
impli
failur
must
occur
presenc
fault
system
onli
impli
fault
ha
potenti
caus
failur
whether
fault
actual
manifest
certain
time
durat
depend
softwar
execut
direct
consequ
thi
test
dure
test
observ
ani
error
say
anyth
presenc
absenc
fault
system
hand
observ
failur
say
fault
system
thi
relationship
fault
failur
make
task
select
test
case
test
veri
challenging—an
object
select
test
case
select
reveal
defect
exist
ideal
would
like
set
test
case
ani
defect
system
test
case
set
reveal
it—someth
imposs
achiev
situat
note
dure
test
process
onli
failur
ob-
serv
presenc
fault
deduc
test
onli
reveal
presenc
fault
actual
fault
identifi
separ
activ
commonli
refer
debugging.
word
identifi
fault
af-
ter
test
ha
reveal
presenc
fault
expens
task
debug
ha
perform
thi
one
reason
whi
test
expens
method
identif
fault
far
use
term
test
case
set
test
case
inform
let
u
defin
precis
test
case
often
call
test
consid
compris
set
test
input
execut
condit
design
exercis
sut
particular
manner
52
gener
test
case
also
specifi
expect
outcom
execut
sut
specifi
execut
condit
test
input
group
relat
test
case
gener
execut
togeth
test
specif
behavior
aspect
sut
often
refer
test
suit
note
test
case
test
input
execut
condit
mention
separ
test
input
specif
valu
paramet
input
given
sut
either
user
program
execut
condit
hand
reflect
state
system
environ
also
impact
behavior
sut
exampl
test
function
add
record
databas
doe
alreadi
exist
behavior
function
depend
valu
input
record
well
state
databas
test
case
need
specifi
exampl
test
case
thi
function
might
specifi
record
r
input
might
specifi
state
databas
r
alreadi
exist
test
done
manual
tester
execut
test
case
test
suit
check
behavior
specifi
test
case
thi
veri
cumbersom
process
particularli
test
suit
contain
larg
number
test
case
becom
even
cumbersom
sinc
test
suit
often
ha
execut
everi
time
sut
chang
henc
current
autom
test
test
case
typic
function
call
method
invoc
doe
activ
test
case—it
set
test
data
test
condit
invok
sut
per
test
case
compar
result
return
expect
result
declar
tester
whether
sut
fail
pass
test
case
word
autom
test
execut
test
case
essenti
mean
execut
thi
function
test
suit
set
function
repres
test
case
test
sut
test
suit
gener
autom
test
script
written
invok
test
case
desir
sequenc
test
suit
execut
automat
need
framework
test
input
defin
defin
input
use
function
repres
test
case
autom
test
script
written
sut
execut
thi
script
result
entir
test
report
tester
mani
test
framework
exist
permit
thi
done
simpl
manner
test
framework
also
sometim
call
test
har
test
har
test
framework
make
life
tester
simpler
provid
easi
mean
defin
test
suit
execut
report
result
test
framework
test
suit
defin
onc
whenev
need
complet
test
done
click
button
give
command
mention
test
softwar
test
sut
execut
set
test
case
discuss
devis
set
test
case
guarante
error
detect
feasibl
moreov
formal
precis
method
select
test
case
even
though
number
heurist
rule
thumb
decid
test
case
select
test
case
still
creativ
activ
reli
ingenu
tester
becaus
thi
psycholog
person
perform
test
becom
import
basic
purpos
test
detect
error
may
present
program
henc
one
start
test
intent
show
program
work
rather
intent
show
program
doe
work
reveal
ani
defect
may
exist
due
thi
test
ha
also
defin
process
execut
program
intent
find
error
thi
emphasi
proper
intent
test
trivial
matter
becaus
test
case
design
human
human
tendenc
perform
action
achiev
goal
mind
goal
demonstr
program
work
may
conscious
subconsci
select
test
case
tri
demonstr
goal
beat
basic
purpos
test
hand
intent
show
program
doe
work
challeng
intellect
find
test
case
toward
end
like
detect
error
test
essenti
destruct
process
tester
ha
treat
program
adversari
must
beaten
tester
show
presenc
error
thi
one
reason
whi
mani
organ
employ
independ
test
test
done
team
wa
involv
build
system
test
usual
reli
upon
detect
fault
remain
earlier
stage
addit
fault
introduc
dure
code
due
thi
differ
level
test
use
test
process
level
test
aim
test
differ
aspect
system
basic
level
unit
test
integr
test
system
test
accept
test
differ
level
test
attempt
detect
differ
type
fault
relat
fault
introduc
differ
phase
differ
level
test
shown
figur
first
level
test
call
unit
test
discuss
previou
chapter
unit
test
essenti
verif
code
produc
individu
programm
typic
done
programm
modul
gener
modul
offer
programm
integr
use
onli
ha
unit
test
satisfactorili
next
level
test
often
call
integr
test
thi
mani
unit
test
modul
combin
subsystem
test
goal
see
modul
integr
properli
henc
emphasi
test
interfac
modul
thi
test
activ
consid
test
design
next
level
system
test
accept
test
entir
softwar
system
test
refer
document
thi
process
requir
document
goal
see
softwar
meet
require-
ment
thi
often
larg
exercis
larg
project
may
last
mani
week
month
thi
essenti
valid
exercis
mani
situa-
tion
onli
valid
activ
accept
test
often
perform
realist
data
client
demonstr
softwar
work
satisfactorili
may
done
set
softwar
even-
tualli
function
accept
test
essenti
test
system
satisfactorili
solv
problem
wa
commiss
level
test
perform
system
built
compon
code
anoth
level
test
call
regress
test
perform
chang
made
exist
system
know
chang
fundament
softwar
ani
softwar
must
undergo
chang
howev
modif
made
exist
system
test
also
ha
done
make
sure
modif
ha
ani
undesir
side
effect
make
earlier
servic
faulti
besid
ensur
desir
behavior
new
servic
test
ha
ensur
desir
behavior
old
servic
maintain
thi
task
regress
test
regress
test
test
case
execut
old
system
maintain
along
output
produc
old
system
test
case
execut
modifi
system
output
compar
earlier
output
make
sure
system
work
befor
test
case
thi
frequent
major
task
modif
made
exist
system
complet
regress
test
larg
system
take
consider
amount
time
even
autom
use
small
chang
made
system
often
practic
consider
requir
entir
test
suit
execut
regress
test
done
onli
subset
test
case
thi
requir
suitabl
select
test
case
suit
test
part
system
could
affect
chang
test
case
select
regress
test
activ
research
area
mani
differ
approach
propos
literatur
thi
discu
ani
basic
goal
softwar
develop
process
produc
softwar
ha
error
veri
error
test
qualiti
control
activ
focu
identifi
defect
remov
seen
differ
level
test
need
detect
defect
inject
dure
variou
task
project
level
multipl
sut
may
test
test
sut
test
case
design
execut
overal
test
project
complex
task
also
consum
max-
imum
effort
henc
test
ha
done
properli
project
test
process
project
consist
three
high-level
tasks—test
plan
test
case
design
test
execut
discu
rest
thi
section
gener
project
test
commenc
test
plan
termin
success
execut
accept
test
test
plan
gener
docu-
ment
entir
project
defin
scope
approach
taken
schedul
test
well
identifi
test
item
test
personnel
respons
differ
activ
test
test
plan
done
well
befor
actual
test
commenc
done
par-
allel
code
design
activ
input
form
test
plan
1
project
plan
2
requir
document
3
architectur
design
document
project
plan
need
make
sure
test
plan
consist
overal
qualiti
plan
project
test
schedul
match
project
plan
requir
document
design
document
basic
document
use
select
test
unit
decid-
ing
approach
use
dure
test
test
plan
contain
follow
seen
earlier
differ
level
test
perform
project
level
specifi
test
plan
identifi
test
unit
project
test
unit
set
one
modul
form
softwar
test
sut
identif
test
unit
establish
differ
level
test
perform
project
gener
number
test
unit
form
dure
test
start
lower-level
modul
unit-test
first
modul
test
individu
specifi
test
unit
higher-level
unit
specifi
may
combin
alreadi
test
unit
may
combin
alreadi
test
unit
untest
modul
basic
idea
behind
form
test
unit
make
sure
test
perform
increment
increment
includ
onli
aspect
need
test
import
factor
form
unit
testabl
unit
unit
easili
test
word
possibl
form
meaning
test
case
execut
unit
without
much
effort
test
case
exampl
modul
manipul
complex
data
structur
form
file
input
input
modul
might
suitabl
unit
point
view
testabl
form
meaning
test
case
unit
hard
driver
routin
written
convert
input
file
termin
given
tester
data
structur
suitabl
modul
thi
case
might
better
form
unit
includ
input
modul
well
file
input
expect
input
modul
contain
test
case
featur
test
includ
softwar
featur
combin
fea-
ture
test
softwar
featur
softwar
characterist
spec-
ifi
impli
requir
design
document
may
includ
function
perform
design
constraint
attribut
approach
test
specifi
overal
approach
follow
current
project
techniqu
use
judg
test
effort
also
specifi
thi
sometim
call
test
criterion
criterion
evalu
set
test
case
use
test
previou
section
discuss
mani
criterion
evalu
select
test
case
test
deliver
specifi
test
plan
befor
actual
test
begin
deliver
could
list
test
case
use
detail
result
test
includ
list
defect
found
test
summari
report
data
code
coverag
test
plan
typic
also
specifi
schedul
effort
spent
differ
activ
test
tool
use
thi
schedul
consist
overal
project
schedul
detail
plan
may
list
test
task
alloc
test
resourc
respons
perform
mani
larg
product
separ
test
team
therefor
separ
test
plan
smaller
project
may
includ
test
plan
part
qualiti
plan
project
manag
plan
test
plan
focu
test
project
proceed
unit
test
approach
tool
use
dure
variou
stage
test
howev
doe
deal
detail
test
unit
doe
specifi
test
case
use
test
case
design
ha
done
separ
unit
base
approach
specifi
test
plan
featur
test
test
case
design
specifi
test
unit
test
case
specif
give
unit
test
test
case
input
use
test
case
condit
test
test
case
output
expect
test
case
test
case
specifi
document
specif
look
like
tabl
form
shown
figur
sometim
column
also
provid
record
outcom
differ
round
test
sometim
test
case
specif
doc-
ument
also
use
record
result
test
round
test
outcom
test
case
record
i.e.
pa
fail
hope
round
test
case
pa
test
framework
autom
test
test
script
consid
test
case
specif
clearli
show
input
given
output
expect
suitabl
comment
intent
test
case
also
easili
specifi
test
case
design
major
activ
test
process
care
select
test
case
satisfi
criterion
approach
specifi
essenti
proper
test
later
consid
differ
techniqu
design
good
test
case
good
reason
whi
test
case
specifi
befor
use
test
known
test
ha
sever
limit
effec-
tive
test
depend
veri
heavili
exact
natur
test
case
therefor
import
ensur
set
test
case
use
high
qualiti
evalu
test
case
often
done
test
case
review
ani
review
formal
document
work
product
need
review
test
case
test
case
specif
document
requir
thi
primari
reason
document
test
case
test
case
specif
document
review
use
formal
review
process
make
sure
test
case
consist
polici
specifi
plan
satisfi
chosen
criterion
cover
variou
aspect
unit
test
review
condit
test
test
case
review
also
check
import
condit
test
anoth
reason
specifi
test
case
document
script
thi
tester
see
test
unit
total
effect
total
set
test
case
thi
type
evalu
hard
on-the-fli
test
test
case
determin
test
proce
also
allow
optim
number
test
case
evalu
test
suit
may
show
test
case
redund
specif
test
case
next
step
test
process
execut
thi
step
also
straightforward
test
case
specif
onli
specifi
set
test
case
unit
test
howev
execut
test
case
may
requir
construct
driver
modul
stub
may
also
requir
modul
set
environ
state
test
plan
test
case
specif
onli
readi
test
case
execut
test
framework
use
set
environ
well
input
test
case
alreadi
done
test
script
execut
straightforward
dure
test
case
execut
defect
found
defect
fix
tese
done
verifi
fix
facilit
report
track
defect
found
dure
test
qualiti
control
activ
defect
found
often
log
defect
log
particularli
import
larg
softwar
project
may
hundr
thousand
defect
found
differ
peopl
differ
stage
project
often
person
fix
defect
person
find
report
defect
exampl
tester
may
find
defect
develop
code
may
actual
fix
scenario
defect
report
close
done
inform
use
inform
mechan
may
easili
lead
defect
found
later
forgotten
result
defect
get
remov
extra
effort
find
defect
henc
defect
found
must
properli
log
system
closur
track
defect
log
track
consid
one
best
practic
manag
project
17
follow
softwar
organ
let
u
understand
life
cycl
defect
defect
found
anyon
anytim
defect
found
log
defect
control
system
along
suffici
inform
defect
defect
state
submit
essenti
impli
ha
log
along
inform
job
fix
defect
assign
person
gener
author
document
code
defect
found
assign
person
doe
debug
fix
report
defect
defect
enter
fix
state
howev
defect
fix
still
consid
fulli
done
success
fix
defect
verifi
thi
verif
may
done
anoth
person
often
submitt
test
team
typic
involv
run
test
onc
defect
fix
verifi
defect
mark
closed.
word
gener
life
cycl
defect
ha
three
states—submit
fix
close
shown
figur
defect
close
also
call
open
thi
typic
life
cycl
defect
use
mani
organ
e.g.
58
ideal
end
project
open
defect
remain
howev
thi
ideal
situat
often
practic
larg
system
besid
use
log
track
defect
data
log
also
use
analysi
purpos
discu
possibl
analysi
later
chapter
seen
good
test
case
design
key
suitabl
test
sut
goal
test
sut
detect
hope
defect
small
set
test
case
possibl
due
thi
basic
goal
import
select
test
case
carefully—best
test
case
high
probabl
detect
defect
exist
also
whose
execut
give
confid
failur
dure
test
impli
hope
none
defect
softwar
two
basic
approach
design
test
case
use
test
black-box
white-box
black-box
test
structur
program
consid
test
case
decid
sole
basi
requir
specif
program
modul
intern
modul
program
consid
select
test
case
thi
section
present
techniqu
gener
test
case
black-box
test
white-box
test
discuss
next
section
black-box
test
tester
onli
know
input
given
system
output
system
give
word
basi
decid
test
case
requir
specif
system
modul
thi
form
test
also
call
function
behavior
test
obviou
function
test
procedur
exhaust
test
impract
one
criterion
gener
test
case
gener
ran-
domli
thi
strategi
ha
littl
chanc
result
set
test
case
close
optim
i.e.
detect
maximum
error
minimum
test
case
henc
need
criterion
rule
select
test
case
formal
rule
design
test
case
function
test
how-
ever
number
techniqu
heurist
use
select
test
case
found
veri
success
detect
error
mention
techniqu
becaus
exhaust
test
next
natur
approach
divid
input
domain
set
equival
class
program
work
correctli
valu
work
correctli
valu
class
inde
identifi
class
test
program
one
valu
equival
class
equival
exhaust
test
program
howev
without
look
intern
structur
program
imposs
determin
ideal
equival
class
even
intern
structur
usual
done
equival
class
partit
method
68
tri
approxim
thi
ideal
equival
class
form
input
behavior
system
specifi
expect
similar
group
input
behavior
expect
differ
consid
separ
equival
class
rational
form
equival
class
like
thi
assumpt
specif
requir
behavior
element
class
valu
program
like
construct
either
succe
fail
valu
class
exampl
specif
modul
determin
absolut
valu
integ
specifi
one
behavior
posit
integ
anoth
neg
integ
thi
case
form
two
equival
classes—on
consist
posit
integ
consist
neg
integ
robust
softwar
must
also
consid
invalid
input
defin
equival
class
invalid
input
also
equival
class
usual
form
consid
condit
speci-
fie
input
specifi
valid
equival
class
one
invalid
equival
class
exampl
input
condit
specifi
rang
val-
ue
say
0
<
count
<
max
form
valid
equival
class
rang
two
invalid
equival
class
one
valu
le
lower
bound
rang
i.e.
count
<
0
valu
higher
higher
bound
count
>
max
input
specifi
set
valu
require-
ment
specifi
differ
behavior
differ
element
set
valid
equival
class
form
element
set
invalid
class
entiti
belong
set
one
common
approach
determin
equival
class
follow
reason
believ
entir
rang
input
treat
manner
rang
split
two
equival
class
consist
valu
behavior
expect
sim-
ilar
exampl
charact
input
reason
believ
program
perform
differ
action
charact
letter
number
special
charact
split
input
three
valid
equival
anoth
approach
form
equival
class
consid
ani
special
valu
behavior
could
differ
equival
class
exampl
valu
0
could
special
valu
integ
input
also
valid
equival
class
one
invalid
equival
class
identifi
often
use
consid
equival
class
output
output
equival
class
goal
input
output
test
case
lie
output
equival
class
exampl
consid
program
determin
rate
return
invest
three
clear
output
equival
classes—posit
rate
return
neg
rate
return
zero
rate
return
dure
test
import
test
give
input
three
output
gener
determin
test
case
output
class
may
difficult
output
class
found
reveal
error
reveal
consid
input
class
onc
equival
class
select
input
issu
select
test
case
suitabl
differ
way
select
test
case
one
strategi
select
test
case
cover
mani
valid
equival
class
one
separ
test
case
invalid
equival
class
somewhat
better
strategi
requir
test
case
test
case
cover
one
valid
equival
class
input
one
separ
test
case
invalid
equival
class
latter
case
number
test
case
valid
equival
class
equal
largest
number
equival
class
ani
input
plu
total
number
invalid
equival
class
exampl
consid
program
take
two
inputs—a
string
length
n
integ
n.
program
determin
top
n
highest
occur
charact
s.
tester
belief
programm
may
deal
differ
type
charact
separ
one
set
valid
invalid
equival
class
thi
shown
tabl
equival
class
select
test
case
test
case
thi
pair
valu
n.
first
strategi
decid
test
case
one
test
case
could
string
length
le
n
contain
lowercas
uppercas
number
special
charact
n
number
5
thi
one
test
case
cover
valid
equival
class
eq6
one
test
case
cover
ieq1
ieq2
ieq3
total
four
test
case
need
second
approach
one
test
case
cover
one
equival
class
one
input
onli
one
test
case
could
string
number
number
5
thi
cover
eq6
need
test
case
eq5
separ
test
case
ieq3
ha
observ
program
work
correctli
set
valu
equival
class
fail
special
valu
valu
often
lie
boundari
equival
class
test
case
valu
boundari
equival
class
therefor
like
high-yield
test
case
select
test
case
aim
boundari
valu
analysi
boundari
valu
analysi
68
choos
input
test
case
equival
class
input
lie
edg
equival
class
boundari
valu
equival
class
includ
equival
class
output
cover
boundari
valu
test
case
also
call
extrem
cases.
henc
say
boundari
valu
test
case
set
input
data
lie
edg
boundari
class
input
data
gener
output
lie
boundari
class
output
data
case
rang
boundari
valu
analysi
use
select
boundari
element
rang
invalid
valu
beyond
two
end
two
invalid
equival
class
rang
0.0
x
1.0
test
case
0.0
1.0
valid
input
0.1
1.1
invalid
input
similarli
input
list
attent
focus
first
last
element
list
also
consid
output
boundari
valu
analysi
equival
class
identifi
output
tri
gener
test
case
produc
output
lie
boundari
equival
class
furthermor
tri
form
test
case
produc
output
doe
lie
equival
class
produc
input
case
produc
output
outsid
equival
class
detect
error
like
equival
class
partit
boundari
valu
analysi
first
determin
valu
variabl
exercis
dure
test-
ing
multipl
input
set
test
case
form
cover
boundari
valu
suppos
input
variabl
ha
defin
rang
six
boundari
values—th
extrem
end
rang
be-
yond
end
befor
end
integ
rang
min
max
six
valu
min
1
min
min
+
1
max
1
max
max
+
1
suppos
n
input
variabl
two
strategi
combin
boundari
valu
differ
variabl
test
case
first
strategi
select
differ
boundari
valu
one
variabl
keep
variabl
nomin
valu
select
one
test
case
consist
nomin
valu
variabl
thi
case
6n+
two
variabl
x
1
anoth
strategi
would
tri
possibl
combin
valu
differ
variabl
seven
valu
variabl
six
boundari
valu
one
nomin
valu
n
variabl
total
7n
test
cases—too
larg
practic
test
gener
mani
paramet
determin
behavior
softwar
system
paramet
could
direct
input
softwar
implicit
set
like
devic
paramet
take
differ
valu
softwar
may
work
correctli
mani
defect
softwar
gener
involv
one
condit
special
valu
one
paramet
defect
call
single-mod
fault
70
simpl
exampl
single-mod
fault
softwar
abl
print
particular
type
printer
softwar
comput
fare
properli
travel
minor
telephon
bill
softwar
doe
comput
bill
properli
particular
countri
single-mod
fault
detect
test
differ
valu
dif-
ferent
paramet
n
paramet
system
one
take
differ
valu
differ
class
valu
class
consid
purpos
test
equival
class
partit
test
case
test
one
differ
valu
paramet
word
test
differ
valu
test
case
howev
fault
single-mod
combin
input
reveal
presenc
fault
exampl
telephon
bill
softwar
doe
comput
correctli
nighttim
call
one
paramet
particular
countri
anoth
paramet
airlin
ticket
system
ha
incorrect
behavior
minor
one
paramet
travel
busi
class
anoth
paramet
stay
weekend
third
paramet
multi-
mode
fault
reveal
dure
test
tri
differ
combin
paramet
values—an
approach
call
combinatori
test
unfortun
full
combinatori
test
often
feasibl
system
n
paramet
valu
number
differ
combin
nm
simpl
system
total
number
combin
3,125
test
combin
take
take
clearli
complex
system
mani
paramet
paramet
may
mani
valu
full
combinatori
test
feasibl
practic
techniqu
need
reduc
number
test
research
ha
suggest
softwar
fault
reveal
special
singl
valu
interact
pair
valu
25
fault
tend
either
single-mod
double-mod
test
double-
mode
fault
need
test
system
combin
paramet
valu
need
test
combin
valu
pair
paramet
exercis
thi
call
pairwis
test
pairwis
test
pair
valu
exercis
dure
test
n
paramet
valu
two
paramet
∗
pair
first
paramet
mani
pair
remain
n
−
second
one
new
pair
n
−
pair
first
alreadi
includ
first
paramet
pair
third
pair
n
−
total
number
pair
∗
∗
n
∗
n
−
1
/2
object
pairwis
test
set
test
case
cover
pair
n
paramet
test
case
combin
valu
paramet
cover
n
1
+
n
2
+
...
=
n
n
1
/
best
case
pair
cover
exactli
onc
one
test
case
exampl
consid
softwar
product
develop
multipl
platform
us
browser
interfac
suppos
softwar
be-
ing
design
work
three
differ
oper
system
three
differ
browser
addit
product
memori
intens
desir
test
perform
differ
level
memori
follow
three
paramet
differ
valu
oper
system
window
solari
linux
memori
size
128m
256m
512m
discuss
say
system
ha
three
paramet
op-
erat
system
b
memori
size
c
browser
three
valu
refer
a1
a2
a3
b1
b2
b3
c1
c2
c3
total
number
pairwis
combin
9
3
=
27
number
test
case
howev
cover
pair
much
le
test
case
consist
valu
three
paramet
cover
three
combin
a-b
b-c
a-c
henc
best
case
cover
227/3=
test
case
shown
tabl
along
pair
cover
clear
gener
test
case
cover
pair
simpl
task
minimum
set
test
case
pair
cover
exactli
one
test
case
often
possibl
gener
minimum
set
test
case
particularli
number
valu
differ
paramet
differ
variou
algorithm
propos
program
avail
onlin
gener
test
case
cover
pair
situat
manual
gener
feasibl
follow
approach
follow
start
initi
test
case
form
combin
valu
two
paramet
largest
number
valu
must
least
thi
mani
test
case
test
pair
two
paramet
complet
test
case
ad
valu
paramet
add
pair
yet
cover
ani
test
case
complet
form
addit
test
case
combin
mani
uncov
pair
possibl
essenti
gener
test
case
test
case
cover
mani
new
pair
possibl
avoid
cover
pair
multipl
time
produc
small
set
test
case
cover
pair
effici
algorithm
gener
smallest
number
test
case
pairwis
test
exist
25
exampl
given
1
three
distinct
valu
pair
cover
mere
1
total
number
combin
pairwis
test
practic
way
test
larg
softwar
system
mani
differ
paramet
distinct
function
expect
differ
valu
exampl
would
bill
system
telephon
hotel
airlin
etc
ha
differ
rate
differ
paramet
valu
also
practic
approach
test
general-purpos
softwar
product
expect
run
differ
platform
configur
system
expect
work
differ
type
system
ha
seen
program
often
produc
incorrect
behavior
input
form
special
case
reason
program
combin
input
need
special
treatment
provid
proper
handl
special
case
easili
overlook
exampl
arithmet
routin
divis
divisor
zero
special
action
ha
taken
could
easili
forgotten
programm
special
case
form
particularli
good
test
case
reveal
error
usual
detect
test
case
special
case
often
depend
data
structur
function
modul
rule
determin
special
case
tester
ha
use
hi
intuit
experi
identifi
test
case
consequ
determin
special
case
also
call
error
guess
psycholog
particularli
import
error
guess
tester
play
devil
’
advoc
tri
guess
incorrect
assumpt
programm
could
made
situat
programm
could
overlook
handl
incorrectli
essenti
tester
tri
identifi
error-pron
situat
test
case
written
situat
exampl
problem
find
number
differ
word
file
discuss
earlier
chapter
special
case
file
empti
onli
one
word
file
onli
one
word
line
empti
line
input
file
presenc
one
blank
word
word
word
alreadi
sort
blank
start
end
file
incorrect
assumpt
usual
made
becaus
specif
complet
writer
specif
may
state
properti
assum
obviou
whenev
relianc
tacit
understand
rather
explicit
statement
specif
scope
make
wrong
assumpt
frequent
wrong
assumpt
made
environ
howev
point
special
case
depend
heavili
problem
tester
realli
tri
get
shoe
design
coder
determin
case
system
essenti
stateless
input
alway
give
output
exhibit
behavior
mani
batch
process
system
comput
system
server
fall
thi
categori
hardwar
combinatori
circuit
fall
thi
categori
smaller
level
function
suppos
behav
thi
manner
howev
mani
system
whose
behavior
state-bas
ident
input
behav
differ
differ
time
may
produc
differ
output
reason
differ
behavior
state
system
may
differ
word
behavior
output
system
depend
onli
input
provid
also
state
system
state
system
depend
past
input
system
ha
receiv
word
state
repres
cumul
impact
past
input
system
hardwar
sequenti
system
fall
thi
categori
softwar
mani
larg
system
fall
thi
categori
past
state
captur
databas
file
use
control
behavior
system
system
anoth
approach
select
test
case
state-bas
test
approach
22
theoret
ani
softwar
save
state
model
state
ma-
chine
howev
state
space
ani
reason
program
almost
infinit
cross
product
domain
variabl
form
state
mani
system
state
space
partit
state
repres
logic
combin
valu
differ
state
variabl
share
properti
interest
9
set
state
system
manage-
abl
state
model
system
built
state
model
system
ha
four
compon
state
repres
impact
past
input
system
transit
repres
state
system
chang
one
state
anoth
respons
event
state
model
show
state
transit
occur
action
perform
system
respons
event
state
model
built
requir
system
onli
includ
state
transit
action
state
requir
infer
inform
avail
design
specif
richer
state
model
built
exampl
consid
student
survey
exampl
discuss
chapter
5
accord
requir
system
creat
take
student
survey
student
take
survey
return
current
result
survey
survey
result
five
survey
old
consid
archi-
tectur
cach
server
databas
survey
result
cach
updat
onli
five
survey
arriv
request
propos
architectur
ha
databas
back
may
go
creat
state
machin
model
thi
system
notic
seri
first
henc
divid
two
state
one
repres
receiv
1
state
1
repres
receiv
request
5
state
2
next
see
databas
go
ani
two
state
howev
behavior
request
databas
may
differ
henc
creat
anoth
pair
state
state
4
onc
databas
ha
fail
first
request
receiv
receiv
system
enter
fail
state
state
5
doe
give
ani
respons
system
recov
fail
state
must
updat
cach
immedi
henc
go
state
2
state
model
thi
system
shown
figur
repres
input
user
take
survey
note
assum
state
model
system
creat
specif
design
thi
state
model
done
model
wa
built
exampl
onc
state
model
built
use
select
test
case
design
implement
test
case
use
test
code
becaus
thi
treat
state-bas
test
black
box
test
strategi
howev
state
model
often
requir
inform
design
system
exampl
abov
knowledg
architectur
util
sometim
make
state
model
may
requir
detail
inform
design
system
exampl
class
seen
state
model
done
dure
design
lot
alreadi
known
class
attribut
method
due
thi
state-bas
test
may
consid
somewhat
black-box
white-box
test
strategi
sometim
call
gray-box
test
given
state
model
system
test
case
gener
mani
coverag
criterion
propos
69
discu
onli
suppos
set
test
case
t.
criterion
transit
coverag
must
ensur
everi
transit
state
graph
exercis
transit
pair
coverag
atp
must
execut
pair
adja-
cent
transit
adjac
transit
pair
compris
two
transit
incom
transit
state
outgo
transit
state
transit
tree
coverag
tt
must
execut
simpl
path
simpl
path
one
start
start
state
reach
state
ha
alreadi
visit
thi
path
final
state
first
criterion
state
dure
test
transit
get
fire
thi
also
ensur
state
visit
transit
pair
coverag
stronger
criterion
requir
combin
incom
outgo
transit
state
must
exercis
t.
state
ha
two
incom
transit
t2
two
outgo
transit
t4
set
test
case
execut
t1
t2
t.
howev
satisfi
atp
must
also
ensur
execut
t1
t2
t3
transit
tree
coverag
name
thi
manner
transit
tree
construct
graph
use
identifi
path
atp
go
beyond
transit
state
differ
path
state
diagram
exercis
dure
test
atp
gener
includ
exampl
abov
set
test
case
given
tabl
req
mean
request
take
survey
given
fail
mean
databas
fail
recov
mean
fail
databas
recov
see
state-bas
test
draw
attent
state
transi-
tion
even
abov
simpl
case
see
differ
scenario
get
test
e.g.
system
behavior
databas
fail
system
behavior
fail
recov
thereaft
mani
scenario
easi
overlook
test
case
design
onli
look
input
domain
set
test
case
richer
criterion
use
thi
exampl
leav
exercis
determin
test
case
criterion
previou
section
discuss
black-box
test
concern
function
test
program
suppos
perform
doe
deal
intern
structur
program
respons
actual
imple-
ment
function
thu
black-box
test
concern
function
rather
implement
program
white-box
test
hand
concern
test
implement
program
intent
thi
test
exercis
differ
input
output
condit
al-
though
may
by-product
exercis
differ
program
structur
data
structur
use
program
white-box
test
also
call
structur
test
use
two
term
interchang
test
structur
program
structur
test
aim
achiev
test
case
forc
desir
coverag
differ
structur
variou
criterion
propos
thi
unlik
criterion
function
test
frequent
imprecis
criterion
structur
test
gener
quit
precis
base
program
structur
formal
precis
discu
one
approach
structur
test
control
flow-bas
test
commonli
use
practic
common
structure-bas
criterion
base
control
flow
program
criterion
control
flow
graph
program
consid
coverag
variou
aspect
graph
specifi
criterion
henc
befor
consid
criterion
let
u
precis
defin
control
flow
graph
program
let
control
flow
graph
simpli
flow
graph
program
p
g.
node
thi
graph
repres
block
statement
alway
execut
togeth
i.e.
whenev
first
statement
execut
statement
also
execut
edg
j
node
node
j
repres
possibl
transfer
control
execut
last
statement
block
repres
node
first
statement
block
repres
node
j
node
correspond
block
whose
first
statement
start
statement
p
call
start
node
g
node
correspond
block
whose
last
statement
exit
statement
call
exit
node
73
path
finit
sequenc
node
n1
n2
...
nk
k
>
1
edg
ni
ni+1
node
ni
sequenc
except
last
node
nk
complet
path
path
whose
first
node
start
node
last
node
exit
node
let
u
consid
control
flow-bas
criterion
perhap
simplest
cover-
age
criterion
statement
coverag
requir
statement
program
execut
least
onc
dure
test
word
requir
path
execut
dure
test
includ
node
graph
thi
also
call
all-nod
criterion
73
thi
coverag
criterion
veri
strong
leav
error
undetect
exampl
statement
program
without
els
claus
statement
coverag
criterion
thi
statement
satisfi
test
case
evalu
condit
true
test
case
need
ensur
condit
statement
evalu
fals
thi
seriou
shortcom
becaus
decis
program
potenti
sourc
error
exampl
consid
follow
function
comput
absolut
valu
number
thi
program
clearli
wrong
suppos
execut
function
set
test
case
x=0
i.e.
set
ha
onli
one
test
case
statement
coverag
criterion
satisfi
test
thi
set
error
reveal
gener
coverag
criterion
branch
coverag
requir
edg
control
flow
graph
travers
least
onc
dure
test
word
branch
coverag
requir
decis
program
evalu
true
fals
valu
least
onc
dure
test
test
base
branch
coverag
often
call
branch
test
100
%
branch
coverag
criterion
also
call
all-edg
criterion
73
branch
coverag
impli
state-
ment
coverag
statement
part
branch
preced
exampl
set
test
case
satisfi
thi
criterion
detect
error
troubl
branch
coverag
come
decis
ha
mani
condit
consist
boolean
express
boolean
oper
situat
decis
evalu
true
fals
without
actual
exercis
condit
exampl
consid
follow
function
check
valid
data
item
data
item
valid
lie
0
100
modul
incorrect
check
x
200
instead
100
perhap
type
error
made
programm
suppos
modul
test
follow
set
test
case
x
=
5
x
=
-
branch
coverag
criterion
satisfi
thi
modul
thi
set
howev
error
reveal
behavior
modul
consist
specif
test
case
thi
set
thu
coverag
criterion
satisfi
error
detect
thi
occur
becaus
decis
evalu
true
fals
becaus
condit
x
0
condit
x
200
never
evalu
fals
dure
thi
test
henc
error
thi
condit
reveal
thi
problem
resolv
requir
condit
evalu
true
fals
howev
situat
occur
decis
may
get
true
fals
valu
even
individu
condit
evalu
true
fals
obviou
solut
thi
problem
requir
decision/condit
coverag
decis
condit
decis
take
true
fals
valu
dure
cours
test
studi
indic
mani
error
whose
presenc
de-
tect
branch
test
becaus
error
relat
combin
branch
presenc
reveal
execut
follow
path
includ
branch
henc
gener
coverag
criterion
one
requir
possibl
path
control
flow
graph
execut
dure
test
thi
call
path
coverag
criterion
all-path
criterion
test
base
thi
criterion
often
call
path
test
difficulti
thi
criterion
program
contain
loop
infinit
number
possibl
path
furthermor
path
graph
may
fea-
sibl
sens
may
ani
input
path
execut
path
coverag
criterion
lead
potenti
infinit
number
path
effort
made
suggest
criterion
branch
coverag
path
coverag
basic
aim
approach
select
set
path
ensur
branch
coverag
criterion
tri
path
may
help
reveal
error
one
method
limit
number
path
consid
two
path
differ
onli
subpath
caus
due
loop
even
thi
restrict
number
path
extrem
larg
point
none
criterion
suffici
detect
kind
error
program
exampl
program
miss
control
flow
path
need
check
special
valu
like
pointer
equal
nil
divisor
equal
zero
even
execut
path
necessarili
detect
error
similarli
set
path
satisfi
all-
path
criterion
exercis
onli
one
part
compound
condit
set
reveal
ani
error
part
condit
exercis
henc
even
path
coverag
criterion
strongest
criterion
discuss
strong
enough
guarante
detect
error
onc
coverag
criterion
decid
two
problem
solv
use
chosen
criterion
test
first
decid
set
test
case
satisfi
criterion
second
gener
set
test
case
given
criterion
decid
whether
set
test
case
satisfi
criterion
without
aid
ani
tool
cumbersom
task
though
theoret
possibl
manual
almost
structur
test
techniqu
tool
use
determin
whether
criterion
ha
satisfi
gener
tool
provid
feedback
regard
need
test
fulli
satisfi
criterion
gener
test
case
tool
easili
avail
due
natur
problem
i.e.
undecid
feasibl
path
fulli
autom
tool
select
test
case
satisfi
criterion
gener
possibl
henc
tool
best
aid
tester
one
method
gener
test
case
randomli
select
test
data
desir
criterion
satisfi
determin
tool
thi
result
lot
redund
test
case
mani
test
case
exercis
path
test
case
gener
fulli
autom
frequent
test
case
select
done
manual
tester
perform
structur
test
iter
manner
start
initi
test
case
set
select
test
case
base
feedback
provid
tool
test
case
evalu
test
case
evalu
tool
tell
path
need
execut
mutant
need
kill
thi
inform
use
select
test
case
even
aid
tool
select
test
case
simpl
process
select
test
case
execut
part
yet
unexecut
code
often
veri
difficult
becaus
thi
reason
criterion
often
weaken
exampl
instead
requir
100
%
coverag
statement
branch
goal
might
achiev
accept
high
percentag
le
100
%
mani
tool
avail
statement
branch
coverag
crite-
ria
use
often
commerci
freewar
tool
avail
differ
sourc
languag
tool
often
also
give
higher-level
coverag
data
like
function
coverag
method
coverag
class
coverag
get
coverag
data
execut
program
dure
test
ha
close
monitor
thi
requir
program
instrument
requir
data
collect
common
method
instrument
insert
statement
call
probe
program
sole
purpos
probe
gener
data
program
execut
dure
test
use
comput
coverag
thi
identifi
three
phase
gener
coverag
data
probe
insert
done
automat
preprocessor
execut
program
done
tester
test
coverag
data
display
tool—sometim
graphic
represent
also
shown
seen
dure
test
softwar
test
execut
set
test
case
qualiti
deliv
softwar
depend
substanti
qualiti
test
natur
question
aris
test
qualiti
reliabl
softwar
test
complet
dure
test
primari
purpos
metric
tri
answer
relat
question
discu
metric
may
use
thi
purpos
one
commonli
use
approach
evalu
thorough
test
use
coverag
measur
discuss
abov
common
coverag
measur
use
practice—stat
coverag
branch
coverag
use
coverag
measur
evalu
qualiti
test
proper
coverag
analysi
tool
employ
inform
onli
coverag
achiev
dure
test
also
portion
yet
cover
often
organ
build
guidelin
level
coverag
must
achiev
dure
test
gener
coverag
requir
higher
unit
test
lower
system
test
much
difficult
ensur
execut
identifi
block
entir
system
execut
often
coverag
requir
unit
level
90
%
100
%
keep
mind
100
%
may
alway
possibl
may
unreach
code
besid
coverag
program
construct
coverag
requir
also
often
examin
facilit
thi
evalu
test
case
specifica-
tion
requir
condit
test
mention
thi
coverag
gener
establish
evalu
set
test
case
ensur
suffici
number
test
case
suitabl
data
includ
requir
coverag
measur
percentag
requir
clauses/-
condit
least
one
test
case
exist
often
full
coverag
may
requir
requir
level
befor
test
consid
accept
test
done
softwar
deliv
develop
con-
sider
clearli
desir
know
quantifi
term
reliabl
softwar
deliv
reliabl
softwar
depend
consider
qualiti
test
assess
reliabl
also
judg
qualiti
test
altern
reliabl
estim
use
decid
whether
enough
test
ha
done
word
besid
character
import
qualiti
properti
product
deliv
reliabl
esti-
mation
ha
direct
role
project
management—it
use
project
manag
decid
whether
enough
test
ha
done
stop
test
reliabl
product
specifi
probabl
failure-fre
oper
product
given
time
durat
reliabl
model
requir
occurr
failur
random
phenomenon
softwar
even
though
failur
occur
due
preexist
bug
thi
assumpt
gener
hold
larger
system
may
hold
small
program
bug
case
one
might
abl
predict
failur
henc
reliabl
model
meaning
larger
system
let
x
random
variabl
repres
life
system
reliabl
system
probabl
system
ha
fail
time
t.
word
reliabl
system
also
specifi
mean
time
failur
mttf
mttf
repres
expect
lifetim
system
re-
liabil
function
obtain
80
reliabl
also
defin
term
failur
intens
failur
rate
i.e.
number
failur
per
unit
time
softwar
time
measur
perspect
dure
test
measur
failur
rate
easiest
defect
log
simpl
way
thi
comput
number
failur
everi
week
everi
day
dure
last
stage
test
number
failur
approxim
number
defect
log
though
failur
defect
differ
last
stage
test
assum
defect
caus
failur
fix
soon
enough
therefor
caus
multipl
failur
gener
thi
failur
rate
increas
start
test
defect
found
peak
somewher
middl
test
continu
drop
fewer
defect
report
given
test
suit
defect
fix
almost
failur
toward
end
could
consid
proper
time
releas
thi
softwar
releas
criterion
could
failur
rate
releas
time
zero
failur
time
durat
zero
failur
execut
test
suit
though
failur
rate
track
give
rough
sens
reliabl
term
failur
per
day
per
week
accur
reliabl
estim
better
model
use
softwar
reliabl
model
complex
task
requir-
ing
rigor
model
sophist
statist
analysi
mani
model
propos
softwar
reliabl
assess
survey
mani
model
given
33
67
mention
failur
softwar
also
depend
critic
environ
execut
failur
rate
experienc
test
reflect
ultim
reliabl
experienc
user
softwar
releas
onli
test
close
mimic
user
behavior
thi
may
case
particularli
lower
level
test
howev
often
higher
level
activ
effort
made
final
test
suit
mimic
actual
usag
thi
case
reliabl
estim
appli
higher
confid
anoth
analysi
interest
defect
remov
effici
though
thi
onli
determin
sometim
softwar
ha
releas
purpos
thi
analysi
evalu
effect
test
process
employ
qualiti
test
project
thi
analysi
use
improv
test
process
futur
usual
softwar
ha
releas
client
client
find
defect
fix
gener
origin
develop
thi
often
part
contract
thi
defect
data
also
gener
log
within
month
defect
would
uncov
client
often
warranti
period
onc
total
number
defect
close
approxim
total
known
defect
remov
effici
dre
test
comput
defect
remov
effici
qualiti
control
activ
defin
percentag
reduct
number
defect
execut
activ
61
exampl
suppos
total
number
defect
log
500
20
found
deliveri
200
found
dure
system
test
defect
remov
effici
system
test
200/220
90
%
total
number
defect
present
system
test
start
wa
220
defect
remov
effici
overal
qualiti
process
480/500
96
%
incident
thi
level
dre
decent
mani
commerci
organ
achiev
clear
dre
gener
concept
appli
ani
defect
remov
activ
exampl
comput
dre
design
review
unit
test
thi
done
defect
besid
log
defect
found
phase
defect
wa
introduc
also
analyz
log
thi
inform
defect
log
dre
main
qualiti
control
task
determin
thi
inform
extrem
use
improv
overal
qualiti
process
test
dynam
method
verif
valid
soft-
ware
test
execut
care
design
test
case
behavior
softwar
system
observ
test
case
set
input
test
condit
along
expect
outcom
test
test
suit
set
test
case
gener
execut
togeth
test
spe-
cific
behavior
dure
test
onli
failur
system
observ
presenc
fault
deduc
separ
activ
perform
identifi
fault
remov
intent
test
increas
confid
correct
soft-
ware
thi
set
test
case
use
test
ani
defect
system
like
test
case
reveal
ensur
thi
import
test
case
care
design
intent
reveal
defect
due
limit
verif
method
earli
phase
design
requir
fault
also
appear
code
test
use
detect
error
also
addit
error
introduc
dure
code
phase
henc
differ
level
test
often
use
detect
defect
inject
dure
differ
stage
commonli
employ
test
level
unit
test
integr
test
system
test
accept
test
test
softwar
product
overal
test
plan
test
unit
identifi
plan
test
case
care
design
reveal
error
specifi
document
test
script
two
approach
design
test
case
black-box
white-box
black-box
test
intern
logic
system
test
con-
sider
test
case
decid
specif
require-
ment
equival
class
partit
boundari
valu
analysi
cause-
effect
graph
exampl
method
select
test
case
black-box
test
state-bas
test
anoth
approach
system
mod-
ele
state
machin
thi
model
use
select
test
case
use
transit
path-bas
coverag
criterion
state-bas
test
also
view
gray-box
test
often
requir
inform
requir
white-box
test
test
case
decid
base
intern
logic
program
test
often
criterion
specifi
procedur
select
test
case
satisfi
criterion
left
tester
common
criterion
statement
coverag
branch
coverag
main
metric
interest
dure
test
reliabl
softwar
test
defect
log
reliabl
assess
term
failur
rate
per
week
day
though
better
model
estim
exist
coverag
achiev
dure
test
defect
remov
effici
metric
interest
suppos
test
procedur
take
two
input
paramet
doe
comput
manipul
global
tabl
manipul
depend
state
tabl
complet
specif
test
case
thi
procedur
contain
differ
level
test
goal
differ
level
suppos
log
defect
defect
treat
object
class
defect
give
definit
thi
class
suppos
softwar
ha
three
input
defin
valid
rang
mani
test
case
need
test
boundari
valu
boundari
valu
analysi
strategi
gener
test
case
consid
possibl
combin
differ
valu
set
test
case
softwar
ha
three
input
x
z
suppos
softwar
ha
five
differ
configur
variabl
set
indepen-
dentli
three
binari
two
possibl
valu
rest
three
valu
mani
test
case
need
pairwis
test
method
use
consid
vend
machin
take
quarter
ha
receiv
two
quarter
give
soda
develop
state
model
thi
system
gener
set
test
case
variou
criterion
consid
simpl
text
formatt
problem
given
text
consist
word
sepa-
rate
blank
bl
newlin
nl
charact
text
formatt
ha
covert
line
line
ha
maxpo
charact
break
line
occur
bl
nl
maximum
possibl
number
word
line
follow
program
ha
written
thi
text
formatt
41
outchar
buffer
k
fill
=
fill
+
bufpo
bufpo
=
0
end
select
set
test
case
use
black-box
test
approach
use
mani
techniqu
possibl
select
test
case
special
case
use
error
guess
method
select
set
test
case
provid
100
%
branch
coverag
suppos
last
round
test
test
suit
execut
fault
fix
took
2
thi
test
number
failur
log
everi
day
2
0
1
2
1
1
0
expect
averag
user
use
softwar
two
hour
day
manner
similar
wa
done
test
expect
reliabl
thi
softwar
user
f.
b.
abreu
r.
carapuca
candid
metric
object-ori
soft-
ware
wihin
taxonomi
framework
journal
system
softwar
26
1
:87–96
jan.
1994
v.
r.
basili
tutori
model
metric
softwar
manag
engin
ieee
press
1980
v.
r.
basili
l.
briand
w.
l.
melo
valid
object-ori
design
metric
qualiti
indic
ieee
transact
softwar
en-
gineer
22
10
:751–761
oct.
1996
v.
r.
basili
a.
turner
iter
enhanc
practic
techniqu
softwar
develop
ieee
transact
softwar
engin
se-1
4
dec.
1975
v.
r.
basili
d.
m.
weiss
evalu
softwar
requir
docu-
ment
analysi
chang
data
5th
int
conf
softwar
engin
page
314–323
ieee
1981
l.
bass
p.
clement
rick
kazman
softwar
architectur
practic
second
edit
addison-wesley
profession
2003
k.
beck
extrem
program
explain
addison-wesley
2000
k.
beck
test
driven
develop
exampl
addison-wesley
profes-
sional
2002
r.v
binder
test
object-ori
systems—model
pattern
tool
addison-wesley
1999
b.
boehm
softwar
engin
ieee
transact
comput
25
12
dec.
1976
b.
boehm
tutori
softwar
risk
manag
ieee
comput
societi
1989
b.
w.
boehm
softwar
engin
econom
prentic
hall
englewood
cliff
nj
1981
b.
w.
boehm
softwar
engin
econom
ieee
transact
softwar
engin
10
1
:135–152
jan.
1984
b.
w.
boehm
improv
softwar
product
ieee
comput
page
43–57
sept.
1987
g.
booch
object-ori
analysi
design
benjamin/cum-
ming
publish
compani
1994
f.
brook
mytic
man
month
addison-wesley
1975
n.
brown
industrial-strength
manag
strategi
ieee
softwar
juli
1996
r.n
charett
softwar
engin
risk
analysi
manag
mc-
graw
hill
1989
r.n
charett
large-scal
project
manag
risk
manag
ieee
softwar
juli
1996
e.
chen
program
complex
programm
product
ieee
trans-
action
softwar
engin
se-4:187–194
may
1978
s.
r.
chidamb
c.
f.
kemer
metric
suit
object-ori
design
ieee
transact
softwar
engin
20
6
:476–493
june
1994
t.
chow
test
softwar
design
model
finit
state
machin
ieee
transact
softwar
engin
se-4
3
:178–187
1978
p.
clement
f.
bachmann
l.
bass
d.
garlan
j.
iver
r.
littl
r.
nord
j.
stafford
document
softwar
architectur
view
beyond
addison-wesley
2003
a.
cockburn
write
effect
use
case
addison-wesley
2001
d.m
cohen
s.r
dalal
m.l
fredman
g.c
patton
aetg
system
approach
test
base
combinatori
design
ieee
transact
softwar
engin
23
7
:437–443
1997
s.
d.
cont
h.
e.
dunsmor
v.
y.
shen
softwar
engin
met-
ric
model
benjamin/cum
publish
compani
1986
j.
s.
davi
identif
error
softwar
requir
use
autom
requir
tool
inform
softwar
technolog
31
9
:472–476
nov.
1989
t.
demarco
structur
analysi
system
specif
yourdon
press
1979
l.
dobrica
e.
niemela
survey
softwar
architectur
analy-
si
method
ieee
transact
softwar
engin
28
7
:638–653
2002
j.
eder
g.
kappel
m.
schrefl
coupl
cohes
object-
orient
system
technic
report
univers
klagenfurt
1994
m.
e.
fagan
design
code
inspect
reduc
error
program
develop
ibm
system
journal
3
:182–211
1976
m.
e.
fagan
advanc
softwar
inspect
ieee
transact
softwar
engin
12
7
:744–751
juli
1986
w.
farr
softwar
reliabl
model
survey
m.
r.
lyu
editor
softwar
reliabl
engin
page
71–117
mcgraw
hill
ieee
comput
societi
1996
s.
i.
feldman
make—a
program
maintain
comput
program
softwar
practic
experi
9
3
:255–265
march
1979
m.
fowler
uml
distilled—a
brief
guid
standard
object
model
languag
addison-wesley
profession
2003
m.
fowler
k.
beck
j.
brant
w.
opdyk
d.
robert
refactor
improv
design
exist
code
addison-wesley
1999
d.
p.
freedman
g.
m.
weinberg
handbook
walkthrough
inspec-
tion
technic
reviews—evalu
program
project
prod-
uct
dorset
hous
1990
e.
gamma
r.
helm
r.
johnson
j.
vlissid
design
patterns—
element
reusabl
object-ori
softwar
addison-wesley
profes-
sional
1995
t.
gilb
d.
graham
softwar
inspect
addison-wesley
1993
h.
gomma
d.
b.
h.
scott
prototyp
tool
specif
user
requir
fifth
int
conf
softwar
engin
page
333–341
1981
j.
goodenough
s.
l.
gerhart
toward
theori
test
data
select
ieee
transact
softwar
engin
se-1:156–173
1975
s.
e.
goodman
s.
t.
hedetniemi
introduct
design
analysi
algorithm
mcgraw-hil
1977
r.
gradi
d.
caswel
softwar
metric
establish
company-wid
program
prentic
hall
1987
r.
b.
gradi
t.
v.
slack
key
lesson
learn
achiev
widespread
inspect
use
ieee
softwar
page
48–57
juli
1994
e.m.
hall
manag
risk
method
softwar
develop
en-
hancement
addison-wesley
1998
m.
halstead
element
softwar
scienc
elsevi
north-holland
1977
w.
harrison
k.
magel
r.
kluczni
a.
dekock
appli
softwar
complex
metric
program
mainten
ieee
comput
page
65–
79
sept.
1982
s.
henri
d.
kafura
softwar
structur
metric
base
inform
flow
ieee
transact
softwar
engin
7
5
:510–518
1981
s.
henri
d.
kafura
evalu
softwar
system
’
structur
use
quantit
softwar
metric
softwar
practic
experi
14
6
:561–573
june
1984
c.
a.
r.
hoar
axiomat
basi
comput
program
commu-
nicat
acm
12
3
:335–355
1969
ibm-rat
ration
unifi
process
best
practic
softwar
devel-
opment
team
technic
report
ibmwebsit
1993
ieee
ieee
standard
glossari
softwar
engin
terminolog
tech-
nical
report
1990
ieee
ieee
recommend
practic
softwar
requir
specifica-
tion
technic
report
1998
ieee
ieee
recommend
practic
architectur
descript
software-intens
system
technic
report
1471-2000
2000
intern
standard
organ
softwar
engineering—product
qualiti
part
1
qualiti
model
technic
report
iso9126-1
2001
i.
jacobson
object-ori
softwar
engineering—a
use
case
driven
approach
addison-wesley
1992
p.
jalot
cmm
practice—process
execut
softwar
project
infosi
addison-wesley
1999
p.
jalot
softwar
project
manag
practic
addison-wesley
2002
p.
jalot
a.
palit
p.
kurien
timebox
process
model
iter
softwar
develop
advanc
comput
vol
62
page
67–103
academ
press
2004
p.
jalot
a.
palit
p.
kurien
v.
t.
peethamb
timebox
process
model
iter
softwar
develop
journal
system
softwar
70:117–127
s.h
kan.
metric
model
softwar
qualiti
engin
addison-
wesley
1995
t.
korson
j.
d.
gregor
understand
object-ori
unifi
paradigm
commun
acm
33
9
:40–60
sept.
1990
p.
kruchten
ration
unifi
process
addison-wesley
1999
w.
lie
s.
henri
object-ori
metric
predict
maintain
journal
system
softwar
23
2
:111–122
1993
b.
liskov
data
abstract
hierarchi
sigplan
notic
23
5
may
1988
b.
meyer
object
orient
softwar
construct
prentic
hall
1988
j.
d.
musa
a.
iannino
k.
okumoto
softwar
reliability—
measur
predict
applic
mcgraw
hill
1987
g.
myer
art
softwar
test
wiley-intersci
new
york
1979
j.
offutt
s.
liu
a.
abdurazik
p.
ammann
gener
test
data
state-bas
specif
journal
softwar
test
verifi-
cation
reliabl
13
1
:25–53
march
2003
m.
phadk
plan
effici
softwar
test
crosstalk
oct
1997
l.
h.
putnam
gener
empir
solut
macro
softwar
size
estim
problem
ieee
transact
softwar
engin
se-4:345–361
juli
1978
l.
h.
putnam
w.
myer
industri
strength
softwar
effect
man-
agement
use
measur
ieee
comput
societi
1997
s.
rapp
e.
j.
weyuk
select
softwar
test
data
use
data
flow
inform
ieee
transact
softwar
engin
11
4
:367–375
apr
1985
w.
w.
royc
manag
develop
larg
softwar
system
proc
9th
int
conf
softwar
engin
icse-9
origin
ieee
wescon
aug
1970
page
328–338
ieee
1987
sei
softwar
engin
institut
capabl
matur
model
guidelin
improv
softwar
process
addison-wesley
1995
m.
shaw
d.
garlan
softwar
architectur
perspect
emerg-
ing
disciplin
prentic
hall
1996
m.
d.
smith
d.
j.
robson
object
orient
program
prob-
lem
valid
proc
6th
int
ieee
confer
softwar
main-
tenanc
page
272–282
nov.
1990
m.
d.
smith
d.
j.
robson
framework
test
object-ori
program
journal
object-ori
program
page
45–53
june
1992
w.
p.
steven
g.
j.
myer
l.
constantin
structur
design
ibm
system
journal
13
2
1974
k.
s.
trivedi
probabl
statist
reliabl
queu
comput
scienc
applic
second
edit
wiley-intersci
2002
c.
watson
c.
felix
method
program
measur
estim
ibm
system
journal
16
1
jan.
1977
g.
m.
weinberg
e.
l.
schulman
goal
perform
comput
program
human
factor
16
1
:70–77
1974
e.
f.
weller
lesson
learn
three
year
inspect
data
ieee
softwar
page
38–53
sept.
1993
n.
wirth
program
develop
stepwis
refin
commun
acm
14
4
:221–227
april
1971
m.
woodward
m.
hennel
d.
hedley
measur
control
flow
complex
program
text
ieee
transact
softwar
engin
se-5:45–50
jan.
1979
r.
t.
yeh
p.
zave
specifi
softwar
requir
proceed
ieee
68
9
:1077–1088
sept.
1980
b.
h.
yin
j.
w.
winchest
establish
use
measur
evalu
qualiti
design
softwar
engin
note
3:45–52
1978
e.
yourdon
l.
constantin
structur
design
prentic
hall
1979
w.
m.
zage
d.
m.
zage
evalu
design
metric
large-scal
softwar
ieee
softwar
page
75–81
juli
1993
transit
specif
4
see
softwar
architectur
architectur
descript
languag
117
exampl
240
branch
test
24
see
fault
error
build
process
200
client-serv
interact
object
14-server
style
112
code
inspect
see
inspect
process
code
181
configur
manag
see
softwar
configur
manag
waterfal
model
see
waterfal
model
dynam
bind
147
effort
estim
see
estim
encapsul
143
function
test
see
black-box
test
function
4
test-driven
develop
19-strength
softwar
17
17
186
187
object
model
techniqu
15-orient
analysi
15-orient
design
142
word
count
exampl
16-close
principl
12
174
pre-condit
program
18
see
analysi
problem
partit
58
monitor
control
see
project
monitor
control
schedul
see
project
schedul
project
monitor
control
33
86
defect
inject
remov
cycl
7
q
&
p
3
4
mean
time
failur
25
see
analysi
requir
chang
6
use
case
see
use
case
requir
valid
63
requir
see
softwar
requir
requir
review
65
review
see
inspect
process
risk
manag
80
92
single-entri
single-exit
construct
18-mode
fault
241
softwar
engin
process
group
1
see
inspect
softwar
reliabl
see
reliabl
softwar
requir
process
3
see
requir
specif
softwar
requir
37
41
66
version
mainten
200
specif
languag
46
structur
test
see
white-box
test
structur
chart
132
137
object-ori
design
see
object-
orient
design
verif
see
design
verif
system
test
230
unifi
model
languag
see
uml
unit
test
204
229